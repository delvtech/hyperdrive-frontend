{
  "schemes": [],
  "swagger": "2.0",
  "info": {
    "description": "",
    "title": "",
    "contact": {},
    "version": ""
  },
  "host": "",
  "basePath": "/",
  "paths": {
    "/accounts/{account}/assets/fungible/{token}": {
      "get": {
        "description": "Returns cross chain account balance in lowest denomination for supported fungible token",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "summary": "Returns cross chain account balance for supported fungible token",
        "parameters": [
          {
            "type": "string",
            "description": "Either token name or token symbol (case insensitive)",
            "name": "token",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Account address in hex format with 0x (case insensitive)",
            "name": "account",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/server.AccountFungibleBalanceHandler.response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          }
        }
      }
    },
    "/assets/fungible": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "summary": "Returns supported tokens",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/server.GetSupportedFungibleTokens.response"
            }
          }
        }
      }
    },
    "/assets/fungible/{token}": {
      "get": {
        "description": "Using given token name or symbol it will return fungible token details",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "summary": "Returns supported fungible token details",
        "parameters": [
          {
            "type": "string",
            "description": "Either token name or token symbol (case insensitive)",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/entity.FungibleToken"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "health check",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "summary": "health check",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/server.HealthHandler.response"
            }
          }
        }
      }
    },
    "/networks": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "summary": "Returns all supported networks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/server.GetNetworksHandler.response"
            }
          }
        }
      }
    },
    "/networks/{chainID}/assets/fungible": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "summary": "Returns supported tokens on a chain defined by given chainID",
        "parameters": [
          {
            "type": "integer",
            "description": "Chain ID",
            "name": "chainID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/server.GetFungibleTokensByChainHandler.response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          }
        }
      }
    },
    "/solutions/aggregation": {
      "get": {
        "description": "Endpoint will calculate best combination of single-hop transfers to",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "summary": "Returns solution to aggregate fungible token balance on destination",
        "parameters": [
          {
            "type": "string",
            "description": "account address in hex format with 0x which will send and receive funds",
            "name": "account",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "id of destination chain",
            "name": "destination",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "supported token name or symbol",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "min targeted amount of tokens on destination in lowest denomination",
            "name": "amount",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "min amount of tokensto leave on source in lowest denomination",
            "name": "threshold",
            "in": "query"
          },
          {
            "type": "string",
            "description": "comma separated list of source chain ids that can be used",
            "name": "whitelistedSourceChains",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/server.AggregateBalanceSolutionHandler.response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Endpoint will calculate best combination of single-hop transfers to",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "summary": "Returns solution to aggregate fungible token balance on destination and invoking contract call",
        "parameters": [
          {
            "description": "request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/server.AggregateWithHookSolutionHandler.request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/server.AggregateWithHookSolutionHandler.response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/server.ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "entity.Amount": {
      "type": "object",
      "required": ["amount", "amountUSD"],
      "properties": {
        "amount": {
          "description": "amount in lowest denomination",
          "type": "string",
          "example": ""
        },
        "amountUSD": {
          "type": "number"
        }
      }
    },
    "entity.ChainID": {
      "type": "integer",
      "enum": [1, 42161, 10, 137, 8453, 43114, 100, 11155111, 1993, 84532],
      "x-enum-varnames": [
        "Ethereum",
        "Arbitrum",
        "Optimism",
        "Polygon",
        "Base",
        "Avalanche",
        "Gnosis",
        "Sepolia",
        "B3Sepolia",
        "BaseSepolia"
      ]
    },
    "entity.FungibleToken": {
      "type": "object",
      "required": ["addresses", "decimals", "logoURI", "name", "symbol"],
      "properties": {
        "addresses": {
          "description": "Maps chain id to token address on that chain",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "1": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
          }
        },
        "decimals": {
          "type": "integer"
        },
        "logoURI": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      }
    },
    "entity.Network": {
      "type": "object",
      "required": [
        "blockTime",
        "chainID",
        "chainType",
        "logoURI",
        "name",
        "rpcURLs"
      ],
      "properties": {
        "blockTime": {
          "type": "integer"
        },
        "chainID": {
          "$ref": "#/definitions/entity.ChainID"
        },
        "chainType": {
          "type": "string"
        },
        "logoURI": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "rpcURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "entity.TokenTransferQuote": {
      "type": "object",
      "required": [
        "amount",
        "approvals",
        "destinationChain",
        "destinationTokenAddress",
        "duration",
        "fee",
        "gasCost",
        "senderAddress",
        "sourceChain",
        "sourceTokenAddress",
        "tool",
        "transaction"
      ],
      "properties": {
        "amount": {
          "description": "amount of tokens in lowest denomination",
          "type": "string",
          "example": ""
        },
        "approvals": {
          "description": "approvals that need to be executed before transaction",
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.Transaction"
          }
        },
        "destinationChain": {
          "$ref": "#/definitions/entity.ChainID"
        },
        "destinationTokenAddress": {
          "type": "string"
        },
        "duration": {
          "description": "how long transfer will take in seconds",
          "type": "number"
        },
        "fee": {
          "$ref": "#/definitions/entity.Amount"
        },
        "gasCost": {
          "$ref": "#/definitions/entity.Amount"
        },
        "senderAddress": {
          "type": "string"
        },
        "sourceChain": {
          "$ref": "#/definitions/entity.ChainID"
        },
        "sourceTokenAddress": {
          "type": "string"
        },
        "tool": {
          "$ref": "#/definitions/entity.Tool"
        },
        "transaction": {
          "description": "transaction request to be sent to the wallet",
          "allOf": [
            {
              "$ref": "#/definitions/entity.Transaction"
            }
          ]
        }
      }
    },
    "entity.Tool": {
      "type": "object",
      "required": ["logoURI", "name"],
      "properties": {
        "logoURI": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "entity.Transaction": {
      "type": "object",
      "required": [
        "chainId",
        "data",
        "from",
        "gasLimit",
        "gasPrice",
        "to",
        "value"
      ],
      "properties": {
        "chainId": {
          "$ref": "#/definitions/entity.ChainID"
        },
        "data": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "gasLimit": {
          "type": "string"
        },
        "gasPrice": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "server.AccountFungibleBalanceHandler.response": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/server.chainBalance"
          }
        }
      }
    },
    "server.AggregateBalanceSolutionHandler.response": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.TokenTransferQuote"
          }
        }
      }
    },
    "server.AggregateWithHookSolutionHandler.request": {
      "type": "object",
      "required": [
        "account",
        "amount",
        "destination",
        "destinationContractCall",
        "threshold",
        "token",
        "type",
        "whitelistedSourceChains"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "destination": {
          "$ref": "#/definitions/entity.ChainID"
        },
        "destinationContractCall": {
          "type": "object",
          "required": [
            "approvalAddress",
            "callData",
            "contractAddress",
            "gasLimit",
            "outputTokenAddress"
          ],
          "properties": {
            "approvalAddress": {
              "type": "string",
              "example": ""
            },
            "callData": {
              "type": "string"
            },
            "contractAddress": {
              "type": "string"
            },
            "gasLimit": {
              "type": "integer"
            },
            "outputTokenAddress": {
              "type": "string",
              "example": ""
            }
          }
        },
        "threshold": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["fungible"]
        },
        "whitelistedSourceChains": {
          "type": "string"
        }
      }
    },
    "server.AggregateWithHookSolutionHandler.response": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.TokenTransferQuote"
          }
        }
      }
    },
    "server.ErrorResponse": {
      "type": "object",
      "required": ["error"],
      "properties": {
        "error": {
          "type": "string"
        }
      }
    },
    "server.GetFungibleTokensByChainHandler.response": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.FungibleToken"
          }
        }
      }
    },
    "server.GetNetworksHandler.response": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.Network"
          }
        }
      }
    },
    "server.GetSupportedFungibleTokens.response": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.FungibleToken"
          }
        }
      }
    },
    "server.HealthHandler.response": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "server.chainBalance": {
      "type": "object",
      "required": ["balance", "chainId", "tokenDecimals"],
      "properties": {
        "balance": {
          "description": "token balance in lowest denomination",
          "type": "string",
          "example": "123"
        },
        "chainId": {
          "type": "integer"
        },
        "tokenDecimals": {
          "type": "integer"
        }
      }
    }
  }
}
