/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface MakerDsrHyperdriveInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "RAY()": FunctionFragment;
    "addLiquidity(uint256,uint256,address,bool)": FunctionFragment;
    "aggregates()": FunctionFragment;
    "balanceOf(uint256,address)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "batchTransferFrom(address,address,uint256[],uint256[])": FunctionFragment;
    "checkpoint(uint256)": FunctionFragment;
    "checkpointDuration()": FunctionFragment;
    "checkpoints(uint256)": FunctionFragment;
    "chi()": FunctionFragment;
    "closeLong(uint256,uint256,uint256,address,bool)": FunctionFragment;
    "closeShort(uint256,uint256,uint256,address,bool)": FunctionFragment;
    "curveFee()": FunctionFragment;
    "dsrManager()": FunctionFragment;
    "factory()": FunctionFragment;
    "flatFee()": FunctionFragment;
    "getPoolConfiguration()": FunctionFragment;
    "getPoolInfo()": FunctionFragment;
    "initialSharePrice()": FunctionFragment;
    "initialize(uint256,uint256,address,bool)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "linkerCodeHash()": FunctionFragment;
    "marketState()": FunctionFragment;
    "name(uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "openLong(uint256,uint256,address,bool)": FunctionFragment;
    "openShort(uint256,uint256,address,bool)": FunctionFragment;
    "perTokenApprovals(uint256,address,address)": FunctionFragment;
    "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "positionDuration()": FunctionFragment;
    "pot()": FunctionFragment;
    "redeemWithdrawalShares(uint256,uint256,uint256,address,bool)": FunctionFragment;
    "removeLiquidity(uint256,uint256,address,bool)": FunctionFragment;
    "setApproval(uint256,address,uint256)": FunctionFragment;
    "setApprovalBridge(uint256,address,uint256,address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "symbol(uint256)": FunctionFragment;
    "timeStretch()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transferFrom(uint256,address,address,uint256)": FunctionFragment;
    "transferFromBridge(uint256,address,address,uint256,address)": FunctionFragment;
    "withdrawalState()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "PERMIT_TYPEHASH"
      | "PERMIT_TYPEHASH()"
      | "RAY"
      | "RAY()"
      | "addLiquidity"
      | "addLiquidity(uint256,uint256,address,bool)"
      | "aggregates"
      | "aggregates()"
      | "balanceOf"
      | "balanceOf(uint256,address)"
      | "baseToken"
      | "baseToken()"
      | "batchTransferFrom"
      | "batchTransferFrom(address,address,uint256[],uint256[])"
      | "checkpoint"
      | "checkpoint(uint256)"
      | "checkpointDuration"
      | "checkpointDuration()"
      | "checkpoints"
      | "checkpoints(uint256)"
      | "chi"
      | "chi()"
      | "closeLong"
      | "closeLong(uint256,uint256,uint256,address,bool)"
      | "closeShort"
      | "closeShort(uint256,uint256,uint256,address,bool)"
      | "curveFee"
      | "curveFee()"
      | "dsrManager"
      | "dsrManager()"
      | "factory"
      | "factory()"
      | "flatFee"
      | "flatFee()"
      | "getPoolConfiguration"
      | "getPoolConfiguration()"
      | "getPoolInfo"
      | "getPoolInfo()"
      | "initialSharePrice"
      | "initialSharePrice()"
      | "initialize"
      | "initialize(uint256,uint256,address,bool)"
      | "isApprovedForAll"
      | "isApprovedForAll(address,address)"
      | "linkerCodeHash"
      | "linkerCodeHash()"
      | "marketState"
      | "marketState()"
      | "name"
      | "name(uint256)"
      | "nonces"
      | "nonces(address)"
      | "openLong"
      | "openLong(uint256,uint256,address,bool)"
      | "openShort"
      | "openShort(uint256,uint256,address,bool)"
      | "perTokenApprovals"
      | "perTokenApprovals(uint256,address,address)"
      | "permitForAll"
      | "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)"
      | "positionDuration"
      | "positionDuration()"
      | "pot"
      | "pot()"
      | "redeemWithdrawalShares"
      | "redeemWithdrawalShares(uint256,uint256,uint256,address,bool)"
      | "removeLiquidity"
      | "removeLiquidity(uint256,uint256,address,bool)"
      | "setApproval"
      | "setApproval(uint256,address,uint256)"
      | "setApprovalBridge"
      | "setApprovalBridge(uint256,address,uint256,address)"
      | "setApprovalForAll"
      | "setApprovalForAll(address,bool)"
      | "symbol"
      | "symbol(uint256)"
      | "timeStretch"
      | "timeStretch()"
      | "totalShares"
      | "totalShares()"
      | "totalSupply"
      | "totalSupply(uint256)"
      | "transferFrom"
      | "transferFrom(uint256,address,address,uint256)"
      | "transferFromBridge"
      | "transferFromBridge(uint256,address,address,uint256,address)"
      | "withdrawalState"
      | "withdrawalState()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RAY", values?: undefined): string;
  encodeFunctionData(functionFragment: "RAY()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity(uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregates()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferFrom(address,address,uint256[],uint256[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointDuration()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "chi", values?: undefined): string;
  encodeFunctionData(functionFragment: "chi()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeLong",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLong(uint256,uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeShort",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeShort(uint256,uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "curveFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "curveFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dsrManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dsrManager()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory()", values?: undefined): string;
  encodeFunctionData(functionFragment: "flatFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "flatFee()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolConfiguration()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialSharePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialSharePrice()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "linkerCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkerCodeHash()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketState()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "name",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "name(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openLong",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openLong(uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openShort",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openShort(uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "perTokenApprovals",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "perTokenApprovals(uint256,address,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitForAll",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionDuration()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(functionFragment: "pot()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemWithdrawalShares",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWithdrawalShares(uint256,uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity(uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalBridge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalBridge(uint256,address,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "symbol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "symbol(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeStretch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeStretch()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(uint256,address,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromBridge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromBridge(uint256,address,address,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalState()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RAY()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity(uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aggregates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregates()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferFrom(address,address,uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoint(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointDuration()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chi()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeLong", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeLong(uint256,uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeShort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeShort(uint256,uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curveFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curveFee()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dsrManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dsrManager()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flatFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flatFee()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolConfiguration()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialSharePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialSharePrice()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkerCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkerCodeHash()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketState()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "name(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openLong", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openLong(uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openShort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openShort(uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perTokenApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perTokenApprovals(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionDuration()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pot()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemWithdrawalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemWithdrawalShares(uint256,uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity(uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalBridge(uint256,address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "symbol(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeStretch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeStretch()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(uint256,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromBridge(uint256,address,address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalState()",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferSingle(address,address,address,uint256,uint256)"
  ): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface MakerDsrHyperdrive extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MakerDsrHyperdriveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    RAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "RAY()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidity(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addLiquidity(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aggregates(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longAverageMaturityTime: BigNumber;
        longBaseVolume: BigNumber;
        shortAverageMaturityTime: BigNumber;
        shortBaseVolume: BigNumber;
      }
    >;

    "aggregates()"(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longAverageMaturityTime: BigNumber;
        longBaseVolume: BigNumber;
        shortAverageMaturityTime: BigNumber;
        shortBaseVolume: BigNumber;
      }
    >;

    balanceOf(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    "baseToken()"(overrides?: CallOverrides): Promise<[string]>;

    batchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "batchTransferFrom(address,address,uint256[],uint256[])"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkpoint(
      _checkpointTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "checkpoint(uint256)"(
      _checkpointTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkpointDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "checkpointDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkpoints(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sharePrice: BigNumber;
        longBaseVolume: BigNumber;
        shortBaseVolume: BigNumber;
      }
    >;

    "checkpoints(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sharePrice: BigNumber;
        longBaseVolume: BigNumber;
        shortBaseVolume: BigNumber;
      }
    >;

    chi(overrides?: CallOverrides): Promise<[BigNumber]>;

    "chi()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    closeLong(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "closeLong(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeShort(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "closeShort(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    curveFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "curveFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    dsrManager(overrides?: CallOverrides): Promise<[string]>;

    "dsrManager()"(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    flatFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "flatFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolConfiguration(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialSharePrice_: BigNumber;
        positionDuration_: BigNumber;
        checkpointDuration_: BigNumber;
        timeStretch_: BigNumber;
        flatFee_: BigNumber;
        curveFee_: BigNumber;
      }
    >;

    "getPoolConfiguration()"(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialSharePrice_: BigNumber;
        positionDuration_: BigNumber;
        checkpointDuration_: BigNumber;
        timeStretch_: BigNumber;
        flatFee_: BigNumber;
        curveFee_: BigNumber;
      }
    >;

    getPoolInfo(overrides?: CallOverrides): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        shareReserves_: BigNumber;
        bondReserves_: BigNumber;
        lpTotalSupply: BigNumber;
        sharePrice: BigNumber;
        longsOutstanding_: BigNumber;
        longAverageMaturityTime_: BigNumber;
        longBaseVolume_: BigNumber;
        shortsOutstanding_: BigNumber;
        shortAverageMaturityTime_: BigNumber;
        shortBaseVolume_: BigNumber;
      }
    >;

    "getPoolInfo()"(overrides?: CallOverrides): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        shareReserves_: BigNumber;
        bondReserves_: BigNumber;
        lpTotalSupply: BigNumber;
        sharePrice: BigNumber;
        longsOutstanding_: BigNumber;
        longAverageMaturityTime_: BigNumber;
        longBaseVolume_: BigNumber;
        shortsOutstanding_: BigNumber;
        shortAverageMaturityTime_: BigNumber;
        shortBaseVolume_: BigNumber;
      }
    >;

    initialSharePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "initialSharePrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    linkerCodeHash(overrides?: CallOverrides): Promise<[string]>;

    "linkerCodeHash()"(overrides?: CallOverrides): Promise<[string]>;

    marketState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        shareReserves: BigNumber;
        bondReserves: BigNumber;
        longsOutstanding: BigNumber;
        shortsOutstanding: BigNumber;
      }
    >;

    "marketState()"(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        shareReserves: BigNumber;
        bondReserves: BigNumber;
        longsOutstanding: BigNumber;
        shortsOutstanding: BigNumber;
      }
    >;

    name(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "name(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nonces(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openLong(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "openLong(uint256,uint256,address,bool)"(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openShort(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "openShort(uint256,uint256,address,bool)"(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    perTokenApprovals(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "perTokenApprovals(uint256,address,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    permitForAll(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    positionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "positionDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pot(overrides?: CallOverrides): Promise<[string]>;

    "pot()"(overrides?: CallOverrides): Promise<[string]>;

    redeemWithdrawalShares(
      _longWithdrawalShares: PromiseOrValue<BigNumberish>,
      _shortWithdrawalShares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "redeemWithdrawalShares(uint256,uint256,uint256,address,bool)"(
      _longWithdrawalShares: PromiseOrValue<BigNumberish>,
      _shortWithdrawalShares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeLiquidity(uint256,uint256,address,bool)"(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApproval(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setApproval(uint256,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setApprovalBridge(uint256,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "symbol(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    timeStretch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "timeStretch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalShares()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupply(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferFrom(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(uint256,address,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFromBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFromBridge(uint256,address,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawalState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longWithdrawalSharesOutstanding: BigNumber;
        shortWithdrawalSharesOutstanding: BigNumber;
        longWithdrawalShareProceeds: BigNumber;
        shortWithdrawalShareProceeds: BigNumber;
      }
    >;

    "withdrawalState()"(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longWithdrawalSharesOutstanding: BigNumber;
        shortWithdrawalSharesOutstanding: BigNumber;
        longWithdrawalShareProceeds: BigNumber;
        shortWithdrawalShareProceeds: BigNumber;
      }
    >;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  RAY(overrides?: CallOverrides): Promise<BigNumber>;

  "RAY()"(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidity(
    _contribution: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addLiquidity(uint256,uint256,address,bool)"(
    _contribution: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aggregates(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      longAverageMaturityTime: BigNumber;
      longBaseVolume: BigNumber;
      shortAverageMaturityTime: BigNumber;
      shortBaseVolume: BigNumber;
    }
  >;

  "aggregates()"(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      longAverageMaturityTime: BigNumber;
      longBaseVolume: BigNumber;
      shortAverageMaturityTime: BigNumber;
      shortBaseVolume: BigNumber;
    }
  >;

  balanceOf(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(uint256,address)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  "baseToken()"(overrides?: CallOverrides): Promise<string>;

  batchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "batchTransferFrom(address,address,uint256[],uint256[])"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkpoint(
    _checkpointTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "checkpoint(uint256)"(
    _checkpointTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkpointDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "checkpointDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  checkpoints(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      sharePrice: BigNumber;
      longBaseVolume: BigNumber;
      shortBaseVolume: BigNumber;
    }
  >;

  "checkpoints(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      sharePrice: BigNumber;
      longBaseVolume: BigNumber;
      shortBaseVolume: BigNumber;
    }
  >;

  chi(overrides?: CallOverrides): Promise<BigNumber>;

  "chi()"(overrides?: CallOverrides): Promise<BigNumber>;

  closeLong(
    _maturityTime: PromiseOrValue<BigNumberish>,
    _bondAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "closeLong(uint256,uint256,uint256,address,bool)"(
    _maturityTime: PromiseOrValue<BigNumberish>,
    _bondAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeShort(
    _maturityTime: PromiseOrValue<BigNumberish>,
    _bondAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "closeShort(uint256,uint256,uint256,address,bool)"(
    _maturityTime: PromiseOrValue<BigNumberish>,
    _bondAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  curveFee(overrides?: CallOverrides): Promise<BigNumber>;

  "curveFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  dsrManager(overrides?: CallOverrides): Promise<string>;

  "dsrManager()"(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  flatFee(overrides?: CallOverrides): Promise<BigNumber>;

  "flatFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolConfiguration(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      initialSharePrice_: BigNumber;
      positionDuration_: BigNumber;
      checkpointDuration_: BigNumber;
      timeStretch_: BigNumber;
      flatFee_: BigNumber;
      curveFee_: BigNumber;
    }
  >;

  "getPoolConfiguration()"(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      initialSharePrice_: BigNumber;
      positionDuration_: BigNumber;
      checkpointDuration_: BigNumber;
      timeStretch_: BigNumber;
      flatFee_: BigNumber;
      curveFee_: BigNumber;
    }
  >;

  getPoolInfo(overrides?: CallOverrides): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      shareReserves_: BigNumber;
      bondReserves_: BigNumber;
      lpTotalSupply: BigNumber;
      sharePrice: BigNumber;
      longsOutstanding_: BigNumber;
      longAverageMaturityTime_: BigNumber;
      longBaseVolume_: BigNumber;
      shortsOutstanding_: BigNumber;
      shortAverageMaturityTime_: BigNumber;
      shortBaseVolume_: BigNumber;
    }
  >;

  "getPoolInfo()"(overrides?: CallOverrides): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      shareReserves_: BigNumber;
      bondReserves_: BigNumber;
      lpTotalSupply: BigNumber;
      sharePrice: BigNumber;
      longsOutstanding_: BigNumber;
      longAverageMaturityTime_: BigNumber;
      longBaseVolume_: BigNumber;
      shortsOutstanding_: BigNumber;
      shortAverageMaturityTime_: BigNumber;
      shortBaseVolume_: BigNumber;
    }
  >;

  initialSharePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "initialSharePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _contribution: PromiseOrValue<BigNumberish>,
    _apr: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(uint256,uint256,address,bool)"(
    _contribution: PromiseOrValue<BigNumberish>,
    _apr: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  linkerCodeHash(overrides?: CallOverrides): Promise<string>;

  "linkerCodeHash()"(overrides?: CallOverrides): Promise<string>;

  marketState(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      shareReserves: BigNumber;
      bondReserves: BigNumber;
      longsOutstanding: BigNumber;
      shortsOutstanding: BigNumber;
    }
  >;

  "marketState()"(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      shareReserves: BigNumber;
      bondReserves: BigNumber;
      longsOutstanding: BigNumber;
      shortsOutstanding: BigNumber;
    }
  >;

  name(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "name(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonces(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openLong(
    _baseAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "openLong(uint256,uint256,address,bool)"(
    _baseAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openShort(
    _bondAmount: PromiseOrValue<BigNumberish>,
    _maxDeposit: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "openShort(uint256,uint256,address,bool)"(
    _bondAmount: PromiseOrValue<BigNumberish>,
    _maxDeposit: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  perTokenApprovals(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "perTokenApprovals(uint256,address,address)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  permitForAll(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  positionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "positionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  pot(overrides?: CallOverrides): Promise<string>;

  "pot()"(overrides?: CallOverrides): Promise<string>;

  redeemWithdrawalShares(
    _longWithdrawalShares: PromiseOrValue<BigNumberish>,
    _shortWithdrawalShares: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "redeemWithdrawalShares(uint256,uint256,uint256,address,bool)"(
    _longWithdrawalShares: PromiseOrValue<BigNumberish>,
    _shortWithdrawalShares: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    _shares: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeLiquidity(uint256,uint256,address,bool)"(
    _shares: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApproval(
    tokenID: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setApproval(uint256,address,uint256)"(
    tokenID: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalBridge(
    tokenID: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setApprovalBridge(uint256,address,uint256,address)"(
    tokenID: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "symbol(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  timeStretch(overrides?: CallOverrides): Promise<BigNumber>;

  "timeStretch()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupply(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferFrom(
    tokenID: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(uint256,address,address,uint256)"(
    tokenID: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFromBridge(
    tokenID: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFromBridge(uint256,address,address,uint256,address)"(
    tokenID: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawalState(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      longWithdrawalSharesOutstanding: BigNumber;
      shortWithdrawalSharesOutstanding: BigNumber;
      longWithdrawalShareProceeds: BigNumber;
      shortWithdrawalShareProceeds: BigNumber;
    }
  >;

  "withdrawalState()"(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      longWithdrawalSharesOutstanding: BigNumber;
      shortWithdrawalSharesOutstanding: BigNumber;
      longWithdrawalShareProceeds: BigNumber;
      shortWithdrawalShareProceeds: BigNumber;
    }
  >;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    RAY(overrides?: CallOverrides): Promise<BigNumber>;

    "RAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregates(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longAverageMaturityTime: BigNumber;
        longBaseVolume: BigNumber;
        shortAverageMaturityTime: BigNumber;
        shortBaseVolume: BigNumber;
      }
    >;

    "aggregates()"(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longAverageMaturityTime: BigNumber;
        longBaseVolume: BigNumber;
        shortAverageMaturityTime: BigNumber;
        shortBaseVolume: BigNumber;
      }
    >;

    balanceOf(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    "baseToken()"(overrides?: CallOverrides): Promise<string>;

    batchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransferFrom(address,address,uint256[],uint256[])"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkpoint(
      _checkpointTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkpoint(uint256)"(
      _checkpointTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkpointDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "checkpointDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoints(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sharePrice: BigNumber;
        longBaseVolume: BigNumber;
        shortBaseVolume: BigNumber;
      }
    >;

    "checkpoints(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sharePrice: BigNumber;
        longBaseVolume: BigNumber;
        shortBaseVolume: BigNumber;
      }
    >;

    chi(overrides?: CallOverrides): Promise<BigNumber>;

    "chi()"(overrides?: CallOverrides): Promise<BigNumber>;

    closeLong(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "closeLong(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeShort(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "closeShort(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curveFee(overrides?: CallOverrides): Promise<BigNumber>;

    "curveFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    dsrManager(overrides?: CallOverrides): Promise<string>;

    "dsrManager()"(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    flatFee(overrides?: CallOverrides): Promise<BigNumber>;

    "flatFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolConfiguration(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialSharePrice_: BigNumber;
        positionDuration_: BigNumber;
        checkpointDuration_: BigNumber;
        timeStretch_: BigNumber;
        flatFee_: BigNumber;
        curveFee_: BigNumber;
      }
    >;

    "getPoolConfiguration()"(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialSharePrice_: BigNumber;
        positionDuration_: BigNumber;
        checkpointDuration_: BigNumber;
        timeStretch_: BigNumber;
        flatFee_: BigNumber;
        curveFee_: BigNumber;
      }
    >;

    getPoolInfo(overrides?: CallOverrides): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        shareReserves_: BigNumber;
        bondReserves_: BigNumber;
        lpTotalSupply: BigNumber;
        sharePrice: BigNumber;
        longsOutstanding_: BigNumber;
        longAverageMaturityTime_: BigNumber;
        longBaseVolume_: BigNumber;
        shortsOutstanding_: BigNumber;
        shortAverageMaturityTime_: BigNumber;
        shortBaseVolume_: BigNumber;
      }
    >;

    "getPoolInfo()"(overrides?: CallOverrides): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        shareReserves_: BigNumber;
        bondReserves_: BigNumber;
        lpTotalSupply: BigNumber;
        sharePrice: BigNumber;
        longsOutstanding_: BigNumber;
        longAverageMaturityTime_: BigNumber;
        longBaseVolume_: BigNumber;
        shortsOutstanding_: BigNumber;
        shortAverageMaturityTime_: BigNumber;
        shortBaseVolume_: BigNumber;
      }
    >;

    initialSharePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "initialSharePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    linkerCodeHash(overrides?: CallOverrides): Promise<string>;

    "linkerCodeHash()"(overrides?: CallOverrides): Promise<string>;

    marketState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        shareReserves: BigNumber;
        bondReserves: BigNumber;
        longsOutstanding: BigNumber;
        shortsOutstanding: BigNumber;
      }
    >;

    "marketState()"(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        shareReserves: BigNumber;
        bondReserves: BigNumber;
        longsOutstanding: BigNumber;
        shortsOutstanding: BigNumber;
      }
    >;

    name(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "name(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLong(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openLong(uint256,uint256,address,bool)"(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openShort(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openShort(uint256,uint256,address,bool)"(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    perTokenApprovals(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "perTokenApprovals(uint256,address,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitForAll(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    positionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "positionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    pot(overrides?: CallOverrides): Promise<string>;

    "pot()"(overrides?: CallOverrides): Promise<string>;

    redeemWithdrawalShares(
      _longWithdrawalShares: PromiseOrValue<BigNumberish>,
      _shortWithdrawalShares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemWithdrawalShares(uint256,uint256,uint256,address,bool)"(
      _longWithdrawalShares: PromiseOrValue<BigNumberish>,
      _shortWithdrawalShares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "removeLiquidity(uint256,uint256,address,bool)"(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    setApproval(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApproval(uint256,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalBridge(uint256,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "symbol(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    timeStretch(overrides?: CallOverrides): Promise<BigNumber>;

    "timeStretch()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(uint256,address,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFromBridge(uint256,address,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longWithdrawalSharesOutstanding: BigNumber;
        shortWithdrawalSharesOutstanding: BigNumber;
        longWithdrawalShareProceeds: BigNumber;
        shortWithdrawalShareProceeds: BigNumber;
      }
    >;

    "withdrawalState()"(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        longWithdrawalSharesOutstanding: BigNumber;
        shortWithdrawalSharesOutstanding: BigNumber;
        longWithdrawalShareProceeds: BigNumber;
        shortWithdrawalShareProceeds: BigNumber;
      }
    >;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    RAY(overrides?: CallOverrides): Promise<BigNumber>;

    "RAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addLiquidity(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aggregates(overrides?: CallOverrides): Promise<BigNumber>;

    "aggregates()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "baseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    batchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "batchTransferFrom(address,address,uint256[],uint256[])"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkpoint(
      _checkpointTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "checkpoint(uint256)"(
      _checkpointTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkpointDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "checkpointDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoints(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkpoints(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chi(overrides?: CallOverrides): Promise<BigNumber>;

    "chi()"(overrides?: CallOverrides): Promise<BigNumber>;

    closeLong(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "closeLong(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeShort(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "closeShort(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    curveFee(overrides?: CallOverrides): Promise<BigNumber>;

    "curveFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    dsrManager(overrides?: CallOverrides): Promise<BigNumber>;

    "dsrManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    flatFee(overrides?: CallOverrides): Promise<BigNumber>;

    "flatFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolConfiguration()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialSharePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "initialSharePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkerCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    "linkerCodeHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketState(overrides?: CallOverrides): Promise<BigNumber>;

    "marketState()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "name(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLong(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "openLong(uint256,uint256,address,bool)"(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openShort(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "openShort(uint256,uint256,address,bool)"(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    perTokenApprovals(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "perTokenApprovals(uint256,address,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitForAll(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    positionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "positionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    pot(overrides?: CallOverrides): Promise<BigNumber>;

    "pot()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemWithdrawalShares(
      _longWithdrawalShares: PromiseOrValue<BigNumberish>,
      _shortWithdrawalShares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "redeemWithdrawalShares(uint256,uint256,uint256,address,bool)"(
      _longWithdrawalShares: PromiseOrValue<BigNumberish>,
      _shortWithdrawalShares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeLiquidity(uint256,uint256,address,bool)"(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApproval(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setApproval(uint256,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setApprovalBridge(uint256,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "symbol(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeStretch(overrides?: CallOverrides): Promise<BigNumber>;

    "timeStretch()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFrom(uint256,address,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFromBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFromBridge(uint256,address,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawalState(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalState()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RAY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidity(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aggregates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "aggregates()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(uint256,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "batchTransferFrom(address,address,uint256[],uint256[])"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkpoint(
      _checkpointTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "checkpoint(uint256)"(
      _checkpointTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkpointDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkpointDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpoints(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkpoints(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chi()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeLong(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "closeLong(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeShort(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "closeShort(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    curveFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curveFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dsrManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dsrManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flatFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "flatFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolConfiguration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPoolInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialSharePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialSharePrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkerCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "linkerCodeHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "name(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLong(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "openLong(uint256,uint256,address,bool)"(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openShort(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "openShort(uint256,uint256,address,bool)"(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    perTokenApprovals(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "perTokenApprovals(uint256,address,address)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permitForAll(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    positionDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "positionDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemWithdrawalShares(
      _longWithdrawalShares: PromiseOrValue<BigNumberish>,
      _shortWithdrawalShares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "redeemWithdrawalShares(uint256,uint256,uint256,address,bool)"(
      _longWithdrawalShares: PromiseOrValue<BigNumberish>,
      _shortWithdrawalShares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(uint256,uint256,address,bool)"(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApproval(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setApproval(uint256,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalBridge(uint256,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "symbol(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeStretch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeStretch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupply(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(uint256,address,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFromBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFromBridge(uint256,address,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdrawalState()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
