/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "BondWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BondWrapper__factory>;
    getContractFactory(
      name: "ERC20Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Forwarder__factory>;
    getContractFactory(
      name: "ForwarderFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForwarderFactory__factory>;
    getContractFactory(
      name: "Hyperdrive",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hyperdrive__factory>;
    getContractFactory(
      name: "HyperdriveBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HyperdriveBase__factory>;
    getContractFactory(
      name: "HyperdriveLong",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HyperdriveLong__factory>;
    getContractFactory(
      name: "HyperdriveLP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HyperdriveLP__factory>;
    getContractFactory(
      name: "HyperdriveShort",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HyperdriveShort__factory>;
    getContractFactory(
      name: "AaveHyperdrive",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveHyperdrive__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "MakerDsrHyperdrive",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MakerDsrHyperdrive__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Mint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Mint__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IForwarderFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForwarderFactory__factory>;
    getContractFactory(
      name: "IHyperdrive",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHyperdrive__factory>;
    getContractFactory(
      name: "DsrManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DsrManager__factory>;
    getContractFactory(
      name: "Pot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pot__factory>;
    getContractFactory(
      name: "IMultiToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMultiToken__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "FixedPointMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedPointMath__factory>;
    getContractFactory(
      name: "MultiToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiToken__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "BondWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BondWrapper>;
    getContractAt(
      name: "ERC20Forwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Forwarder>;
    getContractAt(
      name: "ForwarderFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ForwarderFactory>;
    getContractAt(
      name: "Hyperdrive",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Hyperdrive>;
    getContractAt(
      name: "HyperdriveBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HyperdriveBase>;
    getContractAt(
      name: "HyperdriveLong",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HyperdriveLong>;
    getContractAt(
      name: "HyperdriveLP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HyperdriveLP>;
    getContractAt(
      name: "HyperdriveShort",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HyperdriveShort>;
    getContractAt(
      name: "AaveHyperdrive",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveHyperdrive>;
    getContractAt(
      name: "Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pool>;
    getContractAt(
      name: "MakerDsrHyperdrive",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MakerDsrHyperdrive>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Mint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Mint>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IForwarderFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IForwarderFactory>;
    getContractAt(
      name: "IHyperdrive",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHyperdrive>;
    getContractAt(
      name: "DsrManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DsrManager>;
    getContractAt(
      name: "Pot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pot>;
    getContractAt(
      name: "IMultiToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMultiToken>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "FixedPointMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedPointMath>;
    getContractAt(
      name: "MultiToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
