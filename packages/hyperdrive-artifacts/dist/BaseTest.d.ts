export declare const BaseTest: {
    readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "WhaleBalanceExceeded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "WhaleIsContract";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly name: "log";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "log_address";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "val";
            readonly type: "uint256[]";
        }];
        readonly name: "log_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "int256[]";
            readonly name: "val";
            readonly type: "int256[]";
        }];
        readonly name: "log_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "val";
            readonly type: "address[]";
        }];
        readonly name: "log_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "log_bytes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "log_bytes32";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "int256";
            readonly name: "";
            readonly type: "int256";
        }];
        readonly name: "log_int";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "val";
            readonly type: "address";
        }];
        readonly name: "log_named_address";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "val";
            readonly type: "uint256[]";
        }];
        readonly name: "log_named_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "int256[]";
            readonly name: "val";
            readonly type: "int256[]";
        }];
        readonly name: "log_named_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "val";
            readonly type: "address[]";
        }];
        readonly name: "log_named_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "val";
            readonly type: "bytes";
        }];
        readonly name: "log_named_bytes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "val";
            readonly type: "bytes32";
        }];
        readonly name: "log_named_bytes32";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "int256";
            readonly name: "val";
            readonly type: "int256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "decimals";
            readonly type: "uint256";
        }];
        readonly name: "log_named_decimal_int";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "val";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "decimals";
            readonly type: "uint256";
        }];
        readonly name: "log_named_decimal_uint";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "int256";
            readonly name: "val";
            readonly type: "int256";
        }];
        readonly name: "log_named_int";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "val";
            readonly type: "string";
        }];
        readonly name: "log_named_string";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "val";
            readonly type: "uint256";
        }];
        readonly name: "log_named_uint";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly name: "log_string";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "log_uint";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "logs";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "IS_TEST";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "int256";
            readonly name: "_delta";
            readonly type: "int256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_targetValue";
            readonly type: "uint256";
        }];
        readonly name: "assertWithDelta";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }];
        readonly name: "createUser";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "excludeArtifacts";
        readonly outputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "excludedArtifacts_";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "excludeContracts";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "excludedContracts_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "excludeSenders";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "excludedSenders_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "failed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "setUp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetArtifactSelectors";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "addr";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct StdInvariant.FuzzSelector[]";
            readonly name: "targetedArtifactSelectors_";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetArtifacts";
        readonly outputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "targetedArtifacts_";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetContracts";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targetedContracts_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetSelectors";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "addr";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct StdInvariant.FuzzSelector[]";
            readonly name: "targetedSelectors_";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetSenders";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targetedSenders_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "whale";
            readonly type: "address";
        }, {
            readonly internalType: "contract IERC20";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "whaleTransfer";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "whale";
            readonly type: "address";
        }, {
            readonly internalType: "contract IERC20";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "whaleTransfer";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    readonly bytecode: {
        readonly object: "0x6080604081905260078054600160ff199182168117909255600b8054909116909117905563f877cb1960e01b90526020608452600f60a4526e1350525393915517d49410d7d55493608a1b60c452737109709ecfa91a80626ff3989d68f67f5b1dd12d63f877cb1960e4600060405180830381865afa15801562000087573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000b1919081019062000194565b602990620000c09082620002f8565b5060405163f877cb1960e01b815260206004820152600e60248201526d11d3d154931257d49410d7d5549360921b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb1990606401600060405180830381865afa15801562000130573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200015a919081019062000194565b602a90620001699082620002f8565b503480156200017757600080fd5b50620003c4565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620001a857600080fd5b82516001600160401b0380821115620001c057600080fd5b818501915085601f830112620001d557600080fd5b815181811115620001ea57620001ea6200017e565b604051601f8201601f19908116603f011681019083821181831017156200021557620002156200017e565b8160405282815288868487010111156200022e57600080fd5b600093505b8284101562000252578484018601518185018701529285019262000233565b600086848301015280965050505050505092915050565b600181811c908216806200027e57607f821691505b6020821081036200029f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002f357600081815260208120601f850160051c81016020861015620002ce5750805b601f850160051c820191505b81811015620002ef57828155600101620002da565b5050505b505050565b81516001600160401b038111156200031457620003146200017e565b6200032c8162000325845462000269565b84620002a5565b602080601f8311600181146200036457600084156200034b5750858301515b600019600386901b1c1916600185901b178555620002ef565b600085815260208120601f198616915b82811015620003955788860151825594840194600190910190840162000374565b5085821015620003b45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611d9680620003d46000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806366d9a9a011610097578063b5508aa911610066578063b5508aa9146101d2578063ba414fa6146101da578063e20c9f71146101f2578063fa7626d4146101fa57600080fd5b806366d9a9a01461018d57806385226c81146101a2578063916a17c6146101b7578063ab75e7c3146101bf57600080fd5b80633e5e0d26116100d35780633e5e0d261461013f5780633e5e3c23146101525780633f7286f41461015a578063507ffba51461016257600080fd5b80630a9254e4146100fa57806310716760146101045780631ed7831c1461012a575b600080fd5b610102610207565b005b61011761011236600461175f565b6104d3565b6040519081526020015b60405180910390f35b610132610556565b60405161012191906117aa565b61011761014d3660046117f7565b6105b8565b610132610826565b610132610886565b610175610170366004611860565b6108e6565b6040516001600160a01b039091168152602001610121565b6101956109fe565b6040516101219190611911565b6101aa610aed565b6040516101219190611a14565b610195610bbd565b6101026101cd366004611a76565b610ca3565b6101aa610fa9565b6101e2611079565b6040519015158152602001610121565b6101326111a6565b6007546101e29060ff1681565b61022d60405180604001604052806005815260200164616c69636560d81b8152506108e6565b601c80546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260038152623137b160e91b6020820152610270906108e6565b601d80546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526563656c696e6560d01b60208201526102b6906108e6565b601e80546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260038152623230b760e91b60208201526102f9906108e6565b601f80546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600381526265766560e81b602082015261033c906108e6565b602060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061038b604051806040016040528060088152602001673232b83637bcb2b960c11b8152506108e6565b602280546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600681526536b4b73a32b960d11b60208201526103d1906108e6565b602180546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600c81526b3332b2a1b7b63632b1ba37b960a11b602082015261041d906108e6565b602380546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152600a815269676f7665726e616e636560b01b6020820152610467906108e6565b602480546001600160a01b0319166001600160a01b03929092169190911790556040805180820190915260068152653830bab9b2b960d11b60208201526104ad906108e6565b602580546001600160a01b0319166001600160a01b039290921691909117905542602855565b6040516370a0823160e01b81526001600160a01b03808516600483015260009161054e91869186918216906370a0823190602401602060405180830381865afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105489190611aa2565b856105b8565b949350505050565b606060148054806020026020016040519081016040528092919081815260200182805480156105ae57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610590575b5050505050905090565b6040516370a0823160e01b81526001600160a01b03858116600483015260009182918616906370a0823190602401602060405180830381865afa158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190611aa2565b90508084111561064a5760405163188c93a560e31b815260040160405180910390fd5b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b03166390c5013b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106a857600080fd5b505af11580156106bc573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b0389166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506306447d569150602401600060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526001600160a01b0389166004820152670de0b6b3a76400006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c88a5e6d9150604401600060405180830381600087803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018890528816925063a9059cbb91506044016020604051808303816000875af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190611abb565b509295945050505050565b606060168054806020026020016040519081016040528092919081815260200182805480156105ae576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610590575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156105ae576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610590575050505050905090565b6000816040516020016108f99190611ae4565b60408051601f198184030181529082905280516020909101206318caf8e360e31b82529150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c7189061094a9084908690600401611af7565b600060405180830381600087803b15801561096457600080fd5b505af1158015610978573d6000803e3d6000fd5b505060405163c88a5e6d60e01b81526001600160a01b038416600482015269021e19e0c9bab24000006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c88a5e6d9150604401600060405180830381600087803b1580156109e157600080fd5b505af11580156109f5573d6000803e3d6000fd5b50505050919050565b60606019805480602002602001604051908101604052809291908181526020016000905b82821015610ae45760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610acc57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610a8e5790505b50505050508152505081526020019060010190610a22565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020016000905b82821015610ae4578382906000526020600020018054610b3090611b1b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c90611b1b565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b505050505081526020019060010190610b11565b6060601a805480602002602001604051908101604052809291908181526020016000905b82821015610ae45760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610c8b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610c4d5790505b50505050508152505081526020019060010190610be1565b60008212801590610cd857610cd384831015604051806060016040528060368152602001611d2b60369139611206565b610cfc565b610cfc828511604051806060016040528060278152602001611c9260279139611206565b600081610d095784610d13565b610d138486611b6b565b905060008215610d235785610d36565b610d2c85611b84565b610d369087611ba0565b905080841080610d4557508184115b15610dbe57610d80848260405180604001604052806013815260200172195e18d959591cc81b1bddd95c88189bdd5b99606a1b81525061123d565b610db6848360405180604001604052806013815260200172195e18d959591cc81d5c1c195c88189bdd5b99606a1b815250611279565b505050505050565b8215610ead576000610dd08786611ba0565b905085811015610e845760408051808201909152601a81527f507265636973696f6e20696e637265617365642062793a2025730000000000006020820152610e2190610e1c8389611ba0565b6112b0565b610e506040518060400160405280600d81526020016c4f6c642044656c74613a20257360981b815250876112f5565b610e7f6040518060400160405280600d81526020016c4e65772044656c74613a20257360981b815250826112b0565b610ea7565b610ea78386604051806060016040528060298152602001611cb96029913961133a565b50610db6565b6000610eb98588611ba0565b9050610ec486611b84565b811015610f7d57610f196040518060400160405280601a81526020017f507265636973696f6e20696e637265617365642062793a2025730000000000008152508288610f0f90611b84565b610e1c9190611ba0565b610f486040518060400160405280600d81526020016c4f6c642044656c74613a20257360981b815250876112f5565b610f786040518060400160405280600e81526020016d4e65772044656c74613a202d257360901b815250826112b0565b610fa0565b610fa08286604051806060016040528060298152602001611ce26029913961133a565b50505050505050565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610ae4578382906000526020600020018054610fec90611b1b565b80601f016020809104026020016040519081016040528092919081815260200182805461101890611b1b565b80156110655780601f1061103a57610100808354040283529160200191611065565b820191906000526020600020905b81548152906001019060200180831161104857829003601f168201915b505050505081526020019060010190610fcd565b600754600090610100900460ff161561109b5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156111a15760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611129917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611bb3565b60408051601f198184030181529082905261114391611be4565b6000604051808303816000865af19150503d8060008114611180576040519150601f19603f3d011682016040523d82523d6000602084013e611185565b606091505b509150508080602001905181019061119d9190611abb565b9150505b919050565b606060138054806020026020016040519081016040528092919081815260200182805480156105ae576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610590575050505050905090565b8161123957600080516020611c72833981519152816040516112289190611c00565b60405180910390a161123982611370565b5050565b8183101561127457600080516020611c72833981519152816040516112629190611c00565b60405180910390a161127483836113d5565b505050565b8183111561127457600080516020611c728339815191528160405161129e9190611c00565b60405180910390a161127483836114ca565b61123982826040516024016112c6929190611c2f565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b17905261152a565b611239828260405160240161130b929190611c2f565b60408051601f198184030181529190526020810180516001600160e01b0316631e53134760e11b17905261152a565b81831461127457600080516020611c728339815191528160405161135e9190611c00565b60405180910390a16112748383611533565b806113d257600080516020611c528339815191526040516113c29060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16113d261161d565b50565b8082101561123957600080516020611c528339815191526040516114359060208082526022908201527f4572726f723a2061203e3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a16040805181815260098183015268202056616c7565206160b81b6060820152602081018490529051600080516020611d0b8339815191529181900360800190a1604080518181526009918101919091526810102b30b63ab2903160b91b606082015260208101829052600080516020611d0b833981519152906080015b60405180910390a161123961161d565b8082111561123957600080516020611c528339815191526040516114359060208082526022908201527f4572726f723a2061203c3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b6113d281611729565b80821461123957600080516020611c528339815191526040516115929060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b6060820152602081018490529051600080516020611d0b8339815191529181900360800190a160408051818152600a91810191909152690808080808149a59da1d60b21b606082015260208101829052600080516020611d0b833981519152906080016114ba565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156117185760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526116b79291602001611bb3565b60408051601f19818403018152908290526116d191611be4565b6000604051808303816000865af19150503d806000811461170e576040519150601f19603f3d011682016040523d82523d6000602084013e611713565b606091505b505050505b6007805461ff001916610100179055565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160a01b03811681146113d257600080fd5b60008060006060848603121561177457600080fd5b833561177f8161174a565b9250602084013561178f8161174a565b9150604084013561179f8161174a565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156117eb5783516001600160a01b0316835292840192918401916001016117c6565b50909695505050505050565b6000806000806080858703121561180d57600080fd5b84356118188161174a565b935060208501356118288161174a565b925060408501359150606085013561183f8161174a565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561187257600080fd5b813567ffffffffffffffff8082111561188a57600080fd5b818401915084601f83011261189e57600080fd5b8135818111156118b0576118b061184a565b604051601f8201601f19908116603f011681019083821181831017156118d8576118d861184a565b816040528281528760208487010111156118f157600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156119b557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156119a05783516001600160e01b0319168252928b019260019290920191908b0190611976565b50978a01979550505091870191600101611939565b50919998505050505050505050565b60005b838110156119df5781810151838201526020016119c7565b50506000910152565b60008151808452611a008160208601602086016119c4565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611a6957603f19888603018452611a578583516119e8565b94509285019290850190600101611a3b565b5092979650505050505050565b600080600060608486031215611a8b57600080fd5b505081359360208301359350604090920135919050565b600060208284031215611ab457600080fd5b5051919050565b600060208284031215611acd57600080fd5b81518015158114611add57600080fd5b9392505050565b602081526000611add60208301846119e8565b6001600160a01b038316815260406020820181905260009061054e908301846119e8565b600181811c90821680611b2f57607f821691505b602082108103611b4f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611b7e57611b7e611b55565b92915050565b6000600160ff1b8201611b9957611b99611b55565b5060000390565b81810381811115611b7e57611b7e611b55565b6001600160e01b0319831681528151600090611bd68160048501602087016119c4565b919091016004019392505050565b60008251611bf68184602087016119c4565b9190910192915050565b60408152600560408201526422b93937b960d91b6060820152608060208201526000611add60808301846119e8565b604081526000611c4260408301856119e8565b9050826020830152939250505056fe41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35835f74617267657456616c75652073686f756c64206265206c657373207468616e205f76616c75656578706563746564207570706572426f756e6420746f206d61746368205f74617267657456616c75656578706563746564206c6f776572426f756e6420746f206d61746368205f74617267657456616c7565b2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a85f74617267657456616c75652073686f756c642062652067726561746572207468616e206f7220657175616c20746f205f76616c7565a2646970667358221220d6290741daf96c125111ad095358094dc8e151b7509fb471102d004dc71ff55664736f6c63430008140033";
        readonly sourceMap: "308:5354:176:-:0;;;;;1572:26:94;;;1594:4;-1:-1:-1;;1572:26:94;;;;;;;;3126:44:97;;;;;;;;;;;-1:-1:-1;;;786:31:176;;216:2:182;786:31:176;198:21:182;255:2;235:18;228:30;-1:-1:-1;;;274:18:182;267:45;786:12:176;;329:18:182;786:31:176;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;786:31:176;;;;;;;;;;;;:::i;:::-;761:56;;;;;;:::i;:::-;-1:-1:-1;847:30:176;;-1:-1:-1;;;847:30:176;;4328:2:182;847:30:176;;;4310:21:182;4367:2;4347:18;;;4340:30;-1:-1:-1;;;4386:18:182;;;4379:44;847:12:176;;;;4440:18:182;;847:30:176;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;847:30:176;;;;;;;;;;;;:::i;:::-;823:54;;;;;;:::i;:::-;;308:5354;;;;;;;;;;;;358:127:182;419:10;414:3;410:20;407:1;400:31;450:4;447:1;440:15;474:4;471:1;464:15;490:1042;570:6;601:2;644;632:9;623:7;619:23;615:32;612:52;;;660:1;657;650:12;612:52;687:16;;-1:-1:-1;;;;;752:14:182;;;749:34;;;779:1;776;769:12;749:34;817:6;806:9;802:22;792:32;;862:7;855:4;851:2;847:13;843:27;833:55;;884:1;881;874:12;833:55;913:2;907:9;935:2;931;928:10;925:36;;;941:18;;:::i;:::-;1016:2;1010:9;984:2;1070:13;;-1:-1:-1;;1066:22:182;;;1090:2;1062:31;1058:40;1046:53;;;1114:18;;;1134:22;;;1111:46;1108:72;;;1160:18;;:::i;:::-;1200:10;1196:2;1189:22;1235:2;1227:6;1220:18;1275:7;1270:2;1265;1261;1257:11;1253:20;1250:33;1247:53;;;1296:1;1293;1286:12;1247:53;1318:1;1309:10;;1328:129;1342:2;1339:1;1336:9;1328:129;;;1430:10;;;1426:19;;1420:26;1399:14;;;1395:23;;1388:59;1353:10;;;;1328:129;;;1499:1;1494:2;1489;1481:6;1477:15;1473:24;1466:35;1520:6;1510:16;;;;;;;;490:1042;;;;:::o;1537:380::-;1616:1;1612:12;;;;1659;;;1680:61;;1734:4;1726:6;1722:17;1712:27;;1680:61;1787:2;1779:6;1776:14;1756:18;1753:38;1750:161;;1833:10;1828:3;1824:20;1821:1;1814:31;1868:4;1865:1;1858:15;1896:4;1893:1;1886:15;1750:161;;1537:380;;;:::o;2048:545::-;2150:2;2145:3;2142:11;2139:448;;;2186:1;2211:5;2207:2;2200:17;2256:4;2252:2;2242:19;2326:2;2314:10;2310:19;2307:1;2303:27;2297:4;2293:38;2362:4;2350:10;2347:20;2344:47;;;-1:-1:-1;2385:4:182;2344:47;2440:2;2435:3;2431:12;2428:1;2424:20;2418:4;2414:31;2404:41;;2495:82;2513:2;2506:5;2503:13;2495:82;;;2558:17;;;2539:1;2528:13;2495:82;;;2499:3;;;2139:448;2048:545;;;:::o;2769:1352::-;2889:10;;-1:-1:-1;;;;;2911:30:182;;2908:56;;;2944:18;;:::i;:::-;2973:97;3063:6;3023:38;3055:4;3049:11;3023:38;:::i;:::-;3017:4;2973:97;:::i;:::-;3125:4;;3189:2;3178:14;;3206:1;3201:663;;;;3908:1;3925:6;3922:89;;;-1:-1:-1;3977:19:182;;;3971:26;3922:89;-1:-1:-1;;2726:1:182;2722:11;;;2718:24;2714:29;2704:40;2750:1;2746:11;;;2701:57;4024:81;;3171:944;;3201:663;1995:1;1988:14;;;2032:4;2019:18;;-1:-1:-1;;3237:20:182;;;3355:236;3369:7;3366:1;3363:14;3355:236;;;3458:19;;;3452:26;3437:42;;3550:27;;;;3518:1;3506:14;;;;3385:19;;3355:236;;;3359:3;3619:6;3610:7;3607:19;3604:201;;;3680:19;;;3674:26;-1:-1:-1;;3763:1:182;3759:14;;;3775:3;3755:24;3751:37;3747:42;3732:58;3717:74;;3604:201;-1:-1:-1;;;;;3851:1:182;3835:14;;;3831:22;3818:36;;-1:-1:-1;2769:1352:182:o;4126:338::-;308:5354:176;;;;;;";
        readonly linkReferences: {};
    };
    readonly deployedBytecode: {
        readonly object: "";
        readonly sourceMap: "308:5354:176:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;904:471;;;:::i;:::-;;2069:198;;;;;;:::i;:::-;;:::i;:::-;;;845:25:182;;;833:2;818:18;2069:198:176;;;;;;;;2170:134:100;;;:::i;:::-;;;;;;;:::i;2273:417:176:-;;;;;;:::i;:::-;;:::i;2939:133:100:-;;;:::i;2640:141::-;;;:::i;1845:218:176:-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3385:32:182;;;3367:51;;3355:2;3340:18;1845:218:176;3221:203:182;2456:178:100;;;:::i;:::-;;;;;;;:::i;2310:140::-;;;:::i;:::-;;;;;;;:::i;2787:146::-;;;:::i;3354:2306:176:-;;;;;;:::i;:::-;;:::i;1875:141:100:-;;;:::i;1819:584:94:-;;;:::i;:::-;;;6827:14:182;;6820:22;6802:41;;6790:2;6775:18;1819:584:94;6662:187:182;2022:142:100;;;:::i;1572:26:94:-;;;;;;;;;904:471:176;954:19;;;;;;;;;;;;;;-1:-1:-1;;;954:19:176;;;:10;:19::i;:::-;946:5;:27;;-1:-1:-1;;;;;;946:27:176;-1:-1:-1;;;;;946:27:176;;;;;;;;;;989:17;;;;;;;;;;;;-1:-1:-1;;;989:17:176;;;;;;:10;:17::i;:::-;983:3;:23;;-1:-1:-1;;;;;;983:23:176;-1:-1:-1;;;;;983:23:176;;;;;;;;;;1025:20;;;;;;;;;;;;-1:-1:-1;;;1025:20:176;;;;;;:10;:20::i;:::-;1016:6;:29;;-1:-1:-1;;;;;;1016:29:176;-1:-1:-1;;;;;1016:29:176;;;;;;;;;;1061:17;;;;;;;;;;;;-1:-1:-1;;;1061:17:176;;;;;;:10;:17::i;:::-;1055:3;:23;;-1:-1:-1;;;;;;1055:23:176;-1:-1:-1;;;;;1055:23:176;;;;;;;;;;1094:17;;;;;;;;;;;;-1:-1:-1;;;1094:17:176;;;;;;:10;:17::i;:::-;1088:3;;:23;;;;;-1:-1:-1;;;;;1088:23:176;;;;;-1:-1:-1;;;;;1088:23:176;;;;;;1133:22;;;;;;;;;;;;;;-1:-1:-1;;;1133:22:176;;;:10;:22::i;:::-;1122:8;:33;;-1:-1:-1;;;;;;1122:33:176;-1:-1:-1;;;;;1122:33:176;;;;;;;;;;1174:20;;;;;;;;;;;;-1:-1:-1;;;1174:20:176;;;;;;:10;:20::i;:::-;1165:6;:29;;-1:-1:-1;;;;;;1165:29:176;-1:-1:-1;;;;;1165:29:176;;;;;;;;;;1219:26;;;;;;;;;;;;-1:-1:-1;;;1219:26:176;;;;;;:10;:26::i;:::-;1204:12;:41;;-1:-1:-1;;;;;;1204:41:176;-1:-1:-1;;;;;1204:41:176;;;;;;;;;;1268:24;;;;;;;;;;;;-1:-1:-1;;;1268:24:176;;;;;;:10;:24::i;:::-;1255:10;:37;;-1:-1:-1;;;;;;1255:37:176;-1:-1:-1;;;;;1255:37:176;;;;;;;;;;1311:20;;;;;;;;;;;;-1:-1:-1;;;1311:20:176;;;;;;:10;:20::i;:::-;1302:6;:29;;-1:-1:-1;;;;;;1302:29:176;-1:-1:-1;;;;;1302:29:176;;;;;;;;;;1353:15;1342:8;:26;904:471::o;2069:198::-;2233:22;;-1:-1:-1;;;2233:22:176;;-1:-1:-1;;;;;3385:32:182;;;2233:22:176;;;3367:51:182;2179:7:176;;2205:55;;2219:5;;2226;;2233:15;;;;;3340:18:182;;2233:22:176;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2257:2;2205:13;:55::i;:::-;2198:62;2069:198;-1:-1:-1;;;;2069:198:176:o;2170:134:100:-;2217:33;2281:16;2262:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2262:35:100;;;;;;;;;;;;;;;;;;;;;;;2170:134;:::o;2273:417:176:-;2449:22;;-1:-1:-1;;;2449:22:176;;-1:-1:-1;;;;;3385:32:182;;;2449:22:176;;;3367:51:182;2407:7:176;;;;2449:15;;;;;3340:18:182;;2449:22:176;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2426:45;;2494:12;2485:6;:21;2481:56;;;2515:22;;-1:-1:-1;;;2515:22:176;;;;;;;;;;;2481:56;317:28:95;309:37;;-1:-1:-1;;;;;2547:12:176;;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2571:20:176;;-1:-1:-1;;;2571:20:176;;-1:-1:-1;;;;;3385:32:182;;2571:20:176;;;3367:51:182;2571:13:176;;-1:-1:-1;2571:13:176;;-1:-1:-1;3340:18:182;;2571:20:176;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2601:23:176;;-1:-1:-1;;;2601:23:176;;-1:-1:-1;;;;;7261:32:182;;2601:23:176;;;7243:51:182;2616:7:176;7310:18:182;;;7303:34;2601:7:176;;-1:-1:-1;2601:7:176;;-1:-1:-1;7216:18:182;;2601:23:176;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2634:26:176;;-1:-1:-1;;;2634:26:176;;-1:-1:-1;;;;;7261:32:182;;;2634:26:176;;;7243:51:182;7310:18;;;7303:34;;;2634:14:176;;;-1:-1:-1;2634:14:176;;-1:-1:-1;7216:18:182;;2634:26:176;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2677:6:176;;2273:417;-1:-1:-1;;;;;2273:417:176:o;2939:133:100:-;2985:33;3049:16;3030:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3030:35:100;;;;;;;;;;;;;;;;;;;;;;2939:133;:::o;2640:141::-;2688:35;2756:18;2735:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2735:39:100;;;;;;;;;;;;;;;;;;;;;;2640:141;:::o;1845:218:176:-;1901:13;1979:4;1968:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1968:16:176;;;;;;;;;;1958:27;;1968:16;1958:27;;;;-1:-1:-1;;;1998:21:176;;1958:27;-1:-1:-1;1998:8:176;;;;:21;;1958:27;;2014:4;;1998:21;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2029:27:176;;-1:-1:-1;;;2029:27:176;;-1:-1:-1;;;;;7261:32:182;;2029:27:176;;;7243:51:182;2044:11:176;7310:18:182;;;7303:34;2029:7:176;;-1:-1:-1;2029:7:176;;-1:-1:-1;7216:18:182;;2029:27:176;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1845:218;;;:::o;2456:178:100:-;2512:48;2601:26;2572:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2572:55:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2572:55:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2456:178;:::o;2310:140::-;2358:34;2425:18;2404:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2787:146;2835:40;2908:18;2887:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2887:39:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2887:39:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3354:2306:176;3479:18;3500:11;;;;;3522:335;;3555:138;3599:6;3583:12;:22;;3555:138;;;;;;;;;;;;;;;;;:10;:138::i;:::-;3522:335;;;3724:122;3761:12;3752:6;:21;3724:122;;;;;;;;;;;;;;;;;:10;:122::i;:::-;3867:18;3888:13;:49;;3931:6;3888:49;;;3904:24;3921:6;3904;:24;:::i;:::-;3867:70;;3947:18;3969:13;3968:14;:75;;4037:6;3968:75;;;4014:7;4015:6;4014:7;:::i;:::-;3997:25;;:6;:25;:::i;:::-;3947:96;;4121:10;4106:12;:25;:54;;;;4150:10;4135:12;:25;4106:54;4102:233;;;4176:57;4185:12;4199:10;4176:57;;;;;;;;;;;;;-1:-1:-1;;;4176:57:176;;;:8;:57::i;:::-;4247;4256:12;4270:10;4247:57;;;;;;;;;;;;;-1:-1:-1;;;4247:57:176;;;:8;:57::i;:::-;4318:7;;;3354:2306;;;:::o;4102:233::-;4432:13;4428:1226;;;4461:21;4485;4500:6;4485:12;:21;:::i;:::-;4461:45;;4548:6;4524:13;:31;4520:516;;;4575:133;;;;;;;;;;;;;;;;;;;4659:31;4677:13;4667:6;4659:31;:::i;:::-;4575:12;:133::i;:::-;4726:37;;;;;;;;;;;;;;-1:-1:-1;;;4726:37:176;;;4756:6;4726:12;:37::i;:::-;4781:44;;;;;;;;;;;;;;-1:-1:-1;;;4781:44:176;;;4811:13;4781:12;:44::i;:::-;4520:516;;;4864:157;4894:10;4926:12;4864:157;;;;;;;;;;;;;;;;;:8;:157::i;:::-;4447:599;4428:1226;;;5066:21;5090;5099:12;5090:6;:21;:::i;:::-;5066:45;-1:-1:-1;5153:7:176;5154:6;5153:7;:::i;:::-;5129:13;:32;5125:519;;;5181:134;;;;;;;;;;;;;;;;;;5284:13;5274:6;5273:7;;;:::i;:::-;5265:32;;;;:::i;5181:134::-;5333:37;;;;;;;;;;;;;;-1:-1:-1;;;5333:37:176;;;5363:6;5333:12;:37::i;:::-;5388:45;;;;;;;;;;;;;;-1:-1:-1;;;5388:45:176;;;5419:13;5388:12;:45::i;:::-;5125:519;;;5472:157;5502:10;5534:12;5472:157;;;;;;;;;;;;;;;;;:8;:157::i;:::-;5052:602;3469:2191;;;3354:2306;;;:::o;1875:141:100:-;1924:34;1991:18;1970:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1819:584:94;1873:7;;1853:4;;1873:7;;;;;1869:528;;;-1:-1:-1;1903:7:94;;;;;;;;1819:584::o;1869:528::-;1941:17;2997:42;2985:55;3066:16;1980:374;;2196:43;;;1671:64;2196:43;;;7243:51:182;;;-1:-1:-1;;;7310:18:182;;;7303:34;2196:43:94;;;;;;;;;7216:18:182;;;2196:43:94;;;-1:-1:-1;;1671:64:94;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:94;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:94:o;2022:142:100:-;2071:35;2139:18;2118:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2118:39:100;;;;;;;;;;;;;;;;;;;;;;2022:142;:::o;3425:191:94:-;3504:9;3499:111;;-1:-1:-1;;;;;;;;;;;3560:3:94;3534:30;;;;;;:::i;:::-;;;;;;;;3578:21;3589:9;3578:10;:21::i;:::-;3425:191;;:::o;12219:177::-;12299:1;12295;:5;12291:99;;;-1:-1:-1;;;;;;;;;;;12347:3:94;12321:30;;;;;;:::i;:::-;;;;;;;;12365:14;12374:1;12377;12365:8;:14::i;:::-;12219:177;;;:::o;16185:::-;16265:1;16261;:5;16257:99;;;-1:-1:-1;;;;;;;;;;;16313:3:94;16287:30;;;;;;:::i;:::-;;;;;;;;16331:14;16340:1;16343;16331:8;:14::i;7546:145:109:-;7613:71;7676:2;7680;7629:54;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7629:54:109;;;;;;;;;;;;;;-1:-1:-1;;;;;7629:54:109;-1:-1:-1;;;7629:54:109;;;7613:15;:71::i;7697:143::-;7763:70;7825:2;7829;7779:53;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7779:53:109;;;;;;;;;;;;;;-1:-1:-1;;;;;7779:53:109;-1:-1:-1;;;7779:53:109;;;7763:15;:70::i;5476:178:94:-;5557:1;5552;:6;5548:100;;-1:-1:-1;;;;;;;;;;;5605:3:94;5579:30;;;;;;:::i;:::-;;;;;;;;5623:14;5632:1;5635;5623:8;:14::i;3262:157::-;3322:9;3317:96;;-1:-1:-1;;;;;;;;;;;3352:30:94;;;;11889:2:182;11871:21;;;11928:2;11908:18;;;11901:30;11967:25;11962:2;11947:18;;11940:53;12025:2;12010:18;;11687:347;3352:30:94;;;;;;;;3396:6;:4;:6::i;:::-;3262:157;:::o;11955:259::-;12016:1;12012;:5;12008:200;;;-1:-1:-1;;;;;;;;;;;12038:41:94;;;;12241:2:182;12223:21;;;12280:2;12260:18;;;12253:30;12319:34;12314:2;12299:18;;12292:62;-1:-1:-1;;;12385:2:182;12370:18;;12363:32;12427:3;12412:19;;12039:398;12038:41:94;;;;;;;;12098:30;;;12654:21:182;;;12711:1;12691:18;;;12684:29;-1:-1:-1;;;12744:2:182;12729:18;;12722:39;12828:4;12813:20;;12806:36;;;12098:30:94;;-1:-1:-1;;;;;;;;;;;12098:30:94;;;;12793:3:182;12098:30:94;;;12147;;;13065:21:182;;;13122:1;13102:18;;;13095:29;;;;-1:-1:-1;;;13155:2:182;13140:18;;13133:39;13239:4;13224:20;;13217:36;;;-1:-1:-1;;;;;;;;;;;12147:30:94;13204:3:182;13189:19;12147:30:94;;;;;;;;12191:6;:4;:6::i;15921:259::-;15982:1;15978;:5;15974:200;;;-1:-1:-1;;;;;;;;;;;16004:41:94;;;;13466:2:182;13448:21;;;13505:2;13485:18;;;13478:30;13544:34;13539:2;13524:18;;13517:62;-1:-1:-1;;;13610:2:182;13595:18;;13588:32;13652:3;13637:19;;13264:398;868:133:109;939:55;986:7;965:19;939:55::i;5209:262:94:-;5271:1;5266;:6;5262:203;;-1:-1:-1;;;;;;;;;;;5293:41:94;;;;13869:2:182;13851:21;;;13908:2;13888:18;;;13881:30;13947:34;13942:2;13927:18;;13920:62;-1:-1:-1;;;14013:2:182;13998:18;;13991:32;14055:3;14040:19;;13667:398;5293:41:94;;;;;;;;5353:31;;;14282:21:182;;;14339:2;14319:18;;;14312:30;-1:-1:-1;;;14373:2:182;14358:18;;14351:40;14458:4;14443:20;;14436:36;;;5353:31:94;;-1:-1:-1;;;;;;;;;;;5353:31:94;;;;14423:3:182;5353:31:94;;;5403;;;14695:21:182;;;14752:2;14732:18;;;14725:30;;;;-1:-1:-1;;;14786:2:182;14771:18;;14764:40;14871:4;14856:20;;14849:36;;;-1:-1:-1;;;;;;;;;;;5403:31:94;14836:3:182;14821:19;5403:31:94;14483:408:182;2409:432:94;2997:42;2985:55;3066:16;2452:359;;2652:67;;;1671:64;2652:67;;;15098:51:182;;;-1:-1:-1;;;15165:18:182;;;15158:34;;;;2712:4:94;15208:18:182;;;15201:34;2489:11:94;;1671:64;2586:43;;15071:18:182;;2652:67:94;;;-1:-1:-1;;2652:67:94;;;;;;;;;;2541:196;;;2652:67;2541:196;;:::i;:::-;;;;-1:-1:-1;;2541:196:94;;;;;;;;;;2506:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2452:359:94;2820:7;:14;;-1:-1:-1;;2820:14:94;;;;;2409:432::o;1007:380:109:-;1105:14;;591:42;1278:2;1265:16;;1081:21;;1105:14;1265:16;591:42;1314:5;1303:68;1294:77;;1231:150;;1007:380;:::o;14:131:182:-;-1:-1:-1;;;;;89:31:182;;79:42;;69:70;;135:1;132;125:12;150:544;242:6;250;258;311:2;299:9;290:7;286:23;282:32;279:52;;;327:1;324;317:12;279:52;366:9;353:23;385:31;410:5;385:31;:::i;:::-;435:5;-1:-1:-1;492:2:182;477:18;;464:32;505:33;464:32;505:33;:::i;:::-;557:7;-1:-1:-1;616:2:182;601:18;;588:32;629:33;588:32;629:33;:::i;:::-;681:7;671:17;;;150:544;;;;;:::o;881:658::-;1052:2;1104:21;;;1174:13;;1077:18;;;1196:22;;;1023:4;;1052:2;1275:15;;;;1249:2;1234:18;;;1023:4;1318:195;1332:6;1329:1;1326:13;1318:195;;;1397:13;;-1:-1:-1;;;;;1393:39:182;1381:52;;1488:15;;;;1453:12;;;;1429:1;1347:9;1318:195;;;-1:-1:-1;1530:3:182;;881:658;-1:-1:-1;;;;;;881:658:182:o;1544:613::-;1645:6;1653;1661;1669;1722:3;1710:9;1701:7;1697:23;1693:33;1690:53;;;1739:1;1736;1729:12;1690:53;1778:9;1765:23;1797:31;1822:5;1797:31;:::i;:::-;1847:5;-1:-1:-1;1904:2:182;1889:18;;1876:32;1917:33;1876:32;1917:33;:::i;:::-;1969:7;-1:-1:-1;2023:2:182;2008:18;;1995:32;;-1:-1:-1;2079:2:182;2064:18;;2051:32;2092:33;2051:32;2092:33;:::i;:::-;1544:613;;;;-1:-1:-1;1544:613:182;;-1:-1:-1;;1544:613:182:o;2162:127::-;2223:10;2218:3;2214:20;2211:1;2204:31;2254:4;2251:1;2244:15;2278:4;2275:1;2268:15;2294:922;2363:6;2416:2;2404:9;2395:7;2391:23;2387:32;2384:52;;;2432:1;2429;2422:12;2384:52;2472:9;2459:23;2501:18;2542:2;2534:6;2531:14;2528:34;;;2558:1;2555;2548:12;2528:34;2596:6;2585:9;2581:22;2571:32;;2641:7;2634:4;2630:2;2626:13;2622:27;2612:55;;2663:1;2660;2653:12;2612:55;2699:2;2686:16;2721:2;2717;2714:10;2711:36;;;2727:18;;:::i;:::-;2802:2;2796:9;2770:2;2856:13;;-1:-1:-1;;2852:22:182;;;2876:2;2848:31;2844:40;2832:53;;;2900:18;;;2920:22;;;2897:46;2894:72;;;2946:18;;:::i;:::-;2986:10;2982:2;2975:22;3021:2;3013:6;3006:18;3061:7;3056:2;3051;3047;3043:11;3039:20;3036:33;3033:53;;;3082:1;3079;3072:12;3033:53;3138:2;3133;3129;3125:11;3120:2;3112:6;3108:15;3095:46;3183:1;3161:15;;;3178:2;3157:24;3150:35;;;;-1:-1:-1;3165:6:182;2294:922;-1:-1:-1;;;;;2294:922:182:o;3429:1569::-;3633:4;3662:2;3702;3691:9;3687:18;3732:2;3721:9;3714:21;3755:6;3790;3784:13;3821:6;3813;3806:22;3847:2;3837:12;;3880:2;3869:9;3865:18;3858:25;;3942:2;3932:6;3929:1;3925:14;3914:9;3910:30;3906:39;3980:2;3972:6;3968:15;4001:1;4022;4032:937;4048:6;4043:3;4040:15;4032:937;;;4117:22;;;-1:-1:-1;;4113:36:182;4101:49;;4173:13;;4260:9;;-1:-1:-1;;;;;4256:35:182;4241:51;;4331:11;;4325:18;4363:15;;;4356:27;;;4444:19;;4213:15;;;4476:24;;;4566:21;;;;4611:1;;4534:2;4522:15;;;4625:236;4641:8;4636:3;4633:17;4625:236;;;4722:15;;-1:-1:-1;;;;;;4718:42:182;4704:57;;4830:17;;;;4669:1;4660:11;;;;;4787:14;;;;4625:236;;;-1:-1:-1;4947:12:182;;;;4884:5;-1:-1:-1;;;4912:15:182;;;;4074:1;4065:11;4032:937;;;-1:-1:-1;4986:6:182;;3429:1569;-1:-1:-1;;;;;;;;;3429:1569:182:o;5003:250::-;5088:1;5098:113;5112:6;5109:1;5106:13;5098:113;;;5188:11;;;5182:18;5169:11;;;5162:39;5134:2;5127:10;5098:113;;;-1:-1:-1;;5245:1:182;5227:16;;5220:27;5003:250::o;5258:271::-;5300:3;5338:5;5332:12;5365:6;5360:3;5353:19;5381:76;5450:6;5443:4;5438:3;5434:14;5427:4;5420:5;5416:16;5381:76;:::i;:::-;5511:2;5490:15;-1:-1:-1;;5486:29:182;5477:39;;;;5518:4;5473:50;;5258:271;-1:-1:-1;;5258:271:182:o;5534:803::-;5696:4;5725:2;5765;5754:9;5750:18;5795:2;5784:9;5777:21;5818:6;5853;5847:13;5884:6;5876;5869:22;5922:2;5911:9;5907:18;5900:25;;5984:2;5974:6;5971:1;5967:14;5956:9;5952:30;5948:39;5934:53;;6022:2;6014:6;6010:15;6043:1;6053:255;6067:6;6064:1;6061:13;6053:255;;;6160:2;6156:7;6144:9;6136:6;6132:22;6128:36;6123:3;6116:49;6188:40;6221:6;6212;6206:13;6188:40;:::i;:::-;6178:50;-1:-1:-1;6286:12:182;;;;6251:15;;;;6089:1;6082:9;6053:255;;;-1:-1:-1;6325:6:182;;5534:803;-1:-1:-1;;;;;;;5534:803:182:o;6342:315::-;6418:6;6426;6434;6487:2;6475:9;6466:7;6462:23;6458:32;6455:52;;;6503:1;6500;6493:12;6455:52;-1:-1:-1;;6526:23:182;;;6596:2;6581:18;;6568:32;;-1:-1:-1;6647:2:182;6632:18;;;6619:32;;6342:315;-1:-1:-1;6342:315:182:o;6854:184::-;6924:6;6977:2;6965:9;6956:7;6952:23;6948:32;6945:52;;;6993:1;6990;6983:12;6945:52;-1:-1:-1;7016:16:182;;6854:184;-1:-1:-1;6854:184:182:o;7627:277::-;7694:6;7747:2;7735:9;7726:7;7722:23;7718:32;7715:52;;;7763:1;7760;7753:12;7715:52;7795:9;7789:16;7848:5;7841:13;7834:21;7827:5;7824:32;7814:60;;7870:1;7867;7860:12;7814:60;7893:5;7627:277;-1:-1:-1;;;7627:277:182:o;7909:220::-;8058:2;8047:9;8040:21;8021:4;8078:45;8119:2;8108:9;8104:18;8096:6;8078:45;:::i;8134:317::-;-1:-1:-1;;;;;8311:32:182;;8293:51;;8380:2;8375;8360:18;;8353:30;;;-1:-1:-1;;8400:45:182;;8426:18;;8418:6;8400:45;:::i;8765:380::-;8844:1;8840:12;;;;8887;;;8908:61;;8962:4;8954:6;8950:17;8940:27;;8908:61;9015:2;9007:6;9004:14;8984:18;8981:38;8978:161;;9061:10;9056:3;9052:20;9049:1;9042:31;9096:4;9093:1;9086:15;9124:4;9121:1;9114:15;8978:161;;8765:380;;;:::o;9150:127::-;9211:10;9206:3;9202:20;9199:1;9192:31;9242:4;9239:1;9232:15;9266:4;9263:1;9256:15;9282:125;9347:9;;;9368:10;;;9365:36;;;9381:18;;:::i;:::-;9282:125;;;;:::o;9412:136::-;9447:3;-1:-1:-1;;;9468:22:182;;9465:48;;9493:18;;:::i;:::-;-1:-1:-1;9533:1:182;9529:13;;9412:136::o;9553:128::-;9620:9;;;9641:11;;;9638:37;;;9655:18;;:::i;9965:384::-;-1:-1:-1;;;;;;10150:33:182;;10138:46;;10207:13;;10120:3;;10229:74;10207:13;10292:1;10283:11;;10276:4;10264:17;;10229:74;:::i;:::-;10323:16;;;;10341:1;10319:24;;9965:384;-1:-1:-1;;;9965:384:182:o;10354:287::-;10483:3;10521:6;10515:13;10537:66;10596:6;10591:3;10584:4;10576:6;10572:17;10537:66;:::i;:::-;10619:16;;;;;10354:287;-1:-1:-1;;10354:287:182:o;10646:446::-;10896:2;10885:9;10878:21;10935:1;10930:2;10919:9;10915:18;10908:29;-1:-1:-1;;;10968:2:182;10957:9;10953:18;10946:35;11019:3;11012:4;11001:9;10997:20;10990:33;10859:4;11040:46;11081:3;11070:9;11066:19;11058:6;11040:46;:::i;11097:291::-;11274:2;11263:9;11256:21;11237:4;11294:45;11335:2;11324:9;11320:18;11312:6;11294:45;:::i;:::-;11286:53;;11375:6;11370:2;11359:9;11355:18;11348:34;11097:291;;;;;:::o";
        readonly linkReferences: {};
    };
    readonly methodIdentifiers: {
        readonly "IS_TEST()": "fa7626d4";
        readonly "assertWithDelta(uint256,int256,uint256)": "ab75e7c3";
        readonly "createUser(string)": "507ffba5";
        readonly "excludeArtifacts()": "b5508aa9";
        readonly "excludeContracts()": "e20c9f71";
        readonly "excludeSenders()": "1ed7831c";
        readonly "failed()": "ba414fa6";
        readonly "setUp()": "0a9254e4";
        readonly "targetArtifactSelectors()": "66d9a9a0";
        readonly "targetArtifacts()": "85226c81";
        readonly "targetContracts()": "3f7286f4";
        readonly "targetSelectors()": "916a17c6";
        readonly "targetSenders()": "3e5e3c23";
        readonly "whaleTransfer(address,address,address)": "10716760";
        readonly "whaleTransfer(address,address,uint256,address)": "3e5e0d26";
    };
    readonly rawMetadata: "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WhaleBalanceExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhaleIsContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_delta\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_targetValue\",\"type\":\"uint256\"}],\"name\":\"assertWithDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whale\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"whaleTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whale\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"whaleTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/utils/BaseTest.sol\":\"BaseTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":aave-v3-core/=lib/aave-v3-core/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x5f446a4987d57c64380d44c234ee079172e98bed9595ec067eb519898c3117d9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a3245994c58110716f5099c07e5cb270137356d288044f03c713d29c36e207ac\",\"dweb:/ipfs/QmYdn52sGRQKXfSyL8ieSz8HysG6R5kLJWsNwEnyX1e22p\"]},\"contracts/src/interfaces/IERC20Forwarder.sol\":{\"keccak256\":\"0x0af72255c641b0cd5c1975215e3f6713539da7963edd3d67d8151657e524dbe9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://187998e942efa97a7932bef37fde379346938e19f513e8e73c7ae9dbdd83499a\",\"dweb:/ipfs/QmSwSphYw15JVo2vizDWknyAzsc6ttrjiDMmRDbN7UXHrZ\"]},\"contracts/src/interfaces/IERC20ForwarderFactory.sol\":{\"keccak256\":\"0xd413c9701c4d8be234bd037de24aabacce110848f86eac44fa6de04eda6d05ed\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://59fcaa637112713c2d1264664f8c6b428da46cceb4689fd8757f07fa87633aad\",\"dweb:/ipfs/QmWGLox6p9Ja2dwH5bgED69JtuK4Y55G7pgTPeeTmYrW5Z\"]},\"contracts/src/interfaces/IHyperdrive.sol\":{\"keccak256\":\"0xbb41b77195a206fee42f1c801d1feeefcb84d1d33fcdb537ba2597a2eaf7bf94\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ad3474360d05cf4002ea0703ff36dba900dc1b17da8077f8bcaf159c0b0861eb\",\"dweb:/ipfs/QmYTehjAXpiuLErAWGfVw1LFn8g2oZ7YnjLNXcmU5ngPBf\"]},\"contracts/src/interfaces/IHyperdriveCore.sol\":{\"keccak256\":\"0x2836b8e9e2b6e143d4601e0047dfd09232352038a2133670d2f40da5442ff4b3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://64eec4fc70dd4fdf3ad835ef343d56bd4a7c48f2bb0e1f338d9f090e42848660\",\"dweb:/ipfs/Qmeg2aX8QZBggY1tChJQJbkhkbxWFRQPDsZRxUMsGfFg5m\"]},\"contracts/src/interfaces/IHyperdriveEvents.sol\":{\"keccak256\":\"0x1841703b12d5b2ca7dedff94c7dd71a4ad0a0b47ca59ba9de98ea14929fb72e5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c192bfc8bee91341d7e7530d71df2fbaec69d7bf0017e7b318dea276b7f3e171\",\"dweb:/ipfs/QmRWCkdXJ7G2FDo4CpsNuRvDgYWzN9U3LXLzM3YKHs9M4y\"]},\"contracts/src/interfaces/IHyperdriveRead.sol\":{\"keccak256\":\"0x5922cbd86a7267c8fd19e3dc7a6f2636bad2b3330c28bca8e66adc7cd8ce2b55\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ced8bce3f3c15a9f0bcdd11ba16e69651179edd6b16e267936788f4ab4d6eabf\",\"dweb:/ipfs/QmcoZPj4h2ym6r13KDU7JG2GoVdDWa1GwfKL2jjFRsp8H6\"]},\"contracts/src/interfaces/IMultiToken.sol\":{\"keccak256\":\"0xf5f82b8223e0c1bfcf4f73566a909ba07a9266960dfe2335c1494e06debbbe3f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://920cf3fd66132a1e98a6a5708ad9a3bb047f4df8848119ab382b51094c1290a7\",\"dweb:/ipfs/QmWL3SyG8L91Coe9DsHz3Ke9tGMvYBf2NgRRDr3Fg5xFzp\"]},\"contracts/src/interfaces/IMultiTokenCore.sol\":{\"keccak256\":\"0xf692b4673daac8627a185253b5fb99c843d9c5a2897be50599030fbd02c21a28\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ec28e35b2523d2f399c79ec5c8e29a4985a0e7a2d1d83c9a834d84dfc44130a2\",\"dweb:/ipfs/QmZLHmSUkDJsnU2FJ4FuaMfo2t6dPimmLaCDrfuxYF8nmD\"]},\"contracts/src/interfaces/IMultiTokenEvents.sol\":{\"keccak256\":\"0x165f79e628b1975343f979549f3fdb5073a29aeecb03861f41d165961ee39fdb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3c0751cf322944d080a7a6692897807d0cef798268689afc1f6c8f91182a4222\",\"dweb:/ipfs/QmQVWtCgphU9sjqD2q6F6ww62uXDSWZx5KJVj6jFJpXeDK\"]},\"contracts/src/interfaces/IMultiTokenMetadata.sol\":{\"keccak256\":\"0xeabffcfcd0fd642caaa2355dccad38269d25fbd4db1b0db43fd97328bf464862\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://6970e3db54bfcca6748db01b871fcee4f8d74fea2e66c39e3320232086633355\",\"dweb:/ipfs/QmPq66eyA4DmnU7m1QpMgKGrJ3ebUeN6e8UEuhb64U3BH2\"]},\"contracts/src/interfaces/IMultiTokenRead.sol\":{\"keccak256\":\"0xc28d1017afe010c20c2fbe9b78e0001eb8b7db16e0fe5038990692227be365ec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8056e866c6da775c66cefc4e03d8856d75980d8c6eb98e954e1319b2478ad51c\",\"dweb:/ipfs/Qme9n2mBoeFUxf7Tzx4dD3iYt2kDsza6mqPXoUogPnS2hx\"]},\"contracts/src/token/ERC20Forwarder.sol\":{\"keccak256\":\"0x6befdeedb2195833825ed48a9f7895b62805f28cb1acd6fce0c0b6aea29f2f2d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02faffbfc37e602a6b889afb7569ffde81cc5e25dfb88343d22ae5d73222f8f4\",\"dweb:/ipfs/QmXnfa9bQGpxVJhzT4kCynk9YuDk9zeqnVCULbxmkwcePo\"]},\"contracts/src/token/ERC20ForwarderFactory.sol\":{\"keccak256\":\"0x9cf65c1e42f92b33cfe1de3ca603376fe6de3e690fa492ce256eab2f12f8082d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4a8ac28437748df20f024974e626c0c29ddad855540c61e59afda59cb02ef4da\",\"dweb:/ipfs/QmSKMYuPVnUbhQGopuSViy8DhzYcKSenFFxz2m3EoTSqkp\"]},\"lib/forge-std/lib/ds-test/src/test.sol\":{\"keccak256\":\"0x8758531bbac3972efcf1fa46383dbe1d276406fe527bc7abb2f236486278e83b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1f64264d61506847acf8761e84aff690cebe830958eac00bac7924d8be569240\",\"dweb:/ipfs/QmSekDJvJ82MZAmr63n7YvfLzQ7gS4NLSHPmHL3GN3rw8k\"]},\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b\",\"dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0xc576f8b81bf19c853baa1fdc23ddc3b9fa1856d5749b01a4f99bed73db7d847d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fad0b975990e50941e255397925be1695b1ec06c3649decdbf759f42e49638d4\",\"dweb:/ipfs/QmeeRsbdgzUoPj1GWZZaoTsiEEuSGfjx7MpykgfxcMa1r1\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0x2e1b4b99283c16efaf155f7e55ea357943cf6e61fc02aad060534349f63b6cd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d471a35903e8a367a145ca5b5955caf691c723fe1117c6dcffd928d9f8d7c95a\",\"dweb:/ipfs/QmXGnFUGiX9APL8xit7NZQEYBoEL3wWyW1YyFoJQd2pGPe\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0xf5762db8ef95099bbe77578cd9349511ed77f4dd63ec98cc6b7cd711447830c1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6b0360806a9804eac0f7e07492b5db9c4953c521dabb9a11b17dd610d5b804c\",\"dweb:/ipfs/QmUFozSt3W7drBRdm1cdRow61EABqSLJtkvYZXWmoHUPss\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c\",\"dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x391a28a2e54aea51a6fb03a3a48035304ca4d24bc669ddf3d4c152c7162e514d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://475fd0d87ccb0fdc4418dea2babffb4adb4aafb817e61f7ef31c2303f10c6c26\",\"dweb:/ipfs/QmQgcgtZxpkW6DRmbJszN1F8mU6zhaTZGdWWsj77yCuWN9\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x8758c42ba9d9e46868b796e2330ac239006ede07bd438a4b36dd6f2c47d27dc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11f5752e0187b1e3631b875efdbe05d45929d05f1c1717105a9115d0a6628140\",\"dweb:/ipfs/QmUKkx9jfsUvjyYBw45RvrW1hTFXDXi2Jv5tbHP86mnzpi\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x39b1729d5868c8e94ab8af16751eb500a17fe3870dc627d2b7ddcd5df18d7ad0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1568c82aff125cc4b0fc168be9d67ac313f469a3c7405c5493caecaaaecfb765\",\"dweb:/ipfs/QmXByuZReJsdu1jDcxj1FcmpcUnzoBcqybn9kWgDAECWri\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xc37bdacd465b44feb78cdf9a86f62255884be84acd5a4b175f48f004386ce8f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8109a9cb6c5b2f6c137e4bc119ce468d88eaf926ed60558e997a5505827c9241\",\"dweb:/ipfs/QmR1H3wWXwhYD4bXgFFxNubnEZYB28WvvUUHkL9oZx14cx\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"test/utils/BaseTest.sol\":{\"keccak256\":\"0xb96ab99454fbd35bda08a259b5298e64765118ac10b52618d813f2a7306c6886\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5949a720b7bfd576ec9396c25eaee235da33192b23e4383f3fe5c4fb383525e0\",\"dweb:/ipfs/QmVz1MQWLf6FPXBeWNWQwcxub3Y2XYBX5Esq4ryQsNqFvQ\"]}},\"version\":1}";
    readonly metadata: {
        readonly compiler: {
            readonly version: "0.8.20+commit.a1b79de6";
        };
        readonly language: "Solidity";
        readonly output: {
            readonly abi: readonly [{
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "WhaleBalanceExceeded";
            }, {
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "WhaleIsContract";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "";
                    readonly type: "string";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "";
                    readonly type: "address";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_address";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint256[]";
                    readonly name: "val";
                    readonly type: "uint256[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "int256[]";
                    readonly name: "val";
                    readonly type: "int256[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "val";
                    readonly type: "address[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "bytes";
                    readonly name: "";
                    readonly type: "bytes";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_bytes";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "";
                    readonly type: "bytes32";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_bytes32";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "int256";
                    readonly name: "";
                    readonly type: "int256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_int";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "address";
                    readonly name: "val";
                    readonly type: "address";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_address";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "uint256[]";
                    readonly name: "val";
                    readonly type: "uint256[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "int256[]";
                    readonly name: "val";
                    readonly type: "int256[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "address[]";
                    readonly name: "val";
                    readonly type: "address[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "bytes";
                    readonly name: "val";
                    readonly type: "bytes";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_bytes";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "val";
                    readonly type: "bytes32";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_bytes32";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "int256";
                    readonly name: "val";
                    readonly type: "int256";
                    readonly indexed: false;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "decimals";
                    readonly type: "uint256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_decimal_int";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "val";
                    readonly type: "uint256";
                    readonly indexed: false;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "decimals";
                    readonly type: "uint256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_decimal_uint";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "int256";
                    readonly name: "val";
                    readonly type: "int256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_int";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "string";
                    readonly name: "val";
                    readonly type: "string";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_string";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "val";
                    readonly type: "uint256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_uint";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "";
                    readonly type: "string";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_string";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "";
                    readonly type: "uint256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_uint";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "bytes";
                    readonly name: "";
                    readonly type: "bytes";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "logs";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "IS_TEST";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "";
                    readonly type: "bool";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "_value";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "int256";
                    readonly name: "_delta";
                    readonly type: "int256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "_targetValue";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "assertWithDelta";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "name";
                    readonly type: "string";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "createUser";
                readonly outputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "_user";
                    readonly type: "address";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "excludeArtifacts";
                readonly outputs: readonly [{
                    readonly internalType: "string[]";
                    readonly name: "excludedArtifacts_";
                    readonly type: "string[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "excludeContracts";
                readonly outputs: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "excludedContracts_";
                    readonly type: "address[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "excludeSenders";
                readonly outputs: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "excludedSenders_";
                    readonly type: "address[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "failed";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "";
                    readonly type: "bool";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "setUp";
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "targetArtifactSelectors";
                readonly outputs: readonly [{
                    readonly internalType: "struct StdInvariant.FuzzSelector[]";
                    readonly name: "targetedArtifactSelectors_";
                    readonly type: "tuple[]";
                    readonly components: readonly [{
                        readonly internalType: "address";
                        readonly name: "addr";
                        readonly type: "address";
                    }, {
                        readonly internalType: "bytes4[]";
                        readonly name: "selectors";
                        readonly type: "bytes4[]";
                    }];
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "targetArtifacts";
                readonly outputs: readonly [{
                    readonly internalType: "string[]";
                    readonly name: "targetedArtifacts_";
                    readonly type: "string[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "targetContracts";
                readonly outputs: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "targetedContracts_";
                    readonly type: "address[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "targetSelectors";
                readonly outputs: readonly [{
                    readonly internalType: "struct StdInvariant.FuzzSelector[]";
                    readonly name: "targetedSelectors_";
                    readonly type: "tuple[]";
                    readonly components: readonly [{
                        readonly internalType: "address";
                        readonly name: "addr";
                        readonly type: "address";
                    }, {
                        readonly internalType: "bytes4[]";
                        readonly name: "selectors";
                        readonly type: "bytes4[]";
                    }];
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "targetSenders";
                readonly outputs: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "targetedSenders_";
                    readonly type: "address[]";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "whale";
                    readonly type: "address";
                }, {
                    readonly internalType: "contract IERC20";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "whaleTransfer";
                readonly outputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "";
                    readonly type: "uint256";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "whale";
                    readonly type: "address";
                }, {
                    readonly internalType: "contract IERC20";
                    readonly name: "token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "amount";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "whaleTransfer";
                readonly outputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "";
                    readonly type: "uint256";
                }];
            }];
            readonly devdoc: {
                readonly kind: "dev";
                readonly methods: {};
                readonly version: 1;
            };
            readonly userdoc: {
                readonly kind: "user";
                readonly methods: {};
                readonly version: 1;
            };
        };
        readonly settings: {
            readonly remappings: readonly ["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/", "aave-v3-core/=lib/aave-v3-core/", "ds-test/=lib/forge-std/lib/ds-test/src/", "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/", "forge-std/=lib/forge-std/src/", "openzeppelin-contracts/=lib/openzeppelin-contracts/", "openzeppelin/=lib/openzeppelin-contracts/contracts/", "solmate/=lib/solmate/src/"];
            readonly optimizer: {
                readonly enabled: true;
                readonly runs: 200;
            };
            readonly metadata: {
                readonly bytecodeHash: "ipfs";
            };
            readonly compilationTarget: {
                readonly "test/utils/BaseTest.sol": "BaseTest";
            };
            readonly libraries: {};
        };
        readonly sources: {
            readonly "contracts/src/interfaces/IERC20.sol": {
                readonly keccak256: "0x5f446a4987d57c64380d44c234ee079172e98bed9595ec067eb519898c3117d9";
                readonly urls: readonly ["bzz-raw://a3245994c58110716f5099c07e5cb270137356d288044f03c713d29c36e207ac", "dweb:/ipfs/QmYdn52sGRQKXfSyL8ieSz8HysG6R5kLJWsNwEnyX1e22p"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IERC20Forwarder.sol": {
                readonly keccak256: "0x0af72255c641b0cd5c1975215e3f6713539da7963edd3d67d8151657e524dbe9";
                readonly urls: readonly ["bzz-raw://187998e942efa97a7932bef37fde379346938e19f513e8e73c7ae9dbdd83499a", "dweb:/ipfs/QmSwSphYw15JVo2vizDWknyAzsc6ttrjiDMmRDbN7UXHrZ"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IERC20ForwarderFactory.sol": {
                readonly keccak256: "0xd413c9701c4d8be234bd037de24aabacce110848f86eac44fa6de04eda6d05ed";
                readonly urls: readonly ["bzz-raw://59fcaa637112713c2d1264664f8c6b428da46cceb4689fd8757f07fa87633aad", "dweb:/ipfs/QmWGLox6p9Ja2dwH5bgED69JtuK4Y55G7pgTPeeTmYrW5Z"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdrive.sol": {
                readonly keccak256: "0xbb41b77195a206fee42f1c801d1feeefcb84d1d33fcdb537ba2597a2eaf7bf94";
                readonly urls: readonly ["bzz-raw://ad3474360d05cf4002ea0703ff36dba900dc1b17da8077f8bcaf159c0b0861eb", "dweb:/ipfs/QmYTehjAXpiuLErAWGfVw1LFn8g2oZ7YnjLNXcmU5ngPBf"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveCore.sol": {
                readonly keccak256: "0x2836b8e9e2b6e143d4601e0047dfd09232352038a2133670d2f40da5442ff4b3";
                readonly urls: readonly ["bzz-raw://64eec4fc70dd4fdf3ad835ef343d56bd4a7c48f2bb0e1f338d9f090e42848660", "dweb:/ipfs/Qmeg2aX8QZBggY1tChJQJbkhkbxWFRQPDsZRxUMsGfFg5m"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveEvents.sol": {
                readonly keccak256: "0x1841703b12d5b2ca7dedff94c7dd71a4ad0a0b47ca59ba9de98ea14929fb72e5";
                readonly urls: readonly ["bzz-raw://c192bfc8bee91341d7e7530d71df2fbaec69d7bf0017e7b318dea276b7f3e171", "dweb:/ipfs/QmRWCkdXJ7G2FDo4CpsNuRvDgYWzN9U3LXLzM3YKHs9M4y"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveRead.sol": {
                readonly keccak256: "0x5922cbd86a7267c8fd19e3dc7a6f2636bad2b3330c28bca8e66adc7cd8ce2b55";
                readonly urls: readonly ["bzz-raw://ced8bce3f3c15a9f0bcdd11ba16e69651179edd6b16e267936788f4ab4d6eabf", "dweb:/ipfs/QmcoZPj4h2ym6r13KDU7JG2GoVdDWa1GwfKL2jjFRsp8H6"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiToken.sol": {
                readonly keccak256: "0xf5f82b8223e0c1bfcf4f73566a909ba07a9266960dfe2335c1494e06debbbe3f";
                readonly urls: readonly ["bzz-raw://920cf3fd66132a1e98a6a5708ad9a3bb047f4df8848119ab382b51094c1290a7", "dweb:/ipfs/QmWL3SyG8L91Coe9DsHz3Ke9tGMvYBf2NgRRDr3Fg5xFzp"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenCore.sol": {
                readonly keccak256: "0xf692b4673daac8627a185253b5fb99c843d9c5a2897be50599030fbd02c21a28";
                readonly urls: readonly ["bzz-raw://ec28e35b2523d2f399c79ec5c8e29a4985a0e7a2d1d83c9a834d84dfc44130a2", "dweb:/ipfs/QmZLHmSUkDJsnU2FJ4FuaMfo2t6dPimmLaCDrfuxYF8nmD"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenEvents.sol": {
                readonly keccak256: "0x165f79e628b1975343f979549f3fdb5073a29aeecb03861f41d165961ee39fdb";
                readonly urls: readonly ["bzz-raw://3c0751cf322944d080a7a6692897807d0cef798268689afc1f6c8f91182a4222", "dweb:/ipfs/QmQVWtCgphU9sjqD2q6F6ww62uXDSWZx5KJVj6jFJpXeDK"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenMetadata.sol": {
                readonly keccak256: "0xeabffcfcd0fd642caaa2355dccad38269d25fbd4db1b0db43fd97328bf464862";
                readonly urls: readonly ["bzz-raw://6970e3db54bfcca6748db01b871fcee4f8d74fea2e66c39e3320232086633355", "dweb:/ipfs/QmPq66eyA4DmnU7m1QpMgKGrJ3ebUeN6e8UEuhb64U3BH2"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenRead.sol": {
                readonly keccak256: "0xc28d1017afe010c20c2fbe9b78e0001eb8b7db16e0fe5038990692227be365ec";
                readonly urls: readonly ["bzz-raw://8056e866c6da775c66cefc4e03d8856d75980d8c6eb98e954e1319b2478ad51c", "dweb:/ipfs/Qme9n2mBoeFUxf7Tzx4dD3iYt2kDsza6mqPXoUogPnS2hx"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/token/ERC20Forwarder.sol": {
                readonly keccak256: "0x6befdeedb2195833825ed48a9f7895b62805f28cb1acd6fce0c0b6aea29f2f2d";
                readonly urls: readonly ["bzz-raw://02faffbfc37e602a6b889afb7569ffde81cc5e25dfb88343d22ae5d73222f8f4", "dweb:/ipfs/QmXnfa9bQGpxVJhzT4kCynk9YuDk9zeqnVCULbxmkwcePo"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/token/ERC20ForwarderFactory.sol": {
                readonly keccak256: "0x9cf65c1e42f92b33cfe1de3ca603376fe6de3e690fa492ce256eab2f12f8082d";
                readonly urls: readonly ["bzz-raw://4a8ac28437748df20f024974e626c0c29ddad855540c61e59afda59cb02ef4da", "dweb:/ipfs/QmSKMYuPVnUbhQGopuSViy8DhzYcKSenFFxz2m3EoTSqkp"];
                readonly license: "Apache-2.0";
            };
            readonly "lib/forge-std/lib/ds-test/src/test.sol": {
                readonly keccak256: "0x8758531bbac3972efcf1fa46383dbe1d276406fe527bc7abb2f236486278e83b";
                readonly urls: readonly ["bzz-raw://1f64264d61506847acf8761e84aff690cebe830958eac00bac7924d8be569240", "dweb:/ipfs/QmSekDJvJ82MZAmr63n7YvfLzQ7gS4NLSHPmHL3GN3rw8k"];
                readonly license: "GPL-3.0-or-later";
            };
            readonly "lib/forge-std/src/Base.sol": {
                readonly keccak256: "0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c";
                readonly urls: readonly ["bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224", "dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdAssertions.sol": {
                readonly keccak256: "0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60";
                readonly urls: readonly ["bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b", "dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdChains.sol": {
                readonly keccak256: "0xc576f8b81bf19c853baa1fdc23ddc3b9fa1856d5749b01a4f99bed73db7d847d";
                readonly urls: readonly ["bzz-raw://fad0b975990e50941e255397925be1695b1ec06c3649decdbf759f42e49638d4", "dweb:/ipfs/QmeeRsbdgzUoPj1GWZZaoTsiEEuSGfjx7MpykgfxcMa1r1"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdCheats.sol": {
                readonly keccak256: "0x2e1b4b99283c16efaf155f7e55ea357943cf6e61fc02aad060534349f63b6cd5";
                readonly urls: readonly ["bzz-raw://d471a35903e8a367a145ca5b5955caf691c723fe1117c6dcffd928d9f8d7c95a", "dweb:/ipfs/QmXGnFUGiX9APL8xit7NZQEYBoEL3wWyW1YyFoJQd2pGPe"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdError.sol": {
                readonly keccak256: "0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77";
                readonly urls: readonly ["bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6", "dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdInvariant.sol": {
                readonly keccak256: "0xf5762db8ef95099bbe77578cd9349511ed77f4dd63ec98cc6b7cd711447830c1";
                readonly urls: readonly ["bzz-raw://a6b0360806a9804eac0f7e07492b5db9c4953c521dabb9a11b17dd610d5b804c", "dweb:/ipfs/QmUFozSt3W7drBRdm1cdRow61EABqSLJtkvYZXWmoHUPss"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdJson.sol": {
                readonly keccak256: "0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b";
                readonly urls: readonly ["bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c", "dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdMath.sol": {
                readonly keccak256: "0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2";
                readonly urls: readonly ["bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92", "dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdStorage.sol": {
                readonly keccak256: "0x391a28a2e54aea51a6fb03a3a48035304ca4d24bc669ddf3d4c152c7162e514d";
                readonly urls: readonly ["bzz-raw://475fd0d87ccb0fdc4418dea2babffb4adb4aafb817e61f7ef31c2303f10c6c26", "dweb:/ipfs/QmQgcgtZxpkW6DRmbJszN1F8mU6zhaTZGdWWsj77yCuWN9"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdStyle.sol": {
                readonly keccak256: "0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d";
                readonly urls: readonly ["bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8", "dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdUtils.sol": {
                readonly keccak256: "0x8758c42ba9d9e46868b796e2330ac239006ede07bd438a4b36dd6f2c47d27dc1";
                readonly urls: readonly ["bzz-raw://11f5752e0187b1e3631b875efdbe05d45929d05f1c1717105a9115d0a6628140", "dweb:/ipfs/QmUKkx9jfsUvjyYBw45RvrW1hTFXDXi2Jv5tbHP86mnzpi"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/Test.sol": {
                readonly keccak256: "0x39b1729d5868c8e94ab8af16751eb500a17fe3870dc627d2b7ddcd5df18d7ad0";
                readonly urls: readonly ["bzz-raw://1568c82aff125cc4b0fc168be9d67ac313f469a3c7405c5493caecaaaecfb765", "dweb:/ipfs/QmXByuZReJsdu1jDcxj1FcmpcUnzoBcqybn9kWgDAECWri"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/Vm.sol": {
                readonly keccak256: "0xc37bdacd465b44feb78cdf9a86f62255884be84acd5a4b175f48f004386ce8f4";
                readonly urls: readonly ["bzz-raw://8109a9cb6c5b2f6c137e4bc119ce468d88eaf926ed60558e997a5505827c9241", "dweb:/ipfs/QmR1H3wWXwhYD4bXgFFxNubnEZYB28WvvUUHkL9oZx14cx"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/console.sol": {
                readonly keccak256: "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba";
                readonly urls: readonly ["bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70", "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/console2.sol": {
                readonly keccak256: "0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea";
                readonly urls: readonly ["bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973", "dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/interfaces/IMulticall3.sol": {
                readonly keccak256: "0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a";
                readonly urls: readonly ["bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0", "dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/safeconsole.sol": {
                readonly keccak256: "0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381";
                readonly urls: readonly ["bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae", "dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq"];
                readonly license: "MIT";
            };
            readonly "test/utils/BaseTest.sol": {
                readonly keccak256: "0xb96ab99454fbd35bda08a259b5298e64765118ac10b52618d813f2a7306c6886";
                readonly urls: readonly ["bzz-raw://5949a720b7bfd576ec9396c25eaee235da33192b23e4383f3fe5c4fb383525e0", "dweb:/ipfs/QmVz1MQWLf6FPXBeWNWQwcxub3Y2XYBX5Esq4ryQsNqFvQ"];
                readonly license: "Apache-2.0";
            };
        };
        readonly version: 1;
    };
    readonly ast: {
        readonly absolutePath: "test/utils/BaseTest.sol";
        readonly id: 138012;
        readonly exportedSymbols: {
            readonly BaseTest: readonly [138011];
            readonly ERC20ForwarderFactory: readonly [19430];
            readonly IERC20: readonly [6793];
            readonly Test: readonly [34960];
            readonly console2: readonly [52686];
        };
        readonly nodeType: "SourceUnit";
        readonly src: "39:5624:176";
        readonly nodes: readonly [{
            readonly id: 137460;
            readonly nodeType: "PragmaDirective";
            readonly src: "39:23:176";
            readonly nodes: readonly [];
            readonly literals: readonly ["solidity", "0.8", ".20"];
        }, {
            readonly id: 137462;
            readonly nodeType: "ImportDirective";
            readonly src: "64:50:176";
            readonly nodes: readonly [];
            readonly absolutePath: "lib/forge-std/src/console2.sol";
            readonly file: "forge-std/console2.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 138012;
            readonly sourceUnit: 52687;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 137461;
                    readonly name: "console2";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 52686;
                    readonly src: "73:8:176";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 137464;
            readonly nodeType: "ImportDirective";
            readonly src: "115:42:176";
            readonly nodes: readonly [];
            readonly absolutePath: "lib/forge-std/src/Test.sol";
            readonly file: "forge-std/Test.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 138012;
            readonly sourceUnit: 34961;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 137463;
                    readonly name: "Test";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 34960;
                    readonly src: "124:4:176";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 137466;
            readonly nodeType: "ImportDirective";
            readonly src: "158:61:176";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IERC20.sol";
            readonly file: "contracts/src/interfaces/IERC20.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 138012;
            readonly sourceUnit: 6794;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 137465;
                    readonly name: "IERC20";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 6793;
                    readonly src: "167:6:176";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 137468;
            readonly nodeType: "ImportDirective";
            readonly src: "220:86:176";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/token/ERC20ForwarderFactory.sol";
            readonly file: "contracts/src/token/ERC20ForwarderFactory.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 138012;
            readonly sourceUnit: 19431;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 137467;
                    readonly name: "ERC20ForwarderFactory";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 19430;
                    readonly src: "229:21:176";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 138011;
            readonly nodeType: "ContractDefinition";
            readonly src: "308:5354:176";
            readonly nodes: readonly [{
                readonly id: 137473;
                readonly nodeType: "VariableDeclaration";
                readonly src: "340:38:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "forwarderFactory";
                readonly nameLocation: "362:16:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_contract$_ERC20ForwarderFactory_$19430";
                    readonly typeString: "contract ERC20ForwarderFactory";
                };
                readonly typeName: {
                    readonly id: 137472;
                    readonly nodeType: "UserDefinedTypeName";
                    readonly pathNode: {
                        readonly id: 137471;
                        readonly name: "ERC20ForwarderFactory";
                        readonly nameLocations: readonly ["340:21:176"];
                        readonly nodeType: "IdentifierPath";
                        readonly referencedDeclaration: 19430;
                        readonly src: "340:21:176";
                    };
                    readonly referencedDeclaration: 19430;
                    readonly src: "340:21:176";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_contract$_ERC20ForwarderFactory_$19430";
                        readonly typeString: "contract ERC20ForwarderFactory";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137475;
                readonly nodeType: "VariableDeclaration";
                readonly src: "385:13:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "alice";
                readonly nameLocation: "393:5:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_address";
                    readonly typeString: "address";
                };
                readonly typeName: {
                    readonly id: 137474;
                    readonly name: "address";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "385:7:176";
                    readonly stateMutability: "nonpayable";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_address";
                        readonly typeString: "address";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137477;
                readonly nodeType: "VariableDeclaration";
                readonly src: "404:11:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "bob";
                readonly nameLocation: "412:3:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_address";
                    readonly typeString: "address";
                };
                readonly typeName: {
                    readonly id: 137476;
                    readonly name: "address";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "404:7:176";
                    readonly stateMutability: "nonpayable";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_address";
                        readonly typeString: "address";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137479;
                readonly nodeType: "VariableDeclaration";
                readonly src: "421:14:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "celine";
                readonly nameLocation: "429:6:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_address";
                    readonly typeString: "address";
                };
                readonly typeName: {
                    readonly id: 137478;
                    readonly name: "address";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "421:7:176";
                    readonly stateMutability: "nonpayable";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_address";
                        readonly typeString: "address";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137481;
                readonly nodeType: "VariableDeclaration";
                readonly src: "441:11:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "dan";
                readonly nameLocation: "449:3:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_address";
                    readonly typeString: "address";
                };
                readonly typeName: {
                    readonly id: 137480;
                    readonly name: "address";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "441:7:176";
                    readonly stateMutability: "nonpayable";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_address";
                        readonly typeString: "address";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137483;
                readonly nodeType: "VariableDeclaration";
                readonly src: "458:11:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "eve";
                readonly nameLocation: "466:3:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_address";
                    readonly typeString: "address";
                };
                readonly typeName: {
                    readonly id: 137482;
                    readonly name: "address";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "458:7:176";
                    readonly stateMutability: "nonpayable";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_address";
                        readonly typeString: "address";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137485;
                readonly nodeType: "VariableDeclaration";
                readonly src: "476:14:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "minter";
                readonly nameLocation: "484:6:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_address";
                    readonly typeString: "address";
                };
                readonly typeName: {
                    readonly id: 137484;
                    readonly name: "address";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "476:7:176";
                    readonly stateMutability: "nonpayable";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_address";
                        readonly typeString: "address";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137487;
                readonly nodeType: "VariableDeclaration";
                readonly src: "496:16:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "deployer";
                readonly nameLocation: "504:8:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_address";
                    readonly typeString: "address";
                };
                readonly typeName: {
                    readonly id: 137486;
                    readonly name: "address";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "496:7:176";
                    readonly stateMutability: "nonpayable";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_address";
                        readonly typeString: "address";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137489;
                readonly nodeType: "VariableDeclaration";
                readonly src: "518:20:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "feeCollector";
                readonly nameLocation: "526:12:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_address";
                    readonly typeString: "address";
                };
                readonly typeName: {
                    readonly id: 137488;
                    readonly name: "address";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "518:7:176";
                    readonly stateMutability: "nonpayable";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_address";
                        readonly typeString: "address";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137491;
                readonly nodeType: "VariableDeclaration";
                readonly src: "544:18:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "governance";
                readonly nameLocation: "552:10:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_address";
                    readonly typeString: "address";
                };
                readonly typeName: {
                    readonly id: 137490;
                    readonly name: "address";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "544:7:176";
                    readonly stateMutability: "nonpayable";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_address";
                        readonly typeString: "address";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137493;
                readonly nodeType: "VariableDeclaration";
                readonly src: "568:14:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "pauser";
                readonly nameLocation: "576:6:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_address";
                    readonly typeString: "address";
                };
                readonly typeName: {
                    readonly id: 137492;
                    readonly name: "address";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "568:7:176";
                    readonly stateMutability: "nonpayable";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_address";
                        readonly typeString: "address";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137495;
                readonly nodeType: "ErrorDefinition";
                readonly src: "589:29:176";
                readonly nodes: readonly [];
                readonly errorSelector: "c4649d28";
                readonly name: "WhaleBalanceExceeded";
                readonly nameLocation: "595:20:176";
                readonly parameters: {
                    readonly id: 137494;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "615:2:176";
                };
            }, {
                readonly id: 137497;
                readonly nodeType: "ErrorDefinition";
                readonly src: "623:24:176";
                readonly nodes: readonly [];
                readonly errorSelector: "98d85a67";
                readonly name: "WhaleIsContract";
                readonly nameLocation: "629:15:176";
                readonly parameters: {
                    readonly id: 137496;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "644:2:176";
                };
            }, {
                readonly id: 137499;
                readonly nodeType: "VariableDeclaration";
                readonly src: "653:21:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "mainnetForkId";
                readonly nameLocation: "661:13:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_uint256";
                    readonly typeString: "uint256";
                };
                readonly typeName: {
                    readonly id: 137498;
                    readonly name: "uint256";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "653:7:176";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_uint256";
                        readonly typeString: "uint256";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137501;
                readonly nodeType: "VariableDeclaration";
                readonly src: "680:20:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "goerliForkId";
                readonly nameLocation: "688:12:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_uint256";
                    readonly typeString: "uint256";
                };
                readonly typeName: {
                    readonly id: 137500;
                    readonly name: "uint256";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "680:7:176";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_uint256";
                        readonly typeString: "uint256";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137503;
                readonly nodeType: "VariableDeclaration";
                readonly src: "707:16:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "__init__";
                readonly nameLocation: "715:8:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_uint256";
                    readonly typeString: "uint256";
                };
                readonly typeName: {
                    readonly id: 137502;
                    readonly name: "uint256";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "707:7:176";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_uint256";
                        readonly typeString: "uint256";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137509;
                readonly nodeType: "VariableDeclaration";
                readonly src: "761:56:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "MAINNET_RPC_URL";
                readonly nameLocation: "768:15:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_string_storage";
                    readonly typeString: "string";
                };
                readonly typeName: {
                    readonly id: 137504;
                    readonly name: "string";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "761:6:176";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_string_storage_ptr";
                        readonly typeString: "string";
                    };
                };
                readonly value: {
                    readonly arguments: readonly [{
                        readonly hexValue: "4d41494e4e45545f5250435f55524c";
                        readonly id: 137507;
                        readonly isConstant: false;
                        readonly isLValue: false;
                        readonly isPure: true;
                        readonly kind: "string";
                        readonly lValueRequested: false;
                        readonly nodeType: "Literal";
                        readonly src: "799:17:176";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_stringliteral_e9247e87c7ce28f49f1da055e6c014066579f6788d13d999021b3f077553a64f";
                            readonly typeString: "literal_string \"MAINNET_RPC_URL\"";
                        };
                        readonly value: "MAINNET_RPC_URL";
                    }];
                    readonly expression: {
                        readonly argumentTypes: readonly [{
                            readonly typeIdentifier: "t_stringliteral_e9247e87c7ce28f49f1da055e6c014066579f6788d13d999021b3f077553a64f";
                            readonly typeString: "literal_string \"MAINNET_RPC_URL\"";
                        }];
                        readonly expression: {
                            readonly id: 137505;
                            readonly name: "vm";
                            readonly nodeType: "Identifier";
                            readonly overloadedDeclarations: readonly [];
                            readonly referencedDeclaration: 25385;
                            readonly src: "786:2:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_Vm_$36497";
                                readonly typeString: "contract Vm";
                            };
                        };
                        readonly id: 137506;
                        readonly isConstant: false;
                        readonly isLValue: false;
                        readonly isPure: false;
                        readonly lValueRequested: false;
                        readonly memberLocation: "789:9:176";
                        readonly memberName: "envString";
                        readonly nodeType: "MemberAccess";
                        readonly referencedDeclaration: 35101;
                        readonly src: "786:12:176";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_function_external_view$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$";
                            readonly typeString: "function (string memory) view external returns (string memory)";
                        };
                    };
                    readonly id: 137508;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: false;
                    readonly kind: "functionCall";
                    readonly lValueRequested: false;
                    readonly nameLocations: readonly [];
                    readonly names: readonly [];
                    readonly nodeType: "FunctionCall";
                    readonly src: "786:31:176";
                    readonly tryCall: false;
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_string_memory_ptr";
                        readonly typeString: "string memory";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137515;
                readonly nodeType: "VariableDeclaration";
                readonly src: "823:54:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "GOERLI_RPC_URL";
                readonly nameLocation: "830:14:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_string_storage";
                    readonly typeString: "string";
                };
                readonly typeName: {
                    readonly id: 137510;
                    readonly name: "string";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "823:6:176";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_string_storage_ptr";
                        readonly typeString: "string";
                    };
                };
                readonly value: {
                    readonly arguments: readonly [{
                        readonly hexValue: "474f45524c495f5250435f55524c";
                        readonly id: 137513;
                        readonly isConstant: false;
                        readonly isLValue: false;
                        readonly isPure: true;
                        readonly kind: "string";
                        readonly lValueRequested: false;
                        readonly nodeType: "Literal";
                        readonly src: "860:16:176";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_stringliteral_59ee4a4e71ea94bb714df1943fcbf086b1f00337792a35b21ec2c79fc81bb061";
                            readonly typeString: "literal_string \"GOERLI_RPC_URL\"";
                        };
                        readonly value: "GOERLI_RPC_URL";
                    }];
                    readonly expression: {
                        readonly argumentTypes: readonly [{
                            readonly typeIdentifier: "t_stringliteral_59ee4a4e71ea94bb714df1943fcbf086b1f00337792a35b21ec2c79fc81bb061";
                            readonly typeString: "literal_string \"GOERLI_RPC_URL\"";
                        }];
                        readonly expression: {
                            readonly id: 137511;
                            readonly name: "vm";
                            readonly nodeType: "Identifier";
                            readonly overloadedDeclarations: readonly [];
                            readonly referencedDeclaration: 25385;
                            readonly src: "847:2:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_Vm_$36497";
                                readonly typeString: "contract Vm";
                            };
                        };
                        readonly id: 137512;
                        readonly isConstant: false;
                        readonly isLValue: false;
                        readonly isPure: false;
                        readonly lValueRequested: false;
                        readonly memberLocation: "850:9:176";
                        readonly memberName: "envString";
                        readonly nodeType: "MemberAccess";
                        readonly referencedDeclaration: 35101;
                        readonly src: "847:12:176";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_function_external_view$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$";
                            readonly typeString: "function (string memory) view external returns (string memory)";
                        };
                    };
                    readonly id: 137514;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: false;
                    readonly kind: "functionCall";
                    readonly lValueRequested: false;
                    readonly nameLocations: readonly [];
                    readonly names: readonly [];
                    readonly nodeType: "FunctionCall";
                    readonly src: "847:30:176";
                    readonly tryCall: false;
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_string_memory_ptr";
                        readonly typeString: "string memory";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137517;
                readonly nodeType: "VariableDeclaration";
                readonly src: "884:13:176";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "isForked";
                readonly nameLocation: "889:8:176";
                readonly scope: 138011;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_bool";
                    readonly typeString: "bool";
                };
                readonly typeName: {
                    readonly id: 137516;
                    readonly name: "bool";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "884:4:176";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_bool";
                        readonly typeString: "bool";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 137586;
                readonly nodeType: "FunctionDefinition";
                readonly src: "904:471:176";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 137585;
                    readonly nodeType: "Block";
                    readonly src: "936:439:176";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly id: 137524;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137520;
                                readonly name: "alice";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137475;
                                readonly src: "946:5:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly hexValue: "616c696365";
                                    readonly id: 137522;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "965:7:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_9c0257114eb9399a2985f8e75dad7600c5d89fe3824ffa99ec1c3eb8bf3b0501";
                                        readonly typeString: "literal_string \"alice\"";
                                    };
                                    readonly value: "alice";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_9c0257114eb9399a2985f8e75dad7600c5d89fe3824ffa99ec1c3eb8bf3b0501";
                                        readonly typeString: "literal_string \"alice\"";
                                    }];
                                    readonly id: 137521;
                                    readonly name: "createUser";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137684;
                                    readonly src: "954:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 137523;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "954:19:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "946:27:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137525;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "946:27:176";
                    }, {
                        readonly expression: {
                            readonly id: 137530;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137526;
                                readonly name: "bob";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137477;
                                readonly src: "983:3:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly hexValue: "626f62";
                                    readonly id: 137528;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "1000:5:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_38e47a7b719dce63662aeaf43440326f551b8a7ee198cee35cb5d517f2d296a2";
                                        readonly typeString: "literal_string \"bob\"";
                                    };
                                    readonly value: "bob";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_38e47a7b719dce63662aeaf43440326f551b8a7ee198cee35cb5d517f2d296a2";
                                        readonly typeString: "literal_string \"bob\"";
                                    }];
                                    readonly id: 137527;
                                    readonly name: "createUser";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137684;
                                    readonly src: "989:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 137529;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "989:17:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "983:23:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137531;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "983:23:176";
                    }, {
                        readonly expression: {
                            readonly id: 137536;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137532;
                                readonly name: "celine";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137479;
                                readonly src: "1016:6:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly hexValue: "63656c696e65";
                                    readonly id: 137534;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "1036:8:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_7cb5fa358e5167becac9e7a099a7eac0e64049053c14356356e30097bb03bf4a";
                                        readonly typeString: "literal_string \"celine\"";
                                    };
                                    readonly value: "celine";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_7cb5fa358e5167becac9e7a099a7eac0e64049053c14356356e30097bb03bf4a";
                                        readonly typeString: "literal_string \"celine\"";
                                    }];
                                    readonly id: 137533;
                                    readonly name: "createUser";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137684;
                                    readonly src: "1025:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 137535;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1025:20:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "1016:29:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137537;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1016:29:176";
                    }, {
                        readonly expression: {
                            readonly id: 137542;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137538;
                                readonly name: "dan";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137481;
                                readonly src: "1055:3:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly hexValue: "64616e";
                                    readonly id: 137540;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "1072:5:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_0d2095e5cac990209cb47ca08e0614adcffe0315af614f414ab60c6230bdc988";
                                        readonly typeString: "literal_string \"dan\"";
                                    };
                                    readonly value: "dan";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_0d2095e5cac990209cb47ca08e0614adcffe0315af614f414ab60c6230bdc988";
                                        readonly typeString: "literal_string \"dan\"";
                                    }];
                                    readonly id: 137539;
                                    readonly name: "createUser";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137684;
                                    readonly src: "1061:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 137541;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1061:17:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "1055:23:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137543;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1055:23:176";
                    }, {
                        readonly expression: {
                            readonly id: 137548;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137544;
                                readonly name: "eve";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137483;
                                readonly src: "1088:3:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly hexValue: "657665";
                                    readonly id: 137546;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "1105:5:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_876be0999ed9b7fc26f1b270903ef7b0c35291f89407903270fea611c85f515c";
                                        readonly typeString: "literal_string \"eve\"";
                                    };
                                    readonly value: "eve";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_876be0999ed9b7fc26f1b270903ef7b0c35291f89407903270fea611c85f515c";
                                        readonly typeString: "literal_string \"eve\"";
                                    }];
                                    readonly id: 137545;
                                    readonly name: "createUser";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137684;
                                    readonly src: "1094:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 137547;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1094:17:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "1088:23:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137549;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1088:23:176";
                    }, {
                        readonly expression: {
                            readonly id: 137554;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137550;
                                readonly name: "deployer";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137487;
                                readonly src: "1122:8:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly hexValue: "6465706c6f796572";
                                    readonly id: 137552;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "1144:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_dbe2b933bb7d57444cdba9c71b5ceb79b60dc455ad691d856e6e4025cf542caa";
                                        readonly typeString: "literal_string \"deployer\"";
                                    };
                                    readonly value: "deployer";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_dbe2b933bb7d57444cdba9c71b5ceb79b60dc455ad691d856e6e4025cf542caa";
                                        readonly typeString: "literal_string \"deployer\"";
                                    }];
                                    readonly id: 137551;
                                    readonly name: "createUser";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137684;
                                    readonly src: "1133:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 137553;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1133:22:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "1122:33:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137555;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1122:33:176";
                    }, {
                        readonly expression: {
                            readonly id: 137560;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137556;
                                readonly name: "minter";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137485;
                                readonly src: "1165:6:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly hexValue: "6d696e746572";
                                    readonly id: 137558;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "1185:8:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_39eb9ec2059d897c44a17440c762c429de204f6fddd727156ca52b8da086a6f7";
                                        readonly typeString: "literal_string \"minter\"";
                                    };
                                    readonly value: "minter";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_39eb9ec2059d897c44a17440c762c429de204f6fddd727156ca52b8da086a6f7";
                                        readonly typeString: "literal_string \"minter\"";
                                    }];
                                    readonly id: 137557;
                                    readonly name: "createUser";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137684;
                                    readonly src: "1174:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 137559;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1174:20:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "1165:29:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137561;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1165:29:176";
                    }, {
                        readonly expression: {
                            readonly id: 137566;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137562;
                                readonly name: "feeCollector";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137489;
                                readonly src: "1204:12:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly hexValue: "666565436f6c6c6563746f72";
                                    readonly id: 137564;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "1230:14:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_c49f089e6bc9c60c0bf928898b16a59e9c9d8497f3d6a357b4da1a23bd2151ce";
                                        readonly typeString: "literal_string \"feeCollector\"";
                                    };
                                    readonly value: "feeCollector";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_c49f089e6bc9c60c0bf928898b16a59e9c9d8497f3d6a357b4da1a23bd2151ce";
                                        readonly typeString: "literal_string \"feeCollector\"";
                                    }];
                                    readonly id: 137563;
                                    readonly name: "createUser";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137684;
                                    readonly src: "1219:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 137565;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1219:26:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "1204:41:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137567;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1204:41:176";
                    }, {
                        readonly expression: {
                            readonly id: 137572;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137568;
                                readonly name: "governance";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137491;
                                readonly src: "1255:10:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly hexValue: "676f7665726e616e6365";
                                    readonly id: 137570;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "1279:12:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_abea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f90a";
                                        readonly typeString: "literal_string \"governance\"";
                                    };
                                    readonly value: "governance";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_abea6fd3db56a6e6d0242111b43ebb13d1c42709651c032c7894962023a1f90a";
                                        readonly typeString: "literal_string \"governance\"";
                                    }];
                                    readonly id: 137569;
                                    readonly name: "createUser";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137684;
                                    readonly src: "1268:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 137571;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1268:24:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "1255:37:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137573;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1255:37:176";
                    }, {
                        readonly expression: {
                            readonly id: 137578;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137574;
                                readonly name: "pauser";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137493;
                                readonly src: "1302:6:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly hexValue: "706175736572";
                                    readonly id: 137576;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "1322:8:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f";
                                        readonly typeString: "literal_string \"pauser\"";
                                    };
                                    readonly value: "pauser";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f";
                                        readonly typeString: "literal_string \"pauser\"";
                                    }];
                                    readonly id: 137575;
                                    readonly name: "createUser";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137684;
                                    readonly src: "1311:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 137577;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1311:20:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "1302:29:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137579;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1302:29:176";
                    }, {
                        readonly expression: {
                            readonly id: 137583;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137580;
                                readonly name: "__init__";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137503;
                                readonly src: "1342:8:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly expression: {
                                    readonly id: 137581;
                                    readonly name: "block";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: -4;
                                    readonly src: "1353:5:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_magic_block";
                                        readonly typeString: "block";
                                    };
                                };
                                readonly id: 137582;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1359:9:176";
                                readonly memberName: "timestamp";
                                readonly nodeType: "MemberAccess";
                                readonly src: "1353:15:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly src: "1342:26:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly id: 137584;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1342:26:176";
                    }];
                };
                readonly functionSelector: "0a9254e4";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "setUp";
                readonly nameLocation: "913:5:176";
                readonly parameters: {
                    readonly id: 137518;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "918:2:176";
                };
                readonly returnParameters: {
                    readonly id: 137519;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "936:0:176";
                };
                readonly scope: 138011;
                readonly stateMutability: "nonpayable";
                readonly virtual: true;
                readonly visibility: "public";
            }, {
                readonly id: 137615;
                readonly nodeType: "ModifierDefinition";
                readonly src: "1381:217:176";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 137614;
                    readonly nodeType: "Block";
                    readonly src: "1426:172:176";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly id: 137595;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137590;
                                readonly name: "mainnetForkId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137499;
                                readonly src: "1436:13:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly id: 137593;
                                    readonly name: "MAINNET_RPC_URL";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137509;
                                    readonly src: "1466:15:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_string_storage";
                                        readonly typeString: "string storage ref";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_string_storage";
                                        readonly typeString: "string storage ref";
                                    }];
                                    readonly expression: {
                                        readonly id: 137591;
                                        readonly name: "vm";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 25385;
                                        readonly src: "1452:2:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_Vm_$36497";
                                            readonly typeString: "contract Vm";
                                        };
                                    };
                                    readonly id: 137592;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "1455:10:176";
                                    readonly memberName: "createFork";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 36365;
                                    readonly src: "1452:13:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_nonpayable$_t_string_memory_ptr_$returns$_t_uint256_$";
                                        readonly typeString: "function (string memory) external returns (uint256)";
                                    };
                                };
                                readonly id: 137594;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1452:30:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly src: "1436:46:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly id: 137596;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1436:46:176";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 137600;
                                readonly name: "mainnetForkId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137499;
                                readonly src: "1506:13:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }];
                                readonly expression: {
                                    readonly id: 137597;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 25385;
                                    readonly src: "1492:2:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$36497";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 137599;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1495:10:176";
                                readonly memberName: "selectFork";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 36404;
                                readonly src: "1492:13:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256) external";
                                };
                            };
                            readonly id: 137601;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1492:28:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 137602;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1492:28:176";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 137606;
                                readonly name: "blockNumber";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137588;
                                readonly src: "1542:11:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }];
                                readonly expression: {
                                    readonly id: 137603;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 25385;
                                    readonly src: "1530:2:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$36497";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 137605;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1533:8:176";
                                readonly memberName: "rollFork";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 36415;
                                readonly src: "1530:11:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256) external";
                                };
                            };
                            readonly id: 137607;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1530:24:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 137608;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1530:24:176";
                    }, {
                        readonly expression: {
                            readonly id: 137611;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137609;
                                readonly name: "isForked";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137517;
                                readonly src: "1564:8:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly hexValue: "74727565";
                                readonly id: 137610;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "bool";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1575:4:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                                readonly value: "true";
                            };
                            readonly src: "1564:15:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly id: 137612;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1564:15:176";
                    }, {
                        readonly id: 137613;
                        readonly nodeType: "PlaceholderStatement";
                        readonly src: "1590:1:176";
                    }];
                };
                readonly name: "__mainnet_fork";
                readonly nameLocation: "1390:14:176";
                readonly parameters: {
                    readonly id: 137589;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 137588;
                        readonly mutability: "mutable";
                        readonly name: "blockNumber";
                        readonly nameLocation: "1413:11:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137615;
                        readonly src: "1405:19:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 137587;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "1405:7:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "1404:21:176";
                };
                readonly virtual: false;
                readonly visibility: "internal";
            }, {
                readonly id: 137644;
                readonly nodeType: "ModifierDefinition";
                readonly src: "1604:213:176";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 137643;
                    readonly nodeType: "Block";
                    readonly src: "1648:169:176";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly id: 137624;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137619;
                                readonly name: "goerliForkId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137501;
                                readonly src: "1658:12:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly id: 137622;
                                    readonly name: "GOERLI_RPC_URL";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137515;
                                    readonly src: "1687:14:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_string_storage";
                                        readonly typeString: "string storage ref";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_string_storage";
                                        readonly typeString: "string storage ref";
                                    }];
                                    readonly expression: {
                                        readonly id: 137620;
                                        readonly name: "vm";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 25385;
                                        readonly src: "1673:2:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_Vm_$36497";
                                            readonly typeString: "contract Vm";
                                        };
                                    };
                                    readonly id: 137621;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "1676:10:176";
                                    readonly memberName: "createFork";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 36365;
                                    readonly src: "1673:13:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_nonpayable$_t_string_memory_ptr_$returns$_t_uint256_$";
                                        readonly typeString: "function (string memory) external returns (uint256)";
                                    };
                                };
                                readonly id: 137623;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1673:29:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly src: "1658:44:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly id: 137625;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1658:44:176";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 137629;
                                readonly name: "goerliForkId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137501;
                                readonly src: "1726:12:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }];
                                readonly expression: {
                                    readonly id: 137626;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 25385;
                                    readonly src: "1712:2:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$36497";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 137628;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1715:10:176";
                                readonly memberName: "selectFork";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 36404;
                                readonly src: "1712:13:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256) external";
                                };
                            };
                            readonly id: 137630;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1712:27:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 137631;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1712:27:176";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 137635;
                                readonly name: "blockNumber";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137617;
                                readonly src: "1761:11:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }];
                                readonly expression: {
                                    readonly id: 137632;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 25385;
                                    readonly src: "1749:2:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$36497";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 137634;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1752:8:176";
                                readonly memberName: "rollFork";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 36415;
                                readonly src: "1749:11:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256) external";
                                };
                            };
                            readonly id: 137636;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1749:24:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 137637;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1749:24:176";
                    }, {
                        readonly expression: {
                            readonly id: 137640;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137638;
                                readonly name: "isForked";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137517;
                                readonly src: "1783:8:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly hexValue: "74727565";
                                readonly id: 137639;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "bool";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1794:4:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                                readonly value: "true";
                            };
                            readonly src: "1783:15:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly id: 137641;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1783:15:176";
                    }, {
                        readonly id: 137642;
                        readonly nodeType: "PlaceholderStatement";
                        readonly src: "1809:1:176";
                    }];
                };
                readonly name: "__goerli_fork";
                readonly nameLocation: "1613:13:176";
                readonly parameters: {
                    readonly id: 137618;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 137617;
                        readonly mutability: "mutable";
                        readonly name: "blockNumber";
                        readonly nameLocation: "1635:11:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137644;
                        readonly src: "1627:19:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 137616;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "1627:7:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "1626:21:176";
                };
                readonly virtual: false;
                readonly visibility: "internal";
            }, {
                readonly id: 137684;
                readonly nodeType: "FunctionDefinition";
                readonly src: "1845:218:176";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 137683;
                    readonly nodeType: "Block";
                    readonly src: "1916:147:176";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly id: 137667;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 137651;
                                readonly name: "_user";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137649;
                                readonly src: "1926:5:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly arguments: readonly [{
                                        readonly arguments: readonly [{
                                            readonly arguments: readonly [{
                                                readonly arguments: readonly [{
                                                    readonly id: 137661;
                                                    readonly name: "name";
                                                    readonly nodeType: "Identifier";
                                                    readonly overloadedDeclarations: readonly [];
                                                    readonly referencedDeclaration: 137646;
                                                    readonly src: "1979:4:176";
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_string_memory_ptr";
                                                        readonly typeString: "string memory";
                                                    };
                                                }];
                                                readonly expression: {
                                                    readonly argumentTypes: readonly [{
                                                        readonly typeIdentifier: "t_string_memory_ptr";
                                                        readonly typeString: "string memory";
                                                    }];
                                                    readonly expression: {
                                                        readonly id: 137659;
                                                        readonly name: "abi";
                                                        readonly nodeType: "Identifier";
                                                        readonly overloadedDeclarations: readonly [];
                                                        readonly referencedDeclaration: -1;
                                                        readonly src: "1968:3:176";
                                                        readonly typeDescriptions: {
                                                            readonly typeIdentifier: "t_magic_abi";
                                                            readonly typeString: "abi";
                                                        };
                                                    };
                                                    readonly id: 137660;
                                                    readonly isConstant: false;
                                                    readonly isLValue: false;
                                                    readonly isPure: true;
                                                    readonly lValueRequested: false;
                                                    readonly memberLocation: "1972:6:176";
                                                    readonly memberName: "encode";
                                                    readonly nodeType: "MemberAccess";
                                                    readonly src: "1968:10:176";
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$";
                                                        readonly typeString: "function () pure returns (bytes memory)";
                                                    };
                                                };
                                                readonly id: 137662;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: false;
                                                readonly kind: "functionCall";
                                                readonly lValueRequested: false;
                                                readonly nameLocations: readonly [];
                                                readonly names: readonly [];
                                                readonly nodeType: "FunctionCall";
                                                readonly src: "1968:16:176";
                                                readonly tryCall: false;
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                                    readonly typeString: "bytes memory";
                                                };
                                            }];
                                            readonly expression: {
                                                readonly argumentTypes: readonly [{
                                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                                    readonly typeString: "bytes memory";
                                                }];
                                                readonly id: 137658;
                                                readonly name: "keccak256";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: -8;
                                                readonly src: "1958:9:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                                                    readonly typeString: "function (bytes memory) pure returns (bytes32)";
                                                };
                                            };
                                            readonly id: 137663;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly kind: "functionCall";
                                            readonly lValueRequested: false;
                                            readonly nameLocations: readonly [];
                                            readonly names: readonly [];
                                            readonly nodeType: "FunctionCall";
                                            readonly src: "1958:27:176";
                                            readonly tryCall: false;
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_bytes32";
                                                readonly typeString: "bytes32";
                                            };
                                        }];
                                        readonly expression: {
                                            readonly argumentTypes: readonly [{
                                                readonly typeIdentifier: "t_bytes32";
                                                readonly typeString: "bytes32";
                                            }];
                                            readonly id: 137657;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: true;
                                            readonly lValueRequested: false;
                                            readonly nodeType: "ElementaryTypeNameExpression";
                                            readonly src: "1950:7:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_type$_t_uint256_$";
                                                readonly typeString: "type(uint256)";
                                            };
                                            readonly typeName: {
                                                readonly id: 137656;
                                                readonly name: "uint256";
                                                readonly nodeType: "ElementaryTypeName";
                                                readonly src: "1950:7:176";
                                                readonly typeDescriptions: {};
                                            };
                                        };
                                        readonly id: 137664;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly kind: "typeConversion";
                                        readonly lValueRequested: false;
                                        readonly nameLocations: readonly [];
                                        readonly names: readonly [];
                                        readonly nodeType: "FunctionCall";
                                        readonly src: "1950:36:176";
                                        readonly tryCall: false;
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        }];
                                        readonly id: 137655;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "1942:7:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_uint160_$";
                                            readonly typeString: "type(uint160)";
                                        };
                                        readonly typeName: {
                                            readonly id: 137654;
                                            readonly name: "uint160";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "1942:7:176";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 137665;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "1942:45:176";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint160";
                                        readonly typeString: "uint160";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_uint160";
                                        readonly typeString: "uint160";
                                    }];
                                    readonly id: 137653;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly nodeType: "ElementaryTypeNameExpression";
                                    readonly src: "1934:7:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_type$_t_address_$";
                                        readonly typeString: "type(address)";
                                    };
                                    readonly typeName: {
                                        readonly id: 137652;
                                        readonly name: "address";
                                        readonly nodeType: "ElementaryTypeName";
                                        readonly src: "1934:7:176";
                                        readonly typeDescriptions: {};
                                    };
                                };
                                readonly id: 137666;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "typeConversion";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1934:54:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly src: "1926:62:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly id: 137668;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1926:62:176";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 137672;
                                readonly name: "_user";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137649;
                                readonly src: "2007:5:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly id: 137673;
                                readonly name: "name";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137646;
                                readonly src: "2014:4:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_string_memory_ptr";
                                    readonly typeString: "string memory";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_string_memory_ptr";
                                    readonly typeString: "string memory";
                                }];
                                readonly expression: {
                                    readonly id: 137669;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 25385;
                                    readonly src: "1998:2:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$36497";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 137671;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "2001:5:176";
                                readonly memberName: "label";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 35367;
                                readonly src: "1998:8:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$";
                                    readonly typeString: "function (address,string memory) external";
                                };
                            };
                            readonly id: 137674;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1998:21:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 137675;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1998:21:176";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 137679;
                                readonly name: "_user";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137649;
                                readonly src: "2037:5:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly hexValue: "3130303030";
                                readonly id: 137680;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "2044:11:176";
                                readonly subdenomination: "ether";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_10000000000000000000000_by_1";
                                    readonly typeString: "int_const 10000000000000000000000";
                                };
                                readonly value: "10000";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_rational_10000000000000000000000_by_1";
                                    readonly typeString: "int_const 10000000000000000000000";
                                }];
                                readonly expression: {
                                    readonly id: 137676;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 25385;
                                    readonly src: "2029:2:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$36497";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 137678;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "2032:4:176";
                                readonly memberName: "deal";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 36134;
                                readonly src: "2029:7:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (address,uint256) external";
                                };
                            };
                            readonly id: 137681;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2029:27:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 137682;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2029:27:176";
                    }];
                };
                readonly functionSelector: "507ffba5";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "createUser";
                readonly nameLocation: "1854:10:176";
                readonly parameters: {
                    readonly id: 137647;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 137646;
                        readonly mutability: "mutable";
                        readonly name: "name";
                        readonly nameLocation: "1879:4:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137684;
                        readonly src: "1865:18:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "memory";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_string_memory_ptr";
                            readonly typeString: "string";
                        };
                        readonly typeName: {
                            readonly id: 137645;
                            readonly name: "string";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "1865:6:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_string_storage_ptr";
                                readonly typeString: "string";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "1864:20:176";
                };
                readonly returnParameters: {
                    readonly id: 137650;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 137649;
                        readonly mutability: "mutable";
                        readonly name: "_user";
                        readonly nameLocation: "1909:5:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137684;
                        readonly src: "1901:13:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 137648;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "1901:7:176";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "1900:15:176";
                };
                readonly scope: 138011;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "public";
            }, {
                readonly id: 137707;
                readonly nodeType: "FunctionDefinition";
                readonly src: "2069:198:176";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 137706;
                    readonly nodeType: "Block";
                    readonly src: "2188:79:176";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 137697;
                                readonly name: "whale";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137686;
                                readonly src: "2219:5:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly id: 137698;
                                readonly name: "token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137689;
                                readonly src: "2226:5:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                    readonly typeString: "contract IERC20";
                                };
                            }, {
                                readonly arguments: readonly [{
                                    readonly id: 137701;
                                    readonly name: "whale";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137686;
                                    readonly src: "2249:5:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }];
                                    readonly expression: {
                                        readonly id: 137699;
                                        readonly name: "token";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137689;
                                        readonly src: "2233:5:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                            readonly typeString: "contract IERC20";
                                        };
                                    };
                                    readonly id: 137700;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "2239:9:176";
                                    readonly memberName: "balanceOf";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 6792;
                                    readonly src: "2233:15:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$";
                                        readonly typeString: "function (address) view external returns (uint256)";
                                    };
                                };
                                readonly id: 137702;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "2233:22:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }, {
                                readonly id: 137703;
                                readonly name: "to";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137691;
                                readonly src: "2257:2:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                    readonly typeString: "contract IERC20";
                                }, {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }, {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }];
                                readonly id: 137696;
                                readonly name: "whaleTransfer";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [137707, 137763];
                                readonly referencedDeclaration: 137763;
                                readonly src: "2205:13:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_contract$_IERC20_$6793_$_t_uint256_$_t_address_$returns$_t_uint256_$";
                                    readonly typeString: "function (address,contract IERC20,uint256,address) returns (uint256)";
                                };
                            };
                            readonly id: 137704;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2205:55:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly functionReturnParameters: 137695;
                        readonly id: 137705;
                        readonly nodeType: "Return";
                        readonly src: "2198:62:176";
                    }];
                };
                readonly functionSelector: "10716760";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "whaleTransfer";
                readonly nameLocation: "2078:13:176";
                readonly parameters: {
                    readonly id: 137692;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 137686;
                        readonly mutability: "mutable";
                        readonly name: "whale";
                        readonly nameLocation: "2109:5:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137707;
                        readonly src: "2101:13:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 137685;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "2101:7:176";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 137689;
                        readonly mutability: "mutable";
                        readonly name: "token";
                        readonly nameLocation: "2131:5:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137707;
                        readonly src: "2124:12:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IERC20_$6793";
                            readonly typeString: "contract IERC20";
                        };
                        readonly typeName: {
                            readonly id: 137688;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 137687;
                                readonly name: "IERC20";
                                readonly nameLocations: readonly ["2124:6:176"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 6793;
                                readonly src: "2124:6:176";
                            };
                            readonly referencedDeclaration: 6793;
                            readonly src: "2124:6:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                readonly typeString: "contract IERC20";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 137691;
                        readonly mutability: "mutable";
                        readonly name: "to";
                        readonly nameLocation: "2154:2:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137707;
                        readonly src: "2146:10:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 137690;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "2146:7:176";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "2091:71:176";
                };
                readonly returnParameters: {
                    readonly id: 137695;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 137694;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137707;
                        readonly src: "2179:7:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 137693;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "2179:7:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "2178:9:176";
                };
                readonly scope: 138011;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "public";
            }, {
                readonly id: 137763;
                readonly nodeType: "FunctionDefinition";
                readonly src: "2273:417:176";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 137762;
                    readonly nodeType: "Block";
                    readonly src: "2416:274:176";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [137722];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 137722;
                            readonly mutability: "mutable";
                            readonly name: "whaleBalance";
                            readonly nameLocation: "2434:12:176";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 137762;
                            readonly src: "2426:20:176";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                            readonly typeName: {
                                readonly id: 137721;
                                readonly name: "uint256";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "2426:7:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 137727;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly id: 137725;
                                readonly name: "whale";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137709;
                                readonly src: "2465:5:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }];
                                readonly expression: {
                                    readonly id: 137723;
                                    readonly name: "token";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137712;
                                    readonly src: "2449:5:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                        readonly typeString: "contract IERC20";
                                    };
                                };
                                readonly id: 137724;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "2455:9:176";
                                readonly memberName: "balanceOf";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 6792;
                                readonly src: "2449:15:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$";
                                    readonly typeString: "function (address) view external returns (uint256)";
                                };
                            };
                            readonly id: 137726;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2449:22:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "2426:45:176";
                    }, {
                        readonly condition: {
                            readonly commonType: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                            readonly id: 137730;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftExpression: {
                                readonly id: 137728;
                                readonly name: "amount";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137714;
                                readonly src: "2485:6:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "BinaryOperation";
                            readonly operator: ">";
                            readonly rightExpression: {
                                readonly id: 137729;
                                readonly name: "whaleBalance";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137722;
                                readonly src: "2494:12:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly src: "2485:21:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly id: 137734;
                        readonly nodeType: "IfStatement";
                        readonly src: "2481:56:176";
                        readonly trueBody: {
                            readonly errorCall: {
                                readonly arguments: readonly [];
                                readonly expression: {
                                    readonly argumentTypes: readonly [];
                                    readonly id: 137731;
                                    readonly name: "WhaleBalanceExceeded";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137495;
                                    readonly src: "2515:20:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_error_pure$__$returns$__$";
                                        readonly typeString: "function () pure";
                                    };
                                };
                                readonly id: 137732;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "2515:22:176";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_tuple$__$";
                                    readonly typeString: "tuple()";
                                };
                            };
                            readonly id: 137733;
                            readonly nodeType: "RevertStatement";
                            readonly src: "2508:29:176";
                        };
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [];
                            readonly expression: {
                                readonly argumentTypes: readonly [];
                                readonly expression: {
                                    readonly id: 137735;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 25385;
                                    readonly src: "2547:2:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$36497";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 137737;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "2550:9:176";
                                readonly memberName: "stopPrank";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 36117;
                                readonly src: "2547:12:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$__$returns$__$";
                                    readonly typeString: "function () external";
                                };
                            };
                            readonly id: 137738;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2547:14:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 137739;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2547:14:176";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 137743;
                                readonly name: "whale";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137709;
                                readonly src: "2585:5:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }];
                                readonly expression: {
                                    readonly id: 137740;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 25385;
                                    readonly src: "2571:2:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$36497";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 137742;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "2574:10:176";
                                readonly memberName: "startPrank";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 36100;
                                readonly src: "2571:13:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$returns$__$";
                                    readonly typeString: "function (address) external";
                                };
                            };
                            readonly id: 137744;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2571:20:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 137745;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2571:20:176";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 137749;
                                readonly name: "whale";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137709;
                                readonly src: "2609:5:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly hexValue: "31";
                                readonly id: 137750;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "2616:7:176";
                                readonly subdenomination: "ether";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_1000000000000000000_by_1";
                                    readonly typeString: "int_const 1000000000000000000";
                                };
                                readonly value: "1";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_rational_1000000000000000000_by_1";
                                    readonly typeString: "int_const 1000000000000000000";
                                }];
                                readonly expression: {
                                    readonly id: 137746;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 25385;
                                    readonly src: "2601:2:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$36497";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 137748;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "2604:4:176";
                                readonly memberName: "deal";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 36134;
                                readonly src: "2601:7:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (address,uint256) external";
                                };
                            };
                            readonly id: 137751;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2601:23:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 137752;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2601:23:176";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 137756;
                                readonly name: "to";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137716;
                                readonly src: "2649:2:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly id: 137757;
                                readonly name: "amount";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137714;
                                readonly src: "2653:6:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }];
                                readonly expression: {
                                    readonly id: 137753;
                                    readonly name: "token";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137712;
                                    readonly src: "2634:5:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                        readonly typeString: "contract IERC20";
                                    };
                                };
                                readonly id: 137755;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "2640:8:176";
                                readonly memberName: "transfer";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 6738;
                                readonly src: "2634:14:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$";
                                    readonly typeString: "function (address,uint256) external returns (bool)";
                                };
                            };
                            readonly id: 137758;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2634:26:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly id: 137759;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2634:26:176";
                    }, {
                        readonly expression: {
                            readonly id: 137760;
                            readonly name: "amount";
                            readonly nodeType: "Identifier";
                            readonly overloadedDeclarations: readonly [];
                            readonly referencedDeclaration: 137714;
                            readonly src: "2677:6:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly functionReturnParameters: 137720;
                        readonly id: 137761;
                        readonly nodeType: "Return";
                        readonly src: "2670:13:176";
                    }];
                };
                readonly functionSelector: "3e5e0d26";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "whaleTransfer";
                readonly nameLocation: "2282:13:176";
                readonly parameters: {
                    readonly id: 137717;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 137709;
                        readonly mutability: "mutable";
                        readonly name: "whale";
                        readonly nameLocation: "2313:5:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137763;
                        readonly src: "2305:13:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 137708;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "2305:7:176";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 137712;
                        readonly mutability: "mutable";
                        readonly name: "token";
                        readonly nameLocation: "2335:5:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137763;
                        readonly src: "2328:12:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IERC20_$6793";
                            readonly typeString: "contract IERC20";
                        };
                        readonly typeName: {
                            readonly id: 137711;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 137710;
                                readonly name: "IERC20";
                                readonly nameLocations: readonly ["2328:6:176"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 6793;
                                readonly src: "2328:6:176";
                            };
                            readonly referencedDeclaration: 6793;
                            readonly src: "2328:6:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                readonly typeString: "contract IERC20";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 137714;
                        readonly mutability: "mutable";
                        readonly name: "amount";
                        readonly nameLocation: "2358:6:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137763;
                        readonly src: "2350:14:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 137713;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "2350:7:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 137716;
                        readonly mutability: "mutable";
                        readonly name: "to";
                        readonly nameLocation: "2382:2:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137763;
                        readonly src: "2374:10:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 137715;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "2374:7:176";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "2295:95:176";
                };
                readonly returnParameters: {
                    readonly id: 137720;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 137719;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137763;
                        readonly src: "2407:7:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 137718;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "2407:7:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "2406:9:176";
                };
                readonly scope: 138011;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "public";
            }, {
                readonly id: 137828;
                readonly nodeType: "FunctionDefinition";
                readonly src: "2696:652:176";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 137827;
                    readonly nodeType: "Block";
                    readonly src: "2842:506:176";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [137777];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 137777;
                            readonly mutability: "mutable";
                            readonly name: "sourceBalance";
                            readonly nameLocation: "2860:13:176";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 137827;
                            readonly src: "2852:21:176";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                            readonly typeName: {
                                readonly id: 137776;
                                readonly name: "uint256";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "2852:7:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 137782;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly id: 137780;
                                readonly name: "source";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137770;
                                readonly src: "2892:6:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }];
                                readonly expression: {
                                    readonly id: 137778;
                                    readonly name: "token";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137768;
                                    readonly src: "2876:5:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                        readonly typeString: "contract IERC20";
                                    };
                                };
                                readonly id: 137779;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "2882:9:176";
                                readonly memberName: "balanceOf";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 6792;
                                readonly src: "2876:15:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$";
                                    readonly typeString: "function (address) view external returns (uint256)";
                                };
                            };
                            readonly id: 137781;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2876:23:176";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "2852:47:176";
                    }, {
                        readonly body: {
                            readonly id: 137825;
                            readonly nodeType: "Block";
                            readonly src: "2955:387:176";
                            readonly statements: readonly [{
                                readonly expression: {
                                    readonly arguments: readonly [{
                                        readonly id: 137795;
                                        readonly name: "source";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137770;
                                        readonly src: "3051:6:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        };
                                    }, {
                                        readonly id: 137796;
                                        readonly name: "token";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137768;
                                        readonly src: "3075:5:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                            readonly typeString: "contract IERC20";
                                        };
                                    }, {
                                        readonly commonType: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                        readonly id: 137800;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly leftExpression: {
                                            readonly id: 137797;
                                            readonly name: "sourceBalance";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137777;
                                            readonly src: "3098:13:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        };
                                        readonly nodeType: "BinaryOperation";
                                        readonly operator: "/";
                                        readonly rightExpression: {
                                            readonly expression: {
                                                readonly id: 137798;
                                                readonly name: "accounts";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: 137773;
                                                readonly src: "3114:8:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_array$_t_address_$dyn_memory_ptr";
                                                    readonly typeString: "address[] memory";
                                                };
                                            };
                                            readonly id: 137799;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly lValueRequested: false;
                                            readonly memberLocation: "3123:6:176";
                                            readonly memberName: "length";
                                            readonly nodeType: "MemberAccess";
                                            readonly src: "3114:15:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        };
                                        readonly src: "3098:31:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    }, {
                                        readonly baseExpression: {
                                            readonly id: 137801;
                                            readonly name: "accounts";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137773;
                                            readonly src: "3147:8:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_array$_t_address_$dyn_memory_ptr";
                                                readonly typeString: "address[] memory";
                                            };
                                        };
                                        readonly id: 137803;
                                        readonly indexExpression: {
                                            readonly id: 137802;
                                            readonly name: "i";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137784;
                                            readonly src: "3156:1:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        };
                                        readonly isConstant: false;
                                        readonly isLValue: true;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "IndexAccess";
                                        readonly src: "3147:11:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        }, {
                                            readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                            readonly typeString: "contract IERC20";
                                        }, {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        }, {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        }];
                                        readonly id: 137794;
                                        readonly name: "whaleTransfer";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [137707, 137763];
                                        readonly referencedDeclaration: 137763;
                                        readonly src: "3020:13:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_contract$_IERC20_$6793_$_t_uint256_$_t_address_$returns$_t_uint256_$";
                                            readonly typeString: "function (address,contract IERC20,uint256,address) returns (uint256)";
                                        };
                                    };
                                    readonly id: 137804;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "functionCall";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3020:152:176";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly id: 137805;
                                readonly nodeType: "ExpressionStatement";
                                readonly src: "3020:152:176";
                            }, {
                                readonly expression: {
                                    readonly arguments: readonly [{
                                        readonly baseExpression: {
                                            readonly id: 137809;
                                            readonly name: "accounts";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137773;
                                            readonly src: "3261:8:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_array$_t_address_$dyn_memory_ptr";
                                                readonly typeString: "address[] memory";
                                            };
                                        };
                                        readonly id: 137811;
                                        readonly indexExpression: {
                                            readonly id: 137810;
                                            readonly name: "i";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137784;
                                            readonly src: "3270:1:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        };
                                        readonly isConstant: false;
                                        readonly isLValue: true;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "IndexAccess";
                                        readonly src: "3261:11:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        }];
                                        readonly expression: {
                                            readonly id: 137806;
                                            readonly name: "vm";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 25385;
                                            readonly src: "3247:2:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_contract$_Vm_$36497";
                                                readonly typeString: "contract Vm";
                                            };
                                        };
                                        readonly id: 137808;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly memberLocation: "3250:10:176";
                                        readonly memberName: "startPrank";
                                        readonly nodeType: "MemberAccess";
                                        readonly referencedDeclaration: 36100;
                                        readonly src: "3247:13:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$returns$__$";
                                            readonly typeString: "function (address) external";
                                        };
                                    };
                                    readonly id: 137812;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "functionCall";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3247:26:176";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_tuple$__$";
                                        readonly typeString: "tuple()";
                                    };
                                };
                                readonly id: 137813;
                                readonly nodeType: "ExpressionStatement";
                                readonly src: "3247:26:176";
                            }, {
                                readonly expression: {
                                    readonly arguments: readonly [{
                                        readonly id: 137817;
                                        readonly name: "hyperdrive";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137765;
                                        readonly src: "3301:10:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        };
                                    }, {
                                        readonly expression: {
                                            readonly arguments: readonly [{
                                                readonly id: 137820;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: true;
                                                readonly lValueRequested: false;
                                                readonly nodeType: "ElementaryTypeNameExpression";
                                                readonly src: "3318:7:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_type$_t_uint256_$";
                                                    readonly typeString: "type(uint256)";
                                                };
                                                readonly typeName: {
                                                    readonly id: 137819;
                                                    readonly name: "uint256";
                                                    readonly nodeType: "ElementaryTypeName";
                                                    readonly src: "3318:7:176";
                                                    readonly typeDescriptions: {};
                                                };
                                            }];
                                            readonly expression: {
                                                readonly argumentTypes: readonly [{
                                                    readonly typeIdentifier: "t_type$_t_uint256_$";
                                                    readonly typeString: "type(uint256)";
                                                }];
                                                readonly id: 137818;
                                                readonly name: "type";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: -27;
                                                readonly src: "3313:4:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_function_metatype_pure$__$returns$__$";
                                                    readonly typeString: "function () pure";
                                                };
                                            };
                                            readonly id: 137821;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: true;
                                            readonly kind: "functionCall";
                                            readonly lValueRequested: false;
                                            readonly nameLocations: readonly [];
                                            readonly names: readonly [];
                                            readonly nodeType: "FunctionCall";
                                            readonly src: "3313:13:176";
                                            readonly tryCall: false;
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_magic_meta_type_t_uint256";
                                                readonly typeString: "type(uint256)";
                                            };
                                        };
                                        readonly id: 137822;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly memberLocation: "3327:3:176";
                                        readonly memberName: "max";
                                        readonly nodeType: "MemberAccess";
                                        readonly src: "3313:17:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        }, {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        }];
                                        readonly expression: {
                                            readonly id: 137814;
                                            readonly name: "token";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137768;
                                            readonly src: "3287:5:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                                readonly typeString: "contract IERC20";
                                            };
                                        };
                                        readonly id: 137816;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly memberLocation: "3293:7:176";
                                        readonly memberName: "approve";
                                        readonly nodeType: "MemberAccess";
                                        readonly referencedDeclaration: 6728;
                                        readonly src: "3287:13:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$";
                                            readonly typeString: "function (address,uint256) external returns (bool)";
                                        };
                                    };
                                    readonly id: 137823;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "functionCall";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3287:44:176";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bool";
                                        readonly typeString: "bool";
                                    };
                                };
                                readonly id: 137824;
                                readonly nodeType: "ExpressionStatement";
                                readonly src: "3287:44:176";
                            }];
                        };
                        readonly condition: {
                            readonly commonType: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                            readonly id: 137790;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftExpression: {
                                readonly id: 137787;
                                readonly name: "i";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137784;
                                readonly src: "2929:1:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "BinaryOperation";
                            readonly operator: "<";
                            readonly rightExpression: {
                                readonly expression: {
                                    readonly id: 137788;
                                    readonly name: "accounts";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137773;
                                    readonly src: "2933:8:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_array$_t_address_$dyn_memory_ptr";
                                        readonly typeString: "address[] memory";
                                    };
                                };
                                readonly id: 137789;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "2942:6:176";
                                readonly memberName: "length";
                                readonly nodeType: "MemberAccess";
                                readonly src: "2933:15:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly src: "2929:19:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly id: 137826;
                        readonly initializationExpression: {
                            readonly assignments: readonly [137784];
                            readonly declarations: readonly [{
                                readonly constant: false;
                                readonly id: 137784;
                                readonly mutability: "mutable";
                                readonly name: "i";
                                readonly nameLocation: "2922:1:176";
                                readonly nodeType: "VariableDeclaration";
                                readonly scope: 137826;
                                readonly src: "2914:9:176";
                                readonly stateVariable: false;
                                readonly storageLocation: "default";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                                readonly typeName: {
                                    readonly id: 137783;
                                    readonly name: "uint256";
                                    readonly nodeType: "ElementaryTypeName";
                                    readonly src: "2914:7:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly visibility: "internal";
                            }];
                            readonly id: 137786;
                            readonly initialValue: {
                                readonly hexValue: "30";
                                readonly id: 137785;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "2926:1:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_0_by_1";
                                    readonly typeString: "int_const 0";
                                };
                                readonly value: "0";
                            };
                            readonly nodeType: "VariableDeclarationStatement";
                            readonly src: "2914:13:176";
                        };
                        readonly loopExpression: {
                            readonly expression: {
                                readonly id: 137792;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly nodeType: "UnaryOperation";
                                readonly operator: "++";
                                readonly prefix: false;
                                readonly src: "2950:3:176";
                                readonly subExpression: {
                                    readonly id: 137791;
                                    readonly name: "i";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137784;
                                    readonly src: "2950:1:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly id: 137793;
                            readonly nodeType: "ExpressionStatement";
                            readonly src: "2950:3:176";
                        };
                        readonly nodeType: "ForStatement";
                        readonly src: "2909:433:176";
                    }];
                };
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "fundAccounts";
                readonly nameLocation: "2705:12:176";
                readonly parameters: {
                    readonly id: 137774;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 137765;
                        readonly mutability: "mutable";
                        readonly name: "hyperdrive";
                        readonly nameLocation: "2735:10:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137828;
                        readonly src: "2727:18:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 137764;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "2727:7:176";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 137768;
                        readonly mutability: "mutable";
                        readonly name: "token";
                        readonly nameLocation: "2762:5:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137828;
                        readonly src: "2755:12:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IERC20_$6793";
                            readonly typeString: "contract IERC20";
                        };
                        readonly typeName: {
                            readonly id: 137767;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 137766;
                                readonly name: "IERC20";
                                readonly nameLocations: readonly ["2755:6:176"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 6793;
                                readonly src: "2755:6:176";
                            };
                            readonly referencedDeclaration: 6793;
                            readonly src: "2755:6:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IERC20_$6793";
                                readonly typeString: "contract IERC20";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 137770;
                        readonly mutability: "mutable";
                        readonly name: "source";
                        readonly nameLocation: "2785:6:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137828;
                        readonly src: "2777:14:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 137769;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "2777:7:176";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 137773;
                        readonly mutability: "mutable";
                        readonly name: "accounts";
                        readonly nameLocation: "2818:8:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 137828;
                        readonly src: "2801:25:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "memory";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_array$_t_address_$dyn_memory_ptr";
                            readonly typeString: "address[]";
                        };
                        readonly typeName: {
                            readonly baseType: {
                                readonly id: 137771;
                                readonly name: "address";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "2801:7:176";
                                readonly stateMutability: "nonpayable";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly id: 137772;
                            readonly nodeType: "ArrayTypeName";
                            readonly src: "2801:9:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_array$_t_address_$dyn_storage_ptr";
                                readonly typeString: "address[]";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "2717:115:176";
                };
                readonly returnParameters: {
                    readonly id: 137775;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "2842:0:176";
                };
                readonly scope: 138011;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "internal";
            }, {
                readonly id: 138010;
                readonly nodeType: "FunctionDefinition";
                readonly src: "3354:2306:176";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 138009;
                    readonly nodeType: "Block";
                    readonly src: "3469:2191:176";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [137838];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 137838;
                            readonly mutability: "mutable";
                            readonly name: "positiveDelta";
                            readonly nameLocation: "3484:13:176";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 138009;
                            readonly src: "3479:18:176";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                            readonly typeName: {
                                readonly id: 137837;
                                readonly name: "bool";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "3479:4:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 137842;
                        readonly initialValue: {
                            readonly commonType: {
                                readonly typeIdentifier: "t_int256";
                                readonly typeString: "int256";
                            };
                            readonly id: 137841;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftExpression: {
                                readonly id: 137839;
                                readonly name: "_delta";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137832;
                                readonly src: "3500:6:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_int256";
                                    readonly typeString: "int256";
                                };
                            };
                            readonly nodeType: "BinaryOperation";
                            readonly operator: ">=";
                            readonly rightExpression: {
                                readonly hexValue: "30";
                                readonly id: 137840;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "3510:1:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_0_by_1";
                                    readonly typeString: "int_const 0";
                                };
                                readonly value: "0";
                            };
                            readonly src: "3500:11:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "3479:32:176";
                    }, {
                        readonly condition: {
                            readonly id: 137843;
                            readonly name: "positiveDelta";
                            readonly nodeType: "Identifier";
                            readonly overloadedDeclarations: readonly [];
                            readonly referencedDeclaration: 137838;
                            readonly src: "3526:13:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly falseBody: {
                            readonly id: 137859;
                            readonly nodeType: "Block";
                            readonly src: "3710:147:176";
                            readonly statements: readonly [{
                                readonly expression: {
                                    readonly arguments: readonly [{
                                        readonly commonType: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                        readonly id: 137855;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly leftExpression: {
                                            readonly id: 137853;
                                            readonly name: "_value";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137830;
                                            readonly src: "3752:6:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        };
                                        readonly nodeType: "BinaryOperation";
                                        readonly operator: ">";
                                        readonly rightExpression: {
                                            readonly id: 137854;
                                            readonly name: "_targetValue";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137834;
                                            readonly src: "3761:12:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        };
                                        readonly src: "3752:21:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_bool";
                                            readonly typeString: "bool";
                                        };
                                    }, {
                                        readonly hexValue: "5f74617267657456616c75652073686f756c64206265206c657373207468616e205f76616c7565";
                                        readonly id: 137856;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly kind: "string";
                                        readonly lValueRequested: false;
                                        readonly nodeType: "Literal";
                                        readonly src: "3791:41:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_stringliteral_520eab8533ee45bc50887e85296a56c1f16ed1addbac7e9715c9469ee5a0060b";
                                            readonly typeString: "literal_string \"_targetValue should be less than _value\"";
                                        };
                                        readonly value: "_targetValue should be less than _value";
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_bool";
                                            readonly typeString: "bool";
                                        }, {
                                            readonly typeIdentifier: "t_stringliteral_520eab8533ee45bc50887e85296a56c1f16ed1addbac7e9715c9469ee5a0060b";
                                            readonly typeString: "literal_string \"_targetValue should be less than _value\"";
                                        }];
                                        readonly id: 137852;
                                        readonly name: "assertTrue";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [23304, 23325];
                                        readonly referencedDeclaration: 23325;
                                        readonly src: "3724:10:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_function_internal_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$";
                                            readonly typeString: "function (bool,string memory)";
                                        };
                                    };
                                    readonly id: 137857;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "functionCall";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3724:122:176";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_tuple$__$";
                                        readonly typeString: "tuple()";
                                    };
                                };
                                readonly id: 137858;
                                readonly nodeType: "ExpressionStatement";
                                readonly src: "3724:122:176";
                            }];
                        };
                        readonly id: 137860;
                        readonly nodeType: "IfStatement";
                        readonly src: "3522:335:176";
                        readonly trueBody: {
                            readonly id: 137851;
                            readonly nodeType: "Block";
                            readonly src: "3541:163:176";
                            readonly statements: readonly [{
                                readonly expression: {
                                    readonly arguments: readonly [{
                                        readonly commonType: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                        readonly id: 137847;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly leftExpression: {
                                            readonly id: 137845;
                                            readonly name: "_targetValue";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137834;
                                            readonly src: "3583:12:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        };
                                        readonly nodeType: "BinaryOperation";
                                        readonly operator: ">=";
                                        readonly rightExpression: {
                                            readonly id: 137846;
                                            readonly name: "_value";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137830;
                                            readonly src: "3599:6:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        };
                                        readonly src: "3583:22:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_bool";
                                            readonly typeString: "bool";
                                        };
                                    }, {
                                        readonly hexValue: "5f74617267657456616c75652073686f756c642062652067726561746572207468616e206f7220657175616c20746f205f76616c7565";
                                        readonly id: 137848;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly kind: "string";
                                        readonly lValueRequested: false;
                                        readonly nodeType: "Literal";
                                        readonly src: "3623:56:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_stringliteral_f7050007ca2461e33e80d72cbf8bb663668571af8430a73fbacc5043a4ddfa1a";
                                            readonly typeString: "literal_string \"_targetValue should be greater than or equal to _value\"";
                                        };
                                        readonly value: "_targetValue should be greater than or equal to _value";
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_bool";
                                            readonly typeString: "bool";
                                        }, {
                                            readonly typeIdentifier: "t_stringliteral_f7050007ca2461e33e80d72cbf8bb663668571af8430a73fbacc5043a4ddfa1a";
                                            readonly typeString: "literal_string \"_targetValue should be greater than or equal to _value\"";
                                        }];
                                        readonly id: 137844;
                                        readonly name: "assertTrue";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [23304, 23325];
                                        readonly referencedDeclaration: 23325;
                                        readonly src: "3555:10:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_function_internal_nonpayable$_t_bool_$_t_string_memory_ptr_$returns$__$";
                                            readonly typeString: "function (bool,string memory)";
                                        };
                                    };
                                    readonly id: 137849;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "functionCall";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3555:138:176";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_tuple$__$";
                                        readonly typeString: "tuple()";
                                    };
                                };
                                readonly id: 137850;
                                readonly nodeType: "ExpressionStatement";
                                readonly src: "3555:138:176";
                            }];
                        };
                    }, {
                        readonly assignments: readonly [137862];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 137862;
                            readonly mutability: "mutable";
                            readonly name: "upperBound";
                            readonly nameLocation: "3875:10:176";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 138009;
                            readonly src: "3867:18:176";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                            readonly typeName: {
                                readonly id: 137861;
                                readonly name: "uint256";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "3867:7:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 137872;
                        readonly initialValue: {
                            readonly condition: {
                                readonly id: 137863;
                                readonly name: "positiveDelta";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137838;
                                readonly src: "3888:13:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                            };
                            readonly falseExpression: {
                                readonly id: 137870;
                                readonly name: "_value";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137830;
                                readonly src: "3931:6:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly id: 137871;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly nodeType: "Conditional";
                            readonly src: "3888:49:176";
                            readonly trueExpression: {
                                readonly commonType: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                                readonly id: 137869;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly leftExpression: {
                                    readonly id: 137864;
                                    readonly name: "_value";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137830;
                                    readonly src: "3904:6:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly nodeType: "BinaryOperation";
                                readonly operator: "+";
                                readonly rightExpression: {
                                    readonly arguments: readonly [{
                                        readonly id: 137867;
                                        readonly name: "_delta";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137832;
                                        readonly src: "3921:6:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_int256";
                                            readonly typeString: "int256";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_int256";
                                            readonly typeString: "int256";
                                        }];
                                        readonly id: 137866;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "3913:7:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_uint256_$";
                                            readonly typeString: "type(uint256)";
                                        };
                                        readonly typeName: {
                                            readonly id: 137865;
                                            readonly name: "uint256";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "3913:7:176";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 137868;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3913:15:176";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly src: "3904:24:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "3867:70:176";
                    }, {
                        readonly assignments: readonly [137874];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 137874;
                            readonly mutability: "mutable";
                            readonly name: "lowerBound";
                            readonly nameLocation: "3955:10:176";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 138009;
                            readonly src: "3947:18:176";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                            readonly typeName: {
                                readonly id: 137873;
                                readonly name: "uint256";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "3947:7:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 137886;
                        readonly initialValue: {
                            readonly condition: {
                                readonly id: 137876;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly nodeType: "UnaryOperation";
                                readonly operator: "!";
                                readonly prefix: true;
                                readonly src: "3968:14:176";
                                readonly subExpression: {
                                    readonly id: 137875;
                                    readonly name: "positiveDelta";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137838;
                                    readonly src: "3969:13:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bool";
                                        readonly typeString: "bool";
                                    };
                                };
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                            };
                            readonly falseExpression: {
                                readonly id: 137884;
                                readonly name: "_value";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 137830;
                                readonly src: "4037:6:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly id: 137885;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly nodeType: "Conditional";
                            readonly src: "3968:75:176";
                            readonly trueExpression: {
                                readonly commonType: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                                readonly id: 137883;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly leftExpression: {
                                    readonly id: 137877;
                                    readonly name: "_value";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137830;
                                    readonly src: "3997:6:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly nodeType: "BinaryOperation";
                                readonly operator: "-";
                                readonly rightExpression: {
                                    readonly arguments: readonly [{
                                        readonly id: 137881;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "UnaryOperation";
                                        readonly operator: "-";
                                        readonly prefix: true;
                                        readonly src: "4014:7:176";
                                        readonly subExpression: {
                                            readonly id: 137880;
                                            readonly name: "_delta";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137832;
                                            readonly src: "4015:6:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_int256";
                                                readonly typeString: "int256";
                                            };
                                        };
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_int256";
                                            readonly typeString: "int256";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_int256";
                                            readonly typeString: "int256";
                                        }];
                                        readonly id: 137879;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "4006:7:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_uint256_$";
                                            readonly typeString: "type(uint256)";
                                        };
                                        readonly typeName: {
                                            readonly id: 137878;
                                            readonly name: "uint256";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "4006:7:176";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 137882;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "4006:16:176";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly src: "3997:25:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "3947:96:176";
                    }, {
                        readonly condition: {
                            readonly commonType: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                            readonly id: 137893;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftExpression: {
                                readonly commonType: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                                readonly id: 137889;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly leftExpression: {
                                    readonly id: 137887;
                                    readonly name: "_targetValue";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137834;
                                    readonly src: "4106:12:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly nodeType: "BinaryOperation";
                                readonly operator: "<";
                                readonly rightExpression: {
                                    readonly id: 137888;
                                    readonly name: "lowerBound";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137874;
                                    readonly src: "4121:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly src: "4106:25:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                            };
                            readonly nodeType: "BinaryOperation";
                            readonly operator: "||";
                            readonly rightExpression: {
                                readonly commonType: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                                readonly id: 137892;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly leftExpression: {
                                    readonly id: 137890;
                                    readonly name: "_targetValue";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137834;
                                    readonly src: "4135:12:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly nodeType: "BinaryOperation";
                                readonly operator: ">";
                                readonly rightExpression: {
                                    readonly id: 137891;
                                    readonly name: "upperBound";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 137862;
                                    readonly src: "4150:10:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly src: "4135:25:176";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                            };
                            readonly src: "4106:54:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly id: 137908;
                        readonly nodeType: "IfStatement";
                        readonly src: "4102:233:176";
                        readonly trueBody: {
                            readonly id: 137907;
                            readonly nodeType: "Block";
                            readonly src: "4162:173:176";
                            readonly statements: readonly [{
                                readonly expression: {
                                    readonly arguments: readonly [{
                                        readonly id: 137895;
                                        readonly name: "_targetValue";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137834;
                                        readonly src: "4185:12:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    }, {
                                        readonly id: 137896;
                                        readonly name: "lowerBound";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137874;
                                        readonly src: "4199:10:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    }, {
                                        readonly hexValue: "65786365656473206c6f77657220626f756e64";
                                        readonly id: 137897;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly kind: "string";
                                        readonly lValueRequested: false;
                                        readonly nodeType: "Literal";
                                        readonly src: "4211:21:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_stringliteral_af6d7b00130ed4cdb18a01d1b6dccfe1585f010dd30e225dfb4bb315d78b6fcc";
                                            readonly typeString: "literal_string \"exceeds lower bound\"";
                                        };
                                        readonly value: "exceeds lower bound";
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        }, {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        }, {
                                            readonly typeIdentifier: "t_stringliteral_af6d7b00130ed4cdb18a01d1b6dccfe1585f010dd30e225dfb4bb315d78b6fcc";
                                            readonly typeString: "literal_string \"exceeds lower bound\"";
                                        }];
                                        readonly id: 137894;
                                        readonly name: "assertGe";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [24335, 24360, 24390, 24415];
                                        readonly referencedDeclaration: 24360;
                                        readonly src: "4176:8:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$";
                                            readonly typeString: "function (uint256,uint256,string memory)";
                                        };
                                    };
                                    readonly id: 137898;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "functionCall";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "4176:57:176";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_tuple$__$";
                                        readonly typeString: "tuple()";
                                    };
                                };
                                readonly id: 137899;
                                readonly nodeType: "ExpressionStatement";
                                readonly src: "4176:57:176";
                            }, {
                                readonly expression: {
                                    readonly arguments: readonly [{
                                        readonly id: 137901;
                                        readonly name: "_targetValue";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137834;
                                        readonly src: "4256:12:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    }, {
                                        readonly id: 137902;
                                        readonly name: "upperBound";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137862;
                                        readonly src: "4270:10:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    }, {
                                        readonly hexValue: "6578636565647320757070657220626f756e64";
                                        readonly id: 137903;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly kind: "string";
                                        readonly lValueRequested: false;
                                        readonly nodeType: "Literal";
                                        readonly src: "4282:21:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_stringliteral_17d32119455d0fca8c97da4db2e67c5bf76e89f27536451063da70cbfef7889c";
                                            readonly typeString: "literal_string \"exceeds upper bound\"";
                                        };
                                        readonly value: "exceeds upper bound";
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        }, {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        }, {
                                            readonly typeIdentifier: "t_stringliteral_17d32119455d0fca8c97da4db2e67c5bf76e89f27536451063da70cbfef7889c";
                                            readonly typeString: "literal_string \"exceeds upper bound\"";
                                        }];
                                        readonly id: 137900;
                                        readonly name: "assertLe";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [24803, 24828, 24858, 24883];
                                        readonly referencedDeclaration: 24828;
                                        readonly src: "4247:8:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$";
                                            readonly typeString: "function (uint256,uint256,string memory)";
                                        };
                                    };
                                    readonly id: 137904;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "functionCall";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "4247:57:176";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_tuple$__$";
                                        readonly typeString: "tuple()";
                                    };
                                };
                                readonly id: 137905;
                                readonly nodeType: "ExpressionStatement";
                                readonly src: "4247:57:176";
                            }, {
                                readonly functionReturnParameters: 137836;
                                readonly id: 137906;
                                readonly nodeType: "Return";
                                readonly src: "4318:7:176";
                            }];
                        };
                    }, {
                        readonly condition: {
                            readonly id: 137909;
                            readonly name: "positiveDelta";
                            readonly nodeType: "Identifier";
                            readonly overloadedDeclarations: readonly [];
                            readonly referencedDeclaration: 137838;
                            readonly src: "4432:13:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly falseBody: {
                            readonly id: 138007;
                            readonly nodeType: "Block";
                            readonly src: "5052:602:176";
                            readonly statements: readonly [{
                                readonly assignments: readonly [137959];
                                readonly declarations: readonly [{
                                    readonly constant: false;
                                    readonly id: 137959;
                                    readonly mutability: "mutable";
                                    readonly name: "valueToTarget";
                                    readonly nameLocation: "5074:13:176";
                                    readonly nodeType: "VariableDeclaration";
                                    readonly scope: 138007;
                                    readonly src: "5066:21:176";
                                    readonly stateVariable: false;
                                    readonly storageLocation: "default";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                    readonly typeName: {
                                        readonly id: 137958;
                                        readonly name: "uint256";
                                        readonly nodeType: "ElementaryTypeName";
                                        readonly src: "5066:7:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    };
                                    readonly visibility: "internal";
                                }];
                                readonly id: 137963;
                                readonly initialValue: {
                                    readonly commonType: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                    readonly id: 137962;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly leftExpression: {
                                        readonly id: 137960;
                                        readonly name: "_value";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137830;
                                        readonly src: "5090:6:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    };
                                    readonly nodeType: "BinaryOperation";
                                    readonly operator: "-";
                                    readonly rightExpression: {
                                        readonly id: 137961;
                                        readonly name: "_targetValue";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137834;
                                        readonly src: "5099:12:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    };
                                    readonly src: "5090:21:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly nodeType: "VariableDeclarationStatement";
                                readonly src: "5066:45:176";
                            }, {
                                readonly condition: {
                                    readonly commonType: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                    readonly id: 137970;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly leftExpression: {
                                        readonly id: 137964;
                                        readonly name: "valueToTarget";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137959;
                                        readonly src: "5129:13:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    };
                                    readonly nodeType: "BinaryOperation";
                                    readonly operator: "<";
                                    readonly rightExpression: {
                                        readonly arguments: readonly [{
                                            readonly id: 137968;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly lValueRequested: false;
                                            readonly nodeType: "UnaryOperation";
                                            readonly operator: "-";
                                            readonly prefix: true;
                                            readonly src: "5153:7:176";
                                            readonly subExpression: {
                                                readonly id: 137967;
                                                readonly name: "_delta";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: 137832;
                                                readonly src: "5154:6:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_int256";
                                                    readonly typeString: "int256";
                                                };
                                            };
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_int256";
                                                readonly typeString: "int256";
                                            };
                                        }];
                                        readonly expression: {
                                            readonly argumentTypes: readonly [{
                                                readonly typeIdentifier: "t_int256";
                                                readonly typeString: "int256";
                                            }];
                                            readonly id: 137966;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: true;
                                            readonly lValueRequested: false;
                                            readonly nodeType: "ElementaryTypeNameExpression";
                                            readonly src: "5145:7:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_type$_t_uint256_$";
                                                readonly typeString: "type(uint256)";
                                            };
                                            readonly typeName: {
                                                readonly id: 137965;
                                                readonly name: "uint256";
                                                readonly nodeType: "ElementaryTypeName";
                                                readonly src: "5145:7:176";
                                                readonly typeDescriptions: {};
                                            };
                                        };
                                        readonly id: 137969;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly kind: "typeConversion";
                                        readonly lValueRequested: false;
                                        readonly nameLocations: readonly [];
                                        readonly names: readonly [];
                                        readonly nodeType: "FunctionCall";
                                        readonly src: "5145:16:176";
                                        readonly tryCall: false;
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    };
                                    readonly src: "5129:32:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bool";
                                        readonly typeString: "bool";
                                    };
                                };
                                readonly falseBody: {
                                    readonly id: 138005;
                                    readonly nodeType: "Block";
                                    readonly src: "5454:190:176";
                                    readonly statements: readonly [{
                                        readonly expression: {
                                            readonly arguments: readonly [{
                                                readonly id: 138000;
                                                readonly name: "lowerBound";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: 137874;
                                                readonly src: "5502:10:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                };
                                            }, {
                                                readonly id: 138001;
                                                readonly name: "_targetValue";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: 137834;
                                                readonly src: "5534:12:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                };
                                            }, {
                                                readonly hexValue: "6578706563746564206c6f776572426f756e6420746f206d61746368205f74617267657456616c7565";
                                                readonly id: 138002;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: true;
                                                readonly kind: "string";
                                                readonly lValueRequested: false;
                                                readonly nodeType: "Literal";
                                                readonly src: "5568:43:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_stringliteral_58e0b3c45705bb69ca54ddd328b366caa309cedfe00905c9d436c904d720fae2";
                                                    readonly typeString: "literal_string \"expected lowerBound to match _targetValue\"";
                                                };
                                                readonly value: "expected lowerBound to match _targetValue";
                                            }];
                                            readonly expression: {
                                                readonly argumentTypes: readonly [{
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                }, {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                }, {
                                                    readonly typeIdentifier: "t_stringliteral_58e0b3c45705bb69ca54ddd328b366caa309cedfe00905c9d436c904d720fae2";
                                                    readonly typeString: "literal_string \"expected lowerBound to match _targetValue\"";
                                                }];
                                                readonly id: 137999;
                                                readonly name: "assertEq";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [25520, 25545, 25558, 25574, 25616, 25658, 25700, 25737, 25774, 25811, 23355, 23380, 23410, 23435, 23494, 23519, 23549, 23574, 25047, 25082];
                                                readonly referencedDeclaration: 23574;
                                                readonly src: "5472:8:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$";
                                                    readonly typeString: "function (uint256,uint256,string memory)";
                                                };
                                            };
                                            readonly id: 138003;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly kind: "functionCall";
                                            readonly lValueRequested: false;
                                            readonly nameLocations: readonly [];
                                            readonly names: readonly [];
                                            readonly nodeType: "FunctionCall";
                                            readonly src: "5472:157:176";
                                            readonly tryCall: false;
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_tuple$__$";
                                                readonly typeString: "tuple()";
                                            };
                                        };
                                        readonly id: 138004;
                                        readonly nodeType: "ExpressionStatement";
                                        readonly src: "5472:157:176";
                                    }];
                                };
                                readonly id: 138006;
                                readonly nodeType: "IfStatement";
                                readonly src: "5125:519:176";
                                readonly trueBody: {
                                    readonly id: 137998;
                                    readonly nodeType: "Block";
                                    readonly src: "5163:285:176";
                                    readonly statements: readonly [{
                                        readonly expression: {
                                            readonly arguments: readonly [{
                                                readonly hexValue: "507265636973696f6e20696e637265617365642062793a202573";
                                                readonly id: 137974;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: true;
                                                readonly kind: "string";
                                                readonly lValueRequested: false;
                                                readonly nodeType: "Literal";
                                                readonly src: "5215:28:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_stringliteral_992ae0d874c221b70ae98d8a7340fa1a652248f4e9a0b5fb589214bcfadd33cb";
                                                    readonly typeString: "literal_string \"Precision increased by: %s\"";
                                                };
                                                readonly value: "Precision increased by: %s";
                                            }, {
                                                readonly commonType: {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                };
                                                readonly id: 137981;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: false;
                                                readonly lValueRequested: false;
                                                readonly leftExpression: {
                                                    readonly arguments: readonly [{
                                                        readonly id: 137978;
                                                        readonly isConstant: false;
                                                        readonly isLValue: false;
                                                        readonly isPure: false;
                                                        readonly lValueRequested: false;
                                                        readonly nodeType: "UnaryOperation";
                                                        readonly operator: "-";
                                                        readonly prefix: true;
                                                        readonly src: "5273:7:176";
                                                        readonly subExpression: {
                                                            readonly id: 137977;
                                                            readonly name: "_delta";
                                                            readonly nodeType: "Identifier";
                                                            readonly overloadedDeclarations: readonly [];
                                                            readonly referencedDeclaration: 137832;
                                                            readonly src: "5274:6:176";
                                                            readonly typeDescriptions: {
                                                                readonly typeIdentifier: "t_int256";
                                                                readonly typeString: "int256";
                                                            };
                                                        };
                                                        readonly typeDescriptions: {
                                                            readonly typeIdentifier: "t_int256";
                                                            readonly typeString: "int256";
                                                        };
                                                    }];
                                                    readonly expression: {
                                                        readonly argumentTypes: readonly [{
                                                            readonly typeIdentifier: "t_int256";
                                                            readonly typeString: "int256";
                                                        }];
                                                        readonly id: 137976;
                                                        readonly isConstant: false;
                                                        readonly isLValue: false;
                                                        readonly isPure: true;
                                                        readonly lValueRequested: false;
                                                        readonly nodeType: "ElementaryTypeNameExpression";
                                                        readonly src: "5265:7:176";
                                                        readonly typeDescriptions: {
                                                            readonly typeIdentifier: "t_type$_t_uint256_$";
                                                            readonly typeString: "type(uint256)";
                                                        };
                                                        readonly typeName: {
                                                            readonly id: 137975;
                                                            readonly name: "uint256";
                                                            readonly nodeType: "ElementaryTypeName";
                                                            readonly src: "5265:7:176";
                                                            readonly typeDescriptions: {};
                                                        };
                                                    };
                                                    readonly id: 137979;
                                                    readonly isConstant: false;
                                                    readonly isLValue: false;
                                                    readonly isPure: false;
                                                    readonly kind: "typeConversion";
                                                    readonly lValueRequested: false;
                                                    readonly nameLocations: readonly [];
                                                    readonly names: readonly [];
                                                    readonly nodeType: "FunctionCall";
                                                    readonly src: "5265:16:176";
                                                    readonly tryCall: false;
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_uint256";
                                                        readonly typeString: "uint256";
                                                    };
                                                };
                                                readonly nodeType: "BinaryOperation";
                                                readonly operator: "-";
                                                readonly rightExpression: {
                                                    readonly id: 137980;
                                                    readonly name: "valueToTarget";
                                                    readonly nodeType: "Identifier";
                                                    readonly overloadedDeclarations: readonly [];
                                                    readonly referencedDeclaration: 137959;
                                                    readonly src: "5284:13:176";
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_uint256";
                                                        readonly typeString: "uint256";
                                                    };
                                                };
                                                readonly src: "5265:32:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                };
                                            }];
                                            readonly expression: {
                                                readonly argumentTypes: readonly [{
                                                    readonly typeIdentifier: "t_stringliteral_992ae0d874c221b70ae98d8a7340fa1a652248f4e9a0b5fb589214bcfadd33cb";
                                                    readonly typeString: "literal_string \"Precision increased by: %s\"";
                                                }, {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                }];
                                                readonly expression: {
                                                    readonly id: 137971;
                                                    readonly name: "console2";
                                                    readonly nodeType: "Identifier";
                                                    readonly overloadedDeclarations: readonly [];
                                                    readonly referencedDeclaration: 52686;
                                                    readonly src: "5181:8:176";
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_type$_t_contract$_console2_$52686_$";
                                                        readonly typeString: "type(library console2)";
                                                    };
                                                };
                                                readonly id: 137973;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: false;
                                                readonly lValueRequested: false;
                                                readonly memberLocation: "5190:3:176";
                                                readonly memberName: "log";
                                                readonly nodeType: "MemberAccess";
                                                readonly referencedDeclaration: 45313;
                                                readonly src: "5181:12:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$__$";
                                                    readonly typeString: "function (string memory,uint256) pure";
                                                };
                                            };
                                            readonly id: 137982;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly kind: "functionCall";
                                            readonly lValueRequested: false;
                                            readonly nameLocations: readonly [];
                                            readonly names: readonly [];
                                            readonly nodeType: "FunctionCall";
                                            readonly src: "5181:134:176";
                                            readonly tryCall: false;
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_tuple$__$";
                                                readonly typeString: "tuple()";
                                            };
                                        };
                                        readonly id: 137983;
                                        readonly nodeType: "ExpressionStatement";
                                        readonly src: "5181:134:176";
                                    }, {
                                        readonly expression: {
                                            readonly arguments: readonly [{
                                                readonly hexValue: "4f6c642044656c74613a202573";
                                                readonly id: 137987;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: true;
                                                readonly kind: "string";
                                                readonly lValueRequested: false;
                                                readonly nodeType: "Literal";
                                                readonly src: "5346:15:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_stringliteral_fa453bca1a92cc399684afff33f3a00b1d9a24b48eefa69562addd64132631a2";
                                                    readonly typeString: "literal_string \"Old Delta: %s\"";
                                                };
                                                readonly value: "Old Delta: %s";
                                            }, {
                                                readonly id: 137988;
                                                readonly name: "_delta";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: 137832;
                                                readonly src: "5363:6:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_int256";
                                                    readonly typeString: "int256";
                                                };
                                            }];
                                            readonly expression: {
                                                readonly argumentTypes: readonly [{
                                                    readonly typeIdentifier: "t_stringliteral_fa453bca1a92cc399684afff33f3a00b1d9a24b48eefa69562addd64132631a2";
                                                    readonly typeString: "literal_string \"Old Delta: %s\"";
                                                }, {
                                                    readonly typeIdentifier: "t_int256";
                                                    readonly typeString: "int256";
                                                }];
                                                readonly expression: {
                                                    readonly id: 137984;
                                                    readonly name: "console2";
                                                    readonly nodeType: "Identifier";
                                                    readonly overloadedDeclarations: readonly [];
                                                    readonly referencedDeclaration: 52686;
                                                    readonly src: "5333:8:176";
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_type$_t_contract$_console2_$52686_$";
                                                        readonly typeString: "type(library console2)";
                                                    };
                                                };
                                                readonly id: 137986;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: false;
                                                readonly lValueRequested: false;
                                                readonly memberLocation: "5342:3:176";
                                                readonly memberName: "log";
                                                readonly nodeType: "MemberAccess";
                                                readonly referencedDeclaration: 45330;
                                                readonly src: "5333:12:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_function_internal_pure$_t_string_memory_ptr_$_t_int256_$returns$__$";
                                                    readonly typeString: "function (string memory,int256) pure";
                                                };
                                            };
                                            readonly id: 137989;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly kind: "functionCall";
                                            readonly lValueRequested: false;
                                            readonly nameLocations: readonly [];
                                            readonly names: readonly [];
                                            readonly nodeType: "FunctionCall";
                                            readonly src: "5333:37:176";
                                            readonly tryCall: false;
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_tuple$__$";
                                                readonly typeString: "tuple()";
                                            };
                                        };
                                        readonly id: 137990;
                                        readonly nodeType: "ExpressionStatement";
                                        readonly src: "5333:37:176";
                                    }, {
                                        readonly expression: {
                                            readonly arguments: readonly [{
                                                readonly hexValue: "4e65772044656c74613a202d2573";
                                                readonly id: 137994;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: true;
                                                readonly kind: "string";
                                                readonly lValueRequested: false;
                                                readonly nodeType: "Literal";
                                                readonly src: "5401:16:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_stringliteral_0681e59e25bdb1e7de683de9bda30e43aa32b09112d8dff7cf570d85a394c8de";
                                                    readonly typeString: "literal_string \"New Delta: -%s\"";
                                                };
                                                readonly value: "New Delta: -%s";
                                            }, {
                                                readonly id: 137995;
                                                readonly name: "valueToTarget";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: 137959;
                                                readonly src: "5419:13:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                };
                                            }];
                                            readonly expression: {
                                                readonly argumentTypes: readonly [{
                                                    readonly typeIdentifier: "t_stringliteral_0681e59e25bdb1e7de683de9bda30e43aa32b09112d8dff7cf570d85a394c8de";
                                                    readonly typeString: "literal_string \"New Delta: -%s\"";
                                                }, {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                }];
                                                readonly expression: {
                                                    readonly id: 137991;
                                                    readonly name: "console2";
                                                    readonly nodeType: "Identifier";
                                                    readonly overloadedDeclarations: readonly [];
                                                    readonly referencedDeclaration: 52686;
                                                    readonly src: "5388:8:176";
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_type$_t_contract$_console2_$52686_$";
                                                        readonly typeString: "type(library console2)";
                                                    };
                                                };
                                                readonly id: 137993;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: false;
                                                readonly lValueRequested: false;
                                                readonly memberLocation: "5397:3:176";
                                                readonly memberName: "log";
                                                readonly nodeType: "MemberAccess";
                                                readonly referencedDeclaration: 45313;
                                                readonly src: "5388:12:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$__$";
                                                    readonly typeString: "function (string memory,uint256) pure";
                                                };
                                            };
                                            readonly id: 137996;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly kind: "functionCall";
                                            readonly lValueRequested: false;
                                            readonly nameLocations: readonly [];
                                            readonly names: readonly [];
                                            readonly nodeType: "FunctionCall";
                                            readonly src: "5388:45:176";
                                            readonly tryCall: false;
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_tuple$__$";
                                                readonly typeString: "tuple()";
                                            };
                                        };
                                        readonly id: 137997;
                                        readonly nodeType: "ExpressionStatement";
                                        readonly src: "5388:45:176";
                                    }];
                                };
                            }];
                        };
                        readonly id: 138008;
                        readonly nodeType: "IfStatement";
                        readonly src: "4428:1226:176";
                        readonly trueBody: {
                            readonly id: 137957;
                            readonly nodeType: "Block";
                            readonly src: "4447:599:176";
                            readonly statements: readonly [{
                                readonly assignments: readonly [137911];
                                readonly declarations: readonly [{
                                    readonly constant: false;
                                    readonly id: 137911;
                                    readonly mutability: "mutable";
                                    readonly name: "valueToTarget";
                                    readonly nameLocation: "4469:13:176";
                                    readonly nodeType: "VariableDeclaration";
                                    readonly scope: 137957;
                                    readonly src: "4461:21:176";
                                    readonly stateVariable: false;
                                    readonly storageLocation: "default";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                    readonly typeName: {
                                        readonly id: 137910;
                                        readonly name: "uint256";
                                        readonly nodeType: "ElementaryTypeName";
                                        readonly src: "4461:7:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    };
                                    readonly visibility: "internal";
                                }];
                                readonly id: 137915;
                                readonly initialValue: {
                                    readonly commonType: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                    readonly id: 137914;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly leftExpression: {
                                        readonly id: 137912;
                                        readonly name: "_targetValue";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137834;
                                        readonly src: "4485:12:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    };
                                    readonly nodeType: "BinaryOperation";
                                    readonly operator: "-";
                                    readonly rightExpression: {
                                        readonly id: 137913;
                                        readonly name: "_value";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137830;
                                        readonly src: "4500:6:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    };
                                    readonly src: "4485:21:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                };
                                readonly nodeType: "VariableDeclarationStatement";
                                readonly src: "4461:45:176";
                            }, {
                                readonly condition: {
                                    readonly commonType: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                    readonly id: 137921;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly leftExpression: {
                                        readonly id: 137916;
                                        readonly name: "valueToTarget";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 137911;
                                        readonly src: "4524:13:176";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    };
                                    readonly nodeType: "BinaryOperation";
                                    readonly operator: "<";
                                    readonly rightExpression: {
                                        readonly arguments: readonly [{
                                            readonly id: 137919;
                                            readonly name: "_delta";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 137832;
                                            readonly src: "4548:6:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_int256";
                                                readonly typeString: "int256";
                                            };
                                        }];
                                        readonly expression: {
                                            readonly argumentTypes: readonly [{
                                                readonly typeIdentifier: "t_int256";
                                                readonly typeString: "int256";
                                            }];
                                            readonly id: 137918;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: true;
                                            readonly lValueRequested: false;
                                            readonly nodeType: "ElementaryTypeNameExpression";
                                            readonly src: "4540:7:176";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_type$_t_uint256_$";
                                                readonly typeString: "type(uint256)";
                                            };
                                            readonly typeName: {
                                                readonly id: 137917;
                                                readonly name: "uint256";
                                                readonly nodeType: "ElementaryTypeName";
                                                readonly src: "4540:7:176";
                                                readonly typeDescriptions: {};
                                            };
                                        };
                                        readonly id: 137920;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly kind: "typeConversion";
                                        readonly lValueRequested: false;
                                        readonly nameLocations: readonly [];
                                        readonly names: readonly [];
                                        readonly nodeType: "FunctionCall";
                                        readonly src: "4540:15:176";
                                        readonly tryCall: false;
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_uint256";
                                            readonly typeString: "uint256";
                                        };
                                    };
                                    readonly src: "4524:31:176";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bool";
                                        readonly typeString: "bool";
                                    };
                                };
                                readonly falseBody: {
                                    readonly id: 137955;
                                    readonly nodeType: "Block";
                                    readonly src: "4846:190:176";
                                    readonly statements: readonly [{
                                        readonly expression: {
                                            readonly arguments: readonly [{
                                                readonly id: 137950;
                                                readonly name: "upperBound";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: 137862;
                                                readonly src: "4894:10:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                };
                                            }, {
                                                readonly id: 137951;
                                                readonly name: "_targetValue";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: 137834;
                                                readonly src: "4926:12:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                };
                                            }, {
                                                readonly hexValue: "6578706563746564207570706572426f756e6420746f206d61746368205f74617267657456616c7565";
                                                readonly id: 137952;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: true;
                                                readonly kind: "string";
                                                readonly lValueRequested: false;
                                                readonly nodeType: "Literal";
                                                readonly src: "4960:43:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_stringliteral_578a6fb893a8c2c6cc07f720946312328175d325aa613c277d5f540228640fd9";
                                                    readonly typeString: "literal_string \"expected upperBound to match _targetValue\"";
                                                };
                                                readonly value: "expected upperBound to match _targetValue";
                                            }];
                                            readonly expression: {
                                                readonly argumentTypes: readonly [{
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                }, {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                }, {
                                                    readonly typeIdentifier: "t_stringliteral_578a6fb893a8c2c6cc07f720946312328175d325aa613c277d5f540228640fd9";
                                                    readonly typeString: "literal_string \"expected upperBound to match _targetValue\"";
                                                }];
                                                readonly id: 137949;
                                                readonly name: "assertEq";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [25520, 25545, 25558, 25574, 25616, 25658, 25700, 25737, 25774, 25811, 23355, 23380, 23410, 23435, 23494, 23519, 23549, 23574, 25047, 25082];
                                                readonly referencedDeclaration: 23574;
                                                readonly src: "4864:8:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$";
                                                    readonly typeString: "function (uint256,uint256,string memory)";
                                                };
                                            };
                                            readonly id: 137953;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly kind: "functionCall";
                                            readonly lValueRequested: false;
                                            readonly nameLocations: readonly [];
                                            readonly names: readonly [];
                                            readonly nodeType: "FunctionCall";
                                            readonly src: "4864:157:176";
                                            readonly tryCall: false;
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_tuple$__$";
                                                readonly typeString: "tuple()";
                                            };
                                        };
                                        readonly id: 137954;
                                        readonly nodeType: "ExpressionStatement";
                                        readonly src: "4864:157:176";
                                    }];
                                };
                                readonly id: 137956;
                                readonly nodeType: "IfStatement";
                                readonly src: "4520:516:176";
                                readonly trueBody: {
                                    readonly id: 137948;
                                    readonly nodeType: "Block";
                                    readonly src: "4557:283:176";
                                    readonly statements: readonly [{
                                        readonly expression: {
                                            readonly arguments: readonly [{
                                                readonly hexValue: "507265636973696f6e20696e637265617365642062793a202573";
                                                readonly id: 137925;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: true;
                                                readonly kind: "string";
                                                readonly lValueRequested: false;
                                                readonly nodeType: "Literal";
                                                readonly src: "4609:28:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_stringliteral_992ae0d874c221b70ae98d8a7340fa1a652248f4e9a0b5fb589214bcfadd33cb";
                                                    readonly typeString: "literal_string \"Precision increased by: %s\"";
                                                };
                                                readonly value: "Precision increased by: %s";
                                            }, {
                                                readonly commonType: {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                };
                                                readonly id: 137931;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: false;
                                                readonly lValueRequested: false;
                                                readonly leftExpression: {
                                                    readonly arguments: readonly [{
                                                        readonly id: 137928;
                                                        readonly name: "_delta";
                                                        readonly nodeType: "Identifier";
                                                        readonly overloadedDeclarations: readonly [];
                                                        readonly referencedDeclaration: 137832;
                                                        readonly src: "4667:6:176";
                                                        readonly typeDescriptions: {
                                                            readonly typeIdentifier: "t_int256";
                                                            readonly typeString: "int256";
                                                        };
                                                    }];
                                                    readonly expression: {
                                                        readonly argumentTypes: readonly [{
                                                            readonly typeIdentifier: "t_int256";
                                                            readonly typeString: "int256";
                                                        }];
                                                        readonly id: 137927;
                                                        readonly isConstant: false;
                                                        readonly isLValue: false;
                                                        readonly isPure: true;
                                                        readonly lValueRequested: false;
                                                        readonly nodeType: "ElementaryTypeNameExpression";
                                                        readonly src: "4659:7:176";
                                                        readonly typeDescriptions: {
                                                            readonly typeIdentifier: "t_type$_t_uint256_$";
                                                            readonly typeString: "type(uint256)";
                                                        };
                                                        readonly typeName: {
                                                            readonly id: 137926;
                                                            readonly name: "uint256";
                                                            readonly nodeType: "ElementaryTypeName";
                                                            readonly src: "4659:7:176";
                                                            readonly typeDescriptions: {};
                                                        };
                                                    };
                                                    readonly id: 137929;
                                                    readonly isConstant: false;
                                                    readonly isLValue: false;
                                                    readonly isPure: false;
                                                    readonly kind: "typeConversion";
                                                    readonly lValueRequested: false;
                                                    readonly nameLocations: readonly [];
                                                    readonly names: readonly [];
                                                    readonly nodeType: "FunctionCall";
                                                    readonly src: "4659:15:176";
                                                    readonly tryCall: false;
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_uint256";
                                                        readonly typeString: "uint256";
                                                    };
                                                };
                                                readonly nodeType: "BinaryOperation";
                                                readonly operator: "-";
                                                readonly rightExpression: {
                                                    readonly id: 137930;
                                                    readonly name: "valueToTarget";
                                                    readonly nodeType: "Identifier";
                                                    readonly overloadedDeclarations: readonly [];
                                                    readonly referencedDeclaration: 137911;
                                                    readonly src: "4677:13:176";
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_uint256";
                                                        readonly typeString: "uint256";
                                                    };
                                                };
                                                readonly src: "4659:31:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                };
                                            }];
                                            readonly expression: {
                                                readonly argumentTypes: readonly [{
                                                    readonly typeIdentifier: "t_stringliteral_992ae0d874c221b70ae98d8a7340fa1a652248f4e9a0b5fb589214bcfadd33cb";
                                                    readonly typeString: "literal_string \"Precision increased by: %s\"";
                                                }, {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                }];
                                                readonly expression: {
                                                    readonly id: 137922;
                                                    readonly name: "console2";
                                                    readonly nodeType: "Identifier";
                                                    readonly overloadedDeclarations: readonly [];
                                                    readonly referencedDeclaration: 52686;
                                                    readonly src: "4575:8:176";
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_type$_t_contract$_console2_$52686_$";
                                                        readonly typeString: "type(library console2)";
                                                    };
                                                };
                                                readonly id: 137924;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: false;
                                                readonly lValueRequested: false;
                                                readonly memberLocation: "4584:3:176";
                                                readonly memberName: "log";
                                                readonly nodeType: "MemberAccess";
                                                readonly referencedDeclaration: 45313;
                                                readonly src: "4575:12:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$__$";
                                                    readonly typeString: "function (string memory,uint256) pure";
                                                };
                                            };
                                            readonly id: 137932;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly kind: "functionCall";
                                            readonly lValueRequested: false;
                                            readonly nameLocations: readonly [];
                                            readonly names: readonly [];
                                            readonly nodeType: "FunctionCall";
                                            readonly src: "4575:133:176";
                                            readonly tryCall: false;
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_tuple$__$";
                                                readonly typeString: "tuple()";
                                            };
                                        };
                                        readonly id: 137933;
                                        readonly nodeType: "ExpressionStatement";
                                        readonly src: "4575:133:176";
                                    }, {
                                        readonly expression: {
                                            readonly arguments: readonly [{
                                                readonly hexValue: "4f6c642044656c74613a202573";
                                                readonly id: 137937;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: true;
                                                readonly kind: "string";
                                                readonly lValueRequested: false;
                                                readonly nodeType: "Literal";
                                                readonly src: "4739:15:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_stringliteral_fa453bca1a92cc399684afff33f3a00b1d9a24b48eefa69562addd64132631a2";
                                                    readonly typeString: "literal_string \"Old Delta: %s\"";
                                                };
                                                readonly value: "Old Delta: %s";
                                            }, {
                                                readonly id: 137938;
                                                readonly name: "_delta";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: 137832;
                                                readonly src: "4756:6:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_int256";
                                                    readonly typeString: "int256";
                                                };
                                            }];
                                            readonly expression: {
                                                readonly argumentTypes: readonly [{
                                                    readonly typeIdentifier: "t_stringliteral_fa453bca1a92cc399684afff33f3a00b1d9a24b48eefa69562addd64132631a2";
                                                    readonly typeString: "literal_string \"Old Delta: %s\"";
                                                }, {
                                                    readonly typeIdentifier: "t_int256";
                                                    readonly typeString: "int256";
                                                }];
                                                readonly expression: {
                                                    readonly id: 137934;
                                                    readonly name: "console2";
                                                    readonly nodeType: "Identifier";
                                                    readonly overloadedDeclarations: readonly [];
                                                    readonly referencedDeclaration: 52686;
                                                    readonly src: "4726:8:176";
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_type$_t_contract$_console2_$52686_$";
                                                        readonly typeString: "type(library console2)";
                                                    };
                                                };
                                                readonly id: 137936;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: false;
                                                readonly lValueRequested: false;
                                                readonly memberLocation: "4735:3:176";
                                                readonly memberName: "log";
                                                readonly nodeType: "MemberAccess";
                                                readonly referencedDeclaration: 45330;
                                                readonly src: "4726:12:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_function_internal_pure$_t_string_memory_ptr_$_t_int256_$returns$__$";
                                                    readonly typeString: "function (string memory,int256) pure";
                                                };
                                            };
                                            readonly id: 137939;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly kind: "functionCall";
                                            readonly lValueRequested: false;
                                            readonly nameLocations: readonly [];
                                            readonly names: readonly [];
                                            readonly nodeType: "FunctionCall";
                                            readonly src: "4726:37:176";
                                            readonly tryCall: false;
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_tuple$__$";
                                                readonly typeString: "tuple()";
                                            };
                                        };
                                        readonly id: 137940;
                                        readonly nodeType: "ExpressionStatement";
                                        readonly src: "4726:37:176";
                                    }, {
                                        readonly expression: {
                                            readonly arguments: readonly [{
                                                readonly hexValue: "4e65772044656c74613a202573";
                                                readonly id: 137944;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: true;
                                                readonly kind: "string";
                                                readonly lValueRequested: false;
                                                readonly nodeType: "Literal";
                                                readonly src: "4794:15:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_stringliteral_118759df95fcd2a41a8cbf85f9ea01ec5e46044fe03b9c7ec130487e275cb026";
                                                    readonly typeString: "literal_string \"New Delta: %s\"";
                                                };
                                                readonly value: "New Delta: %s";
                                            }, {
                                                readonly id: 137945;
                                                readonly name: "valueToTarget";
                                                readonly nodeType: "Identifier";
                                                readonly overloadedDeclarations: readonly [];
                                                readonly referencedDeclaration: 137911;
                                                readonly src: "4811:13:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                };
                                            }];
                                            readonly expression: {
                                                readonly argumentTypes: readonly [{
                                                    readonly typeIdentifier: "t_stringliteral_118759df95fcd2a41a8cbf85f9ea01ec5e46044fe03b9c7ec130487e275cb026";
                                                    readonly typeString: "literal_string \"New Delta: %s\"";
                                                }, {
                                                    readonly typeIdentifier: "t_uint256";
                                                    readonly typeString: "uint256";
                                                }];
                                                readonly expression: {
                                                    readonly id: 137941;
                                                    readonly name: "console2";
                                                    readonly nodeType: "Identifier";
                                                    readonly overloadedDeclarations: readonly [];
                                                    readonly referencedDeclaration: 52686;
                                                    readonly src: "4781:8:176";
                                                    readonly typeDescriptions: {
                                                        readonly typeIdentifier: "t_type$_t_contract$_console2_$52686_$";
                                                        readonly typeString: "type(library console2)";
                                                    };
                                                };
                                                readonly id: 137943;
                                                readonly isConstant: false;
                                                readonly isLValue: false;
                                                readonly isPure: false;
                                                readonly lValueRequested: false;
                                                readonly memberLocation: "4790:3:176";
                                                readonly memberName: "log";
                                                readonly nodeType: "MemberAccess";
                                                readonly referencedDeclaration: 45313;
                                                readonly src: "4781:12:176";
                                                readonly typeDescriptions: {
                                                    readonly typeIdentifier: "t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$__$";
                                                    readonly typeString: "function (string memory,uint256) pure";
                                                };
                                            };
                                            readonly id: 137946;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: false;
                                            readonly kind: "functionCall";
                                            readonly lValueRequested: false;
                                            readonly nameLocations: readonly [];
                                            readonly names: readonly [];
                                            readonly nodeType: "FunctionCall";
                                            readonly src: "4781:44:176";
                                            readonly tryCall: false;
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_tuple$__$";
                                                readonly typeString: "tuple()";
                                            };
                                        };
                                        readonly id: 137947;
                                        readonly nodeType: "ExpressionStatement";
                                        readonly src: "4781:44:176";
                                    }];
                                };
                            }];
                        };
                    }];
                };
                readonly functionSelector: "ab75e7c3";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "assertWithDelta";
                readonly nameLocation: "3363:15:176";
                readonly parameters: {
                    readonly id: 137835;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 137830;
                        readonly mutability: "mutable";
                        readonly name: "_value";
                        readonly nameLocation: "3396:6:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 138010;
                        readonly src: "3388:14:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 137829;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3388:7:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 137832;
                        readonly mutability: "mutable";
                        readonly name: "_delta";
                        readonly nameLocation: "3419:6:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 138010;
                        readonly src: "3412:13:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_int256";
                            readonly typeString: "int256";
                        };
                        readonly typeName: {
                            readonly id: 137831;
                            readonly name: "int256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3412:6:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_int256";
                                readonly typeString: "int256";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 137834;
                        readonly mutability: "mutable";
                        readonly name: "_targetValue";
                        readonly nameLocation: "3443:12:176";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 138010;
                        readonly src: "3435:20:176";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 137833;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3435:7:176";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "3378:83:176";
                };
                readonly returnParameters: {
                    readonly id: 137836;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "3469:0:176";
                };
                readonly scope: 138011;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "public";
            }];
            readonly abstract: false;
            readonly baseContracts: readonly [{
                readonly baseName: {
                    readonly id: 137469;
                    readonly name: "Test";
                    readonly nameLocations: readonly ["329:4:176"];
                    readonly nodeType: "IdentifierPath";
                    readonly referencedDeclaration: 34960;
                    readonly src: "329:4:176";
                };
                readonly id: 137470;
                readonly nodeType: "InheritanceSpecifier";
                readonly src: "329:4:176";
            }];
            readonly canonicalName: "BaseTest";
            readonly contractDependencies: readonly [];
            readonly contractKind: "contract";
            readonly fullyImplemented: true;
            readonly internalFunctionIDs: {
                readonly "44615": 1;
            };
            readonly linearizedBaseContracts: readonly [138011, 34960, 34909, 30647, 30357, 29593, 27539, 26819, 25326, 25392, 25389];
            readonly name: "BaseTest";
            readonly nameLocation: "317:8:176";
            readonly scope: 138012;
            readonly usedErrors: readonly [137495, 137497];
            readonly usedEvents: readonly [23040, 23044, 23048, 23052, 23056, 23060, 23064, 23068, 23074, 23080, 23088, 23096, 23102, 23108, 23114, 23120, 25414, 25419, 25424, 25431, 25438, 25445];
        }];
        readonly license: "Apache-2.0";
    };
    readonly id: 176;
};
//# sourceMappingURL=BaseTest.d.ts.map