export const IERC20Permit = {
  abi: [
    {
      inputs: [],
      name: "DOMAIN_SEPARATOR",
      outputs: [
        {
          internalType: "bytes32",
          name: "",
          type: "bytes32",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "owner",
          type: "address",
        },
      ],
      name: "nonces",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "owner",
          type: "address",
        },
        {
          internalType: "address",
          name: "spender",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "value",
          type: "uint256",
        },
        {
          internalType: "uint256",
          name: "deadline",
          type: "uint256",
        },
        {
          internalType: "uint8",
          name: "v",
          type: "uint8",
        },
        {
          internalType: "bytes32",
          name: "r",
          type: "bytes32",
        },
        {
          internalType: "bytes32",
          name: "s",
          type: "bytes32",
        },
      ],
      name: "permit",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
  ],
  bytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {},
  },
  deployedBytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {},
  },
  methodIdentifiers: {
    "DOMAIN_SEPARATOR()": "3644e515",
    "nonces(address)": "7ecebe00",
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account\'s ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\'t need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``\'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``\'s tokens, given ``owner``\'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``\'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":"IERC20Permit"},"evmVersion":"paris","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":@aave/=lib/aave-v3-core/contracts/",":aave-v3-core/=lib/aave-v3-core/",":create3-factory/=lib/yield-daddy/lib/create3-factory/",":ds-test/=lib/forge-std/lib/ds-test/src/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/",":solmate/=lib/solmate/src/",":yield-daddy/=lib/yield-daddy/","lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/"]},"sources":{"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"keccak256":"0x35e258421ae206f3db37281cea70871b4c3553914734aa76139a41af60ac1abb","license":"MIT","urls":["bzz-raw://2ef94b6bc4ee356db612a1849c615f7dd4b15542d6c8584c86bb9243a7913cf0","dweb:/ipfs/QmaxFj5NFpAjjitZtHPNS9PPtCuBATaRz9ktDDRCQCQ83y"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.19+commit.7dd6d404",
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "DOMAIN_SEPARATOR",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "nonces",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "address",
              name: "spender",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256",
            },
            {
              internalType: "uint8",
              name: "v",
              type: "uint8",
            },
            {
              internalType: "bytes32",
              name: "r",
              type: "bytes32",
            },
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "permit",
        },
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "DOMAIN_SEPARATOR()": {
            details:
              "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.",
          },
          "nonces(address)": {
            details:
              "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.",
          },
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
            details:
              "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].",
          },
        },
        version: 1,
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1,
      },
    },
    settings: {
      remappings: [
        "@aave/=lib/aave-v3-core/contracts/",
        "aave-v3-core/=lib/aave-v3-core/",
        "create3-factory/=lib/yield-daddy/lib/create3-factory/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "solmate/=lib/solmate/src/",
        "yield-daddy/=lib/yield-daddy/",
        "lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/",
      ],
      optimizer: {
        enabled: true,
        runs: 200,
      },
      metadata: {
        bytecodeHash: "ipfs",
      },
      compilationTarget: {
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":
          "IERC20Permit",
      },
      libraries: {},
    },
    sources: {
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":
        {
          keccak256:
            "0x35e258421ae206f3db37281cea70871b4c3553914734aa76139a41af60ac1abb",
          urls: [
            "bzz-raw://2ef94b6bc4ee356db612a1849c615f7dd4b15542d6c8584c86bb9243a7913cf0",
            "dweb:/ipfs/QmaxFj5NFpAjjitZtHPNS9PPtCuBATaRz9ktDDRCQCQ83y",
          ],
          license: "MIT",
        },
    },
    version: 1,
  },
  ast: {
    absolutePath:
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
    id: 59123,
    exportedSymbols: {
      IERC20Permit: [59122],
    },
    nodeType: "SourceUnit",
    src: "108:2138:79",
    nodes: [
      {
        id: 59088,
        nodeType: "PragmaDirective",
        src: "108:23:79",
        nodes: [],
        literals: ["solidity", "^", "0.8", ".0"],
      },
      {
        id: 59122,
        nodeType: "ContractDefinition",
        src: "614:1631:79",
        nodes: [
          {
            id: 59107,
            nodeType: "FunctionDefinition",
            src: "1440:183:79",
            nodes: [],
            documentation: {
              id: 59090,
              nodeType: "StructuredDocumentation",
              src: "643:792:79",
              text: " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].",
            },
            functionSelector: "d505accf",
            implemented: false,
            kind: "function",
            modifiers: [],
            name: "permit",
            nameLocation: "1449:6:79",
            parameters: {
              id: 59105,
              nodeType: "ParameterList",
              parameters: [
                {
                  constant: false,
                  id: 59092,
                  mutability: "mutable",
                  name: "owner",
                  nameLocation: "1473:5:79",
                  nodeType: "VariableDeclaration",
                  scope: 59107,
                  src: "1465:13:79",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address",
                  },
                  typeName: {
                    id: 59091,
                    name: "address",
                    nodeType: "ElementaryTypeName",
                    src: "1465:7:79",
                    stateMutability: "nonpayable",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address",
                    },
                  },
                  visibility: "internal",
                },
                {
                  constant: false,
                  id: 59094,
                  mutability: "mutable",
                  name: "spender",
                  nameLocation: "1496:7:79",
                  nodeType: "VariableDeclaration",
                  scope: 59107,
                  src: "1488:15:79",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address",
                  },
                  typeName: {
                    id: 59093,
                    name: "address",
                    nodeType: "ElementaryTypeName",
                    src: "1488:7:79",
                    stateMutability: "nonpayable",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address",
                    },
                  },
                  visibility: "internal",
                },
                {
                  constant: false,
                  id: 59096,
                  mutability: "mutable",
                  name: "value",
                  nameLocation: "1521:5:79",
                  nodeType: "VariableDeclaration",
                  scope: 59107,
                  src: "1513:13:79",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256",
                  },
                  typeName: {
                    id: 59095,
                    name: "uint256",
                    nodeType: "ElementaryTypeName",
                    src: "1513:7:79",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256",
                    },
                  },
                  visibility: "internal",
                },
                {
                  constant: false,
                  id: 59098,
                  mutability: "mutable",
                  name: "deadline",
                  nameLocation: "1544:8:79",
                  nodeType: "VariableDeclaration",
                  scope: 59107,
                  src: "1536:16:79",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256",
                  },
                  typeName: {
                    id: 59097,
                    name: "uint256",
                    nodeType: "ElementaryTypeName",
                    src: "1536:7:79",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256",
                    },
                  },
                  visibility: "internal",
                },
                {
                  constant: false,
                  id: 59100,
                  mutability: "mutable",
                  name: "v",
                  nameLocation: "1568:1:79",
                  nodeType: "VariableDeclaration",
                  scope: 59107,
                  src: "1562:7:79",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_uint8",
                    typeString: "uint8",
                  },
                  typeName: {
                    id: 59099,
                    name: "uint8",
                    nodeType: "ElementaryTypeName",
                    src: "1562:5:79",
                    typeDescriptions: {
                      typeIdentifier: "t_uint8",
                      typeString: "uint8",
                    },
                  },
                  visibility: "internal",
                },
                {
                  constant: false,
                  id: 59102,
                  mutability: "mutable",
                  name: "r",
                  nameLocation: "1587:1:79",
                  nodeType: "VariableDeclaration",
                  scope: 59107,
                  src: "1579:9:79",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_bytes32",
                    typeString: "bytes32",
                  },
                  typeName: {
                    id: 59101,
                    name: "bytes32",
                    nodeType: "ElementaryTypeName",
                    src: "1579:7:79",
                    typeDescriptions: {
                      typeIdentifier: "t_bytes32",
                      typeString: "bytes32",
                    },
                  },
                  visibility: "internal",
                },
                {
                  constant: false,
                  id: 59104,
                  mutability: "mutable",
                  name: "s",
                  nameLocation: "1606:1:79",
                  nodeType: "VariableDeclaration",
                  scope: 59107,
                  src: "1598:9:79",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_bytes32",
                    typeString: "bytes32",
                  },
                  typeName: {
                    id: 59103,
                    name: "bytes32",
                    nodeType: "ElementaryTypeName",
                    src: "1598:7:79",
                    typeDescriptions: {
                      typeIdentifier: "t_bytes32",
                      typeString: "bytes32",
                    },
                  },
                  visibility: "internal",
                },
              ],
              src: "1455:158:79",
            },
            returnParameters: {
              id: 59106,
              nodeType: "ParameterList",
              parameters: [],
              src: "1622:0:79",
            },
            scope: 59122,
            stateMutability: "nonpayable",
            virtual: false,
            visibility: "external",
          },
          {
            id: 59115,
            nodeType: "FunctionDefinition",
            src: "1928:63:79",
            nodes: [],
            documentation: {
              id: 59108,
              nodeType: "StructuredDocumentation",
              src: "1629:294:79",
              text: " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times.",
            },
            functionSelector: "7ecebe00",
            implemented: false,
            kind: "function",
            modifiers: [],
            name: "nonces",
            nameLocation: "1937:6:79",
            parameters: {
              id: 59111,
              nodeType: "ParameterList",
              parameters: [
                {
                  constant: false,
                  id: 59110,
                  mutability: "mutable",
                  name: "owner",
                  nameLocation: "1952:5:79",
                  nodeType: "VariableDeclaration",
                  scope: 59115,
                  src: "1944:13:79",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address",
                  },
                  typeName: {
                    id: 59109,
                    name: "address",
                    nodeType: "ElementaryTypeName",
                    src: "1944:7:79",
                    stateMutability: "nonpayable",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address",
                    },
                  },
                  visibility: "internal",
                },
              ],
              src: "1943:15:79",
            },
            returnParameters: {
              id: 59114,
              nodeType: "ParameterList",
              parameters: [
                {
                  constant: false,
                  id: 59113,
                  mutability: "mutable",
                  name: "",
                  nameLocation: "-1:-1:-1",
                  nodeType: "VariableDeclaration",
                  scope: 59115,
                  src: "1982:7:79",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256",
                  },
                  typeName: {
                    id: 59112,
                    name: "uint256",
                    nodeType: "ElementaryTypeName",
                    src: "1982:7:79",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256",
                    },
                  },
                  visibility: "internal",
                },
              ],
              src: "1981:9:79",
            },
            scope: 59122,
            stateMutability: "view",
            virtual: false,
            visibility: "external",
          },
          {
            id: 59121,
            nodeType: "FunctionDefinition",
            src: "2183:60:79",
            nodes: [],
            documentation: {
              id: 59116,
              nodeType: "StructuredDocumentation",
              src: "1997:128:79",
              text: " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.",
            },
            functionSelector: "3644e515",
            implemented: false,
            kind: "function",
            modifiers: [],
            name: "DOMAIN_SEPARATOR",
            nameLocation: "2192:16:79",
            parameters: {
              id: 59117,
              nodeType: "ParameterList",
              parameters: [],
              src: "2208:2:79",
            },
            returnParameters: {
              id: 59120,
              nodeType: "ParameterList",
              parameters: [
                {
                  constant: false,
                  id: 59119,
                  mutability: "mutable",
                  name: "",
                  nameLocation: "-1:-1:-1",
                  nodeType: "VariableDeclaration",
                  scope: 59121,
                  src: "2234:7:79",
                  stateVariable: false,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_bytes32",
                    typeString: "bytes32",
                  },
                  typeName: {
                    id: 59118,
                    name: "bytes32",
                    nodeType: "ElementaryTypeName",
                    src: "2234:7:79",
                    typeDescriptions: {
                      typeIdentifier: "t_bytes32",
                      typeString: "bytes32",
                    },
                  },
                  visibility: "internal",
                },
              ],
              src: "2233:9:79",
            },
            scope: 59122,
            stateMutability: "view",
            virtual: false,
            visibility: "external",
          },
        ],
        abstract: false,
        baseContracts: [],
        canonicalName: "IERC20Permit",
        contractDependencies: [],
        contractKind: "interface",
        documentation: {
          id: 59089,
          nodeType: "StructuredDocumentation",
          src: "133:480:79",
          text: " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.",
        },
        fullyImplemented: false,
        linearizedBaseContracts: [59122],
        name: "IERC20Permit",
        nameLocation: "624:12:79",
        scope: 59123,
        usedErrors: [],
      },
    ],
    license: "MIT",
  },
  id: 79,
} as const;
