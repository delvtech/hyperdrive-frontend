export declare const HyperdriveRegistryTests: {
    readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly name: "log";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "log_address";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "val";
            readonly type: "uint256[]";
        }];
        readonly name: "log_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "int256[]";
            readonly name: "val";
            readonly type: "int256[]";
        }];
        readonly name: "log_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "val";
            readonly type: "address[]";
        }];
        readonly name: "log_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "log_bytes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "log_bytes32";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "int256";
            readonly name: "";
            readonly type: "int256";
        }];
        readonly name: "log_int";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "val";
            readonly type: "address";
        }];
        readonly name: "log_named_address";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "val";
            readonly type: "uint256[]";
        }];
        readonly name: "log_named_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "int256[]";
            readonly name: "val";
            readonly type: "int256[]";
        }];
        readonly name: "log_named_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "val";
            readonly type: "address[]";
        }];
        readonly name: "log_named_array";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "val";
            readonly type: "bytes";
        }];
        readonly name: "log_named_bytes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "val";
            readonly type: "bytes32";
        }];
        readonly name: "log_named_bytes32";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "int256";
            readonly name: "val";
            readonly type: "int256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "decimals";
            readonly type: "uint256";
        }];
        readonly name: "log_named_decimal_int";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "val";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "decimals";
            readonly type: "uint256";
        }];
        readonly name: "log_named_decimal_uint";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "int256";
            readonly name: "val";
            readonly type: "int256";
        }];
        readonly name: "log_named_int";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "val";
            readonly type: "string";
        }];
        readonly name: "log_named_string";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "key";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "val";
            readonly type: "uint256";
        }];
        readonly name: "log_named_uint";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly name: "log_string";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "log_uint";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "logs";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "IS_TEST";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "excludeArtifacts";
        readonly outputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "excludedArtifacts_";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "excludeContracts";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "excludedContracts_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "excludeSenders";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "excludedSenders_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "failed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "setUp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetArtifactSelectors";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "addr";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct StdInvariant.FuzzSelector[]";
            readonly name: "targetedArtifactSelectors_";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetArtifacts";
        readonly outputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "targetedArtifacts_";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetContracts";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targetedContracts_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetSelectors";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "addr";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct StdInvariant.FuzzSelector[]";
            readonly name: "targetedSelectors_";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "targetSenders";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targetedSenders_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "test_getHyperdriveInfo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "test_setHyperdriveInfo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "test_setHyperdriveInfo_noAuth";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "test_updateGovernance";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "test_updateGovernance_noAuth";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    readonly bytecode: {
        readonly object: "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50611b5b8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063916a17c611610097578063ba414fa611610066578063ba414fa614610197578063dc31d3fa146101af578063e20c9f71146101b7578063fa7626d4146101bf57600080fd5b8063916a17c6146101775780639bbee8911461017f5780639ccd3fb014610187578063b5508aa91461018f57600080fd5b80633f7286f4116100d35780633f7286f41461013d57806366d9a9a014610145578063716bcaa11461015a57806385226c811461016257600080fd5b80630a9254e4146101055780630ba528ce1461010f5780631ed7831c146101175780633e5e3c2314610135575b600080fd5b61010d6101cc565b005b61010d610217565b61011f6103bb565b60405161012c91906114e0565b60405180910390f35b61011f61041d565b61011f61047d565b61014d6104dd565b60405161012c919061152d565b61010d6105cc565b61016a61089c565b60405161012c9190611630565b61014d61096c565b61010d610a52565b61010d610be6565b61016a610ce8565b61019f610db8565b604051901515815260200161012c565b61010d610ee5565b61011f61105c565b60075461019f9060ff1681565b6040516101d8906114d3565b604051809103906000f0801580156101f4573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610242604051806040016040528060088152602001673737ba20b236b4b760c11b8152506110bc565b60405163ca669fa760e01b81526001600160a01b0382166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561029a57600080fd5b505af11580156102ae573d6000803e3d6000fd5b5050604051630618f58760e51b81526282b42960e81b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b5050601b5460408051808201909152600d81526c6e6577476f7665726e616e636560981b60208201526001600160a01b03909116925063b2561263915061035e906110bc565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024015b600060405180830381600087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b5050505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561041357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103f5575b5050505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610413576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103f5575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610413576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103f5575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156105c35760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105ab57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161056d5790505b50505050508152505081526020019060010190610501565b50505050905090565b60006105fa6040518060400160405280600b81526020016a687970657264726976653160a81b8152506110bc565b9050600061062a6040518060400160405280600b81526020016a343cb832b9323934bb329960a91b8152506110bc565b601b5460405163065bb97160e31b81526001600160a01b0385811660048301529293506106a792909116906332ddcb88906024015b602060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a09190611692565b60006110ce565b601b5460405163065bb97160e31b81526001600160a01b0383811660048301526106db9216906332ddcb889060240161065f565b601b54604051635f22738d60e11b81526001600160a01b038481166004830152600160248301529091169063be44e71a90604401600060405180830381600087803b15801561072957600080fd5b505af115801561073d573d6000803e3d6000fd5b5050601b54604051635f22738d60e11b81526001600160a01b03858116600483015260026024830152909116925063be44e71a9150604401600060405180830381600087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b5050601b5460405163065bb97160e31b81526001600160a01b038681166004830152610821945090911691506332ddcb88906024015b602060405180830381865afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190611692565b60016110ce565b601b5460405163065bb97160e31b81526001600160a01b0383811660048301526108989216906332ddcb8890602401602060405180830381865afa15801561086d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108919190611692565b60026110ce565b5050565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156105c35783829060005260206000200180546108df906116ab565b80601f016020809104026020016040519081016040528092919081815260200182805461090b906116ab565b80156109585780601f1061092d57610100808354040283529160200191610958565b820191906000526020600020905b81548152906001019060200180831161093b57829003601f168201915b5050505050815260200190600101906108c0565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156105c35760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610a3a57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109fc5790505b50505050508152505081526020019060010190610990565b6000610a826040518060400160405280600d81526020016c6e6577476f7665726e616e636560981b8152506110bc565b9050610b04601b60009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe91906116e5565b306111bd565b601b5460405163b256126360e01b81526001600160a01b0383811660048301529091169063b256126390602401600060405180830381600087803b158015610b4b57600080fd5b505af1158015610b5f573d6000803e3d6000fd5b50505050610be3601b60009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd91906116e5565b826111bd565b50565b6000610c136040518060400160405280600a8152602001696879706572647269766560b01b8152506110bc565b601b5460405163065bb97160e31b81526001600160a01b038084166004830152929350610c4c92909116906332ddcb889060240161065f565b601b54604051635f22738d60e11b81526001600160a01b038381166004830152600160248301529091169063be44e71a90604401600060405180830381600087803b158015610c9a57600080fd5b505af1158015610cae573d6000803e3d6000fd5b5050601b5460405163065bb97160e31b81526001600160a01b038581166004830152610be3945090911691506332ddcb88906024016107d9565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156105c3578382906000526020600020018054610d2b906116ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610d57906116ab565b8015610da45780601f10610d7957610100808354040283529160200191610da4565b820191906000526020600020905b815481529060010190602001808311610d8757829003601f168201915b505050505081526020019060010190610d0c565b600754600090610100900460ff1615610dda5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ee05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610e68917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611715565b60408051601f1981840301815290829052610e8291611746565b6000604051808303816000865af19150503d8060008114610ebf576040519150601f19603f3d011682016040523d82523d6000602084013e610ec4565b606091505b5091505080806020019051810190610edc9190611762565b9150505b919050565b6000610f10604051806040016040528060088152602001673737ba20b236b4b760c11b8152506110bc565b60405163ca669fa760e01b81526001600160a01b0382166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015610f6857600080fd5b505af1158015610f7c573d6000803e3d6000fd5b5050604051630618f58760e51b81526282b42960e81b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b158015610fd257600080fd5b505af1158015610fe6573d6000803e3d6000fd5b5050601b5460408051808201909152600a8152696879706572647269766560b01b60208201526001600160a01b03909116925063be44e71a9150611029906110bc565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260006024820152604401610386565b60606013805480602002602001604051908101604052809291908181526020018280548015610413576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103f5575050505050905090565b60006110c7826112b1565b5092915050565b808214610898577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161113f9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516111769190611784565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516111ad91906117bc565b60405180910390a16108986113c7565b806001600160a01b0316826001600160a01b031614610898577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516112439060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8260405161127a91906117e6565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f816040516111ad919061182a565b600080826040516020016112c59190611746565b60408051808303601f190181529082905280516020909101206001625e79b760e01b03198252600482018190529150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa1864990602401602060405180830381865afa158015611330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135491906116e5565b6040516318caf8e360e31b8152909250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c718906113909085908790600401611854565b600060405180830381600087803b1580156113aa57600080fd5b505af11580156113be573d6000803e3d6000fd5b50505050915091565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156114c25760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526114619291602001611715565b60408051601f198184030181529082905261147b91611746565b6000604051808303816000865af19150503d80600081146114b8576040519150601f19603f3d011682016040523d82523d6000602084013e6114bd565b606091505b505050505b6007805461ff001916610100179055565b6102a58061188183390190565b6020808252825182820181905260009190848201906040850190845b818110156115215783516001600160a01b0316835292840192918401916001016114fc565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156115d157898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156115bc5783516001600160e01b0319168252928b019260019290920191908b0190611592565b50978a01979550505091870191600101611555565b50919998505050505050505050565b60005b838110156115fb5781810151838201526020016115e3565b50506000910152565b6000815180845261161c8160208601602086016115e0565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561168557603f19888603018452611673858351611604565b94509285019290850190600101611657565b5092979650505050505050565b6000602082840312156116a457600080fd5b5051919050565b600181811c908216806116bf57607f821691505b6020821081036116df57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156116f757600080fd5b81516001600160a01b038116811461170e57600080fd5b9392505050565b6001600160e01b03198316815281516000906117388160048501602087016115e0565b919091016004019392505050565b600082516117588184602087016115e0565b9190910192915050565b60006020828403121561177457600080fd5b8151801515811461170e57600080fd5b6040815260006117ae60408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b6040815260006117ae60408301600a8152690808080808149a59da1d60b21b602082015260400190565b60408152600061181060408301600a8152690808080808081319599d60b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b60408152600061181060408301600a8152690808080808149a59da1d60b21b602082015260400190565b6001600160a01b038316815260406020820181905260009061187890830184611604565b94935050505056fe608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610273806100326000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806332ddcb88146100515780635aa6e6751461008d578063b2561263146100b8578063be44e71a146100cd575b600080fd5b61007a61005f3660046101f1565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6000546100a0906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b6100cb6100c63660046101f1565b6100e0565b005b6100cb6100db366004610213565b610152565b6000546001600160a01b0316331461010a576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab91a250565b6000546001600160a01b0316331461017c576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03821660008181526001602052604090819020839055517ff0ddd07f037f75a9ab309993d576264e5074e0d60be48db5629946f0fec5d356906101c99084815260200190565b60405180910390a25050565b80356001600160a01b03811681146101ec57600080fd5b919050565b60006020828403121561020357600080fd5b61020c826101d5565b9392505050565b6000806040838503121561022657600080fd5b61022f836101d5565b94602093909301359350505056fea2646970667358221220011c586e47776c865b19d51c06147f4e001711c4f3086a10e6900524e74e142c64736f6c63430008140033a2646970667358221220dc91aff0ea0a282a911efddbc257ab08b76a127bb164af37b5b9c3113f51f99864736f6c63430008140033";
        readonly sourceMap: "252:1762:205:-:0;;;1572:26:143;;;1594:4;-1:-1:-1;;1572:26:143;;;;;;;;3126:44:146;;;;;;;;;;;252:1762:205;;;;;;;;;;;;;;;;";
        readonly linkReferences: {};
    };
    readonly deployedBytecode: {
        readonly object: "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063916a17c611610097578063ba414fa611610066578063ba414fa614610197578063dc31d3fa146101af578063e20c9f71146101b7578063fa7626d4146101bf57600080fd5b8063916a17c6146101775780639bbee8911461017f5780639ccd3fb014610187578063b5508aa91461018f57600080fd5b80633f7286f4116100d35780633f7286f41461013d57806366d9a9a014610145578063716bcaa11461015a57806385226c811461016257600080fd5b80630a9254e4146101055780630ba528ce1461010f5780631ed7831c146101175780633e5e3c2314610135575b600080fd5b61010d6101cc565b005b61010d610217565b61011f6103bb565b60405161012c91906114e0565b60405180910390f35b61011f61041d565b61011f61047d565b61014d6104dd565b60405161012c919061152d565b61010d6105cc565b61016a61089c565b60405161012c9190611630565b61014d61096c565b61010d610a52565b61010d610be6565b61016a610ce8565b61019f610db8565b604051901515815260200161012c565b61010d610ee5565b61011f61105c565b60075461019f9060ff1681565b6040516101d8906114d3565b604051809103906000f0801580156101f4573d6000803e3d6000fd5b50601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610242604051806040016040528060088152602001673737ba20b236b4b760c11b8152506110bc565b60405163ca669fa760e01b81526001600160a01b0382166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561029a57600080fd5b505af11580156102ae573d6000803e3d6000fd5b5050604051630618f58760e51b81526282b42960e81b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b5050601b5460408051808201909152600d81526c6e6577476f7665726e616e636560981b60208201526001600160a01b03909116925063b2561263915061035e906110bc565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024015b600060405180830381600087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b5050505050565b6060601480548060200260200160405190810160405280929190818152602001828054801561041357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103f5575b5050505050905090565b60606016805480602002602001604051908101604052809291908181526020018280548015610413576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103f5575050505050905090565b60606015805480602002602001604051908101604052809291908181526020018280548015610413576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103f5575050505050905090565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156105c35760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156105ab57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841161056d5790505b50505050508152505081526020019060010190610501565b50505050905090565b60006105fa6040518060400160405280600b81526020016a687970657264726976653160a81b8152506110bc565b9050600061062a6040518060400160405280600b81526020016a343cb832b9323934bb329960a91b8152506110bc565b601b5460405163065bb97160e31b81526001600160a01b0385811660048301529293506106a792909116906332ddcb88906024015b602060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a09190611692565b60006110ce565b601b5460405163065bb97160e31b81526001600160a01b0383811660048301526106db9216906332ddcb889060240161065f565b601b54604051635f22738d60e11b81526001600160a01b038481166004830152600160248301529091169063be44e71a90604401600060405180830381600087803b15801561072957600080fd5b505af115801561073d573d6000803e3d6000fd5b5050601b54604051635f22738d60e11b81526001600160a01b03858116600483015260026024830152909116925063be44e71a9150604401600060405180830381600087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b5050601b5460405163065bb97160e31b81526001600160a01b038681166004830152610821945090911691506332ddcb88906024015b602060405180830381865afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190611692565b60016110ce565b601b5460405163065bb97160e31b81526001600160a01b0383811660048301526108989216906332ddcb8890602401602060405180830381865afa15801561086d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108919190611692565b60026110ce565b5050565b60606018805480602002602001604051908101604052809291908181526020016000905b828210156105c35783829060005260206000200180546108df906116ab565b80601f016020809104026020016040519081016040528092919081815260200182805461090b906116ab565b80156109585780601f1061092d57610100808354040283529160200191610958565b820191906000526020600020905b81548152906001019060200180831161093b57829003601f168201915b5050505050815260200190600101906108c0565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156105c35760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610a3a57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109fc5790505b50505050508152505081526020019060010190610990565b6000610a826040518060400160405280600d81526020016c6e6577476f7665726e616e636560981b8152506110bc565b9050610b04601b60009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe91906116e5565b306111bd565b601b5460405163b256126360e01b81526001600160a01b0383811660048301529091169063b256126390602401600060405180830381600087803b158015610b4b57600080fd5b505af1158015610b5f573d6000803e3d6000fd5b50505050610be3601b60009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd91906116e5565b826111bd565b50565b6000610c136040518060400160405280600a8152602001696879706572647269766560b01b8152506110bc565b601b5460405163065bb97160e31b81526001600160a01b038084166004830152929350610c4c92909116906332ddcb889060240161065f565b601b54604051635f22738d60e11b81526001600160a01b038381166004830152600160248301529091169063be44e71a90604401600060405180830381600087803b158015610c9a57600080fd5b505af1158015610cae573d6000803e3d6000fd5b5050601b5460405163065bb97160e31b81526001600160a01b038581166004830152610be3945090911691506332ddcb88906024016107d9565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156105c3578382906000526020600020018054610d2b906116ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610d57906116ab565b8015610da45780601f10610d7957610100808354040283529160200191610da4565b820191906000526020600020905b815481529060010190602001808311610d8757829003601f168201915b505050505081526020019060010190610d0c565b600754600090610100900460ff1615610dda5750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ee05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610e68917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611715565b60408051601f1981840301815290829052610e8291611746565b6000604051808303816000865af19150503d8060008114610ebf576040519150601f19603f3d011682016040523d82523d6000602084013e610ec4565b606091505b5091505080806020019051810190610edc9190611762565b9150505b919050565b6000610f10604051806040016040528060088152602001673737ba20b236b4b760c11b8152506110bc565b60405163ca669fa760e01b81526001600160a01b0382166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015610f6857600080fd5b505af1158015610f7c573d6000803e3d6000fd5b5050604051630618f58760e51b81526282b42960e81b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b158015610fd257600080fd5b505af1158015610fe6573d6000803e3d6000fd5b5050601b5460408051808201909152600a8152696879706572647269766560b01b60208201526001600160a01b03909116925063be44e71a9150611029906110bc565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260006024820152604401610386565b60606013805480602002602001604051908101604052809291908181526020018280548015610413576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116103f5575050505050905090565b60006110c7826112b1565b5092915050565b808214610898577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161113f9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516111769190611784565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516111ad91906117bc565b60405180910390a16108986113c7565b806001600160a01b0316826001600160a01b031614610898577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516112439060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8260405161127a91906117e6565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f816040516111ad919061182a565b600080826040516020016112c59190611746565b60408051808303601f190181529082905280516020909101206001625e79b760e01b03198252600482018190529150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa1864990602401602060405180830381865afa158015611330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135491906116e5565b6040516318caf8e360e31b8152909250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c718906113909085908790600401611854565b600060405180830381600087803b1580156113aa57600080fd5b505af11580156113be573d6000803e3d6000fd5b50505050915091565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156114c25760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526114619291602001611715565b60408051601f198184030181529082905261147b91611746565b6000604051808303816000865af19150503d80600081146114b8576040519150601f19603f3d011682016040523d82523d6000602084013e6114bd565b606091505b505050505b6007805461ff001916610100179055565b6102a58061188183390190565b6020808252825182820181905260009190848201906040850190845b818110156115215783516001600160a01b0316835292840192918401916001016114fc565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156115d157898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156115bc5783516001600160e01b0319168252928b019260019290920191908b0190611592565b50978a01979550505091870191600101611555565b50919998505050505050505050565b60005b838110156115fb5781810151838201526020016115e3565b50506000910152565b6000815180845261161c8160208601602086016115e0565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561168557603f19888603018452611673858351611604565b94509285019290850190600101611657565b5092979650505050505050565b6000602082840312156116a457600080fd5b5051919050565b600181811c908216806116bf57607f821691505b6020821081036116df57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156116f757600080fd5b81516001600160a01b038116811461170e57600080fd5b9392505050565b6001600160e01b03198316815281516000906117388160048501602087016115e0565b919091016004019392505050565b600082516117588184602087016115e0565b9190910192915050565b60006020828403121561177457600080fd5b8151801515811461170e57600080fd5b6040815260006117ae60408301600a8152690808080808081319599d60b21b602082015260400190565b905082602083015292915050565b6040815260006117ae60408301600a8152690808080808149a59da1d60b21b602082015260400190565b60408152600061181060408301600a8152690808080808081319599d60b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b60408152600061181060408301600a8152690808080808149a59da1d60b21b602082015260400190565b6001600160a01b038316815260406020820181905260009061187890830184611604565b94935050505056fe608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610273806100326000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806332ddcb88146100515780635aa6e6751461008d578063b2561263146100b8578063be44e71a146100cd575b600080fd5b61007a61005f3660046101f1565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6000546100a0906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b6100cb6100c63660046101f1565b6100e0565b005b6100cb6100db366004610213565b610152565b6000546001600160a01b0316331461010a576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab91a250565b6000546001600160a01b0316331461017c576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03821660008181526001602052604090819020839055517ff0ddd07f037f75a9ab309993d576264e5074e0d60be48db5629946f0fec5d356906101c99084815260200190565b60405180910390a25050565b80356001600160a01b03811681146101ec57600080fd5b919050565b60006020828403121561020357600080fd5b61020c826101d5565b9392505050565b6000806040838503121561022657600080fd5b61022f836101d5565b94602093909301359350505056fea2646970667358221220011c586e47776c865b19d51c06147f4e001711c4f3086a10e6900524e74e142c64736f6c63430008140033a2646970667358221220dc91aff0ea0a282a911efddbc257ab08b76a127bb164af37b5b9c3113f51f99864736f6c63430008140033";
        readonly sourceMap: "252:1762:205:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;333:78;;;:::i;:::-;;417:254;;;:::i;2170:134:149:-;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2939:133;;;:::i;2640:141::-;;;:::i;2456:178::-;;;:::i;:::-;;;;;;;:::i;1499:513:205:-;;;:::i;2310:140:149:-;;;:::i;:::-;;;;;;;:::i;2787:146::-;;;:::i;677:271:205:-;;;:::i;1216:277::-;;;:::i;1875:141:149:-;;;:::i;1819:584:143:-;;;:::i;:::-;;;3755:14:234;;3748:22;3730:41;;3718:2;3703:18;1819:584:143;3590:187:234;954:256:205;;;:::i;2022:142:149:-;;;:::i;1572:26:143:-;;;;;;;;;333:78:205;380:24;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;369:8:205;:35;;-1:-1:-1;;;;;;369:35:205;-1:-1:-1;;;;;369:35:205;;;;;;;;;;333:78::o;417:254::-;474:16;493:20;;;;;;;;;;;;;;-1:-1:-1;;;493:20:205;;;:8;:20::i;:::-;524:18;;-1:-1:-1;;;524:18:205;;-1:-1:-1;;;;;3946:32:234;;524:18:205;;;3928:51:234;474:39:205;;-1:-1:-1;524:8:205;;;;3901:18:234;;524::205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;552:50:205;;-1:-1:-1;;;552:50:205;;-1:-1:-1;;;552:50:205;;;4134:52:234;552:15:205;;-1:-1:-1;552:15:205;;-1:-1:-1;4107:18:234;;552:50:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;612:8:205;;638:25;;;;;;;;;;;;-1:-1:-1;;;638:25:205;;;;-1:-1:-1;;;;;612:8:205;;;;-1:-1:-1;612:25:205;;-1:-1:-1;638:25:205;;:8;:25::i;:::-;612:52;;-1:-1:-1;;;;;;612:52:205;;;;;;;-1:-1:-1;;;;;3946:32:234;;;612:52:205;;;3928:51:234;3901:18;;612:52:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;464:207;417:254::o;2170:134:149:-;2217:33;2281:16;2262:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2262:35:149;;;;;;;;;;;;;;;;;;;;;;;2170:134;:::o;2939:133::-;2985:33;3049:16;3030:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3030:35:149;;;;;;;;;;;;;;;;;;;;;;2939:133;:::o;2640:141::-;2688:35;2756:18;2735:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2735:39:149;;;;;;;;;;;;;;;;;;;;;;2640:141;:::o;2456:178::-;2512:48;2601:26;2572:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2572:55:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2572:55:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2456:178;:::o;1499:513:205:-;1550:19;1572:23;;;;;;;;;;;;;;-1:-1:-1;;;1572:23:205;;;:8;:23::i;:::-;1550:45;;1605:19;1627:23;;;;;;;;;;;;;;-1:-1:-1;;;1627:23:205;;;:8;:23::i;:::-;1670:8;;:39;;-1:-1:-1;;;1670:39:205;;-1:-1:-1;;;;;3946:32:234;;;1670:39:205;;;3928:51:234;1605:45:205;;-1:-1:-1;1661:52:205;;1670:8;;;;:26;;3901:18:234;;1670:39:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1711:1;1661:8;:52::i;:::-;1732:8;;:39;;-1:-1:-1;;;1732:39:205;;-1:-1:-1;;;;;3946:32:234;;;1732:39:205;;;3928:51:234;1723:52:205;;1732:8;;:26;;3901:18:234;;1732:39:205;3782:203:234;1723:52:205;1786:8;;:42;;-1:-1:-1;;;1786:42:205;;-1:-1:-1;;;;;4586:32:234;;;1786:42:205;;;4568:51:234;1786:8:205;4635:18:234;;;4628:34;1786:8:205;;;;:26;;4541:18:234;;1786:42:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1838:8:205;;:42;;-1:-1:-1;;;1838:42:205;;-1:-1:-1;;;;;4586:32:234;;;1838:42:205;;;4568:51:234;1878:1:205;4635:18:234;;;4628:34;1838:8:205;;;;-1:-1:-1;1838:26:205;;-1:-1:-1;4541:18:234;;1838:42:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1900:8:205;;:39;;-1:-1:-1;;;1900:39:205;;-1:-1:-1;;;;;3946:32:234;;;1900:39:205;;;3928:51:234;1891:52:205;;-1:-1:-1;1900:8:205;;;;-1:-1:-1;1900:26:205;;3901:18:234;;1900:39:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1941:1;1891:8;:52::i;:::-;1962:8;;:39;;-1:-1:-1;;;1962:39:205;;-1:-1:-1;;;;;3946:32:234;;;1962:39:205;;;3928:51:234;1953:52:205;;1962:8;;:26;;3901:18:234;;1962:39:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2003:1;1953:8;:52::i;:::-;1540:472;;1499:513::o;2310:140:149:-;2358:34;2425:18;2404:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2787:146;2835:40;2908:18;2887:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2887:39:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2887:39:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;677:271:205;727:21;751:25;;;;;;;;;;;;;;-1:-1:-1;;;751:25:205;;;:8;:25::i;:::-;727:49;;787:46;796:8;;;;;;;;;-1:-1:-1;;;;;796:8:205;-1:-1:-1;;;;;796:19:205;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;827:4;787:8;:46::i;:::-;844:8;;:40;;-1:-1:-1;;;844:40:205;;-1:-1:-1;;;;;3946:32:234;;;844:40:205;;;3928:51:234;844:8:205;;;;:25;;3901:18:234;;844:40:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;895:46;904:8;;;;;;;;;-1:-1:-1;;;;;904:8:205;-1:-1:-1;;;;;904:19:205;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;927:13;895:8;:46::i;:::-;717:231;677:271::o;1216:277::-;1267:18;1288:22;;;;;;;;;;;;;;-1:-1:-1;;;1288:22:205;;;:8;:22::i;:::-;1330:8;;:38;;-1:-1:-1;;;1330:38:205;;-1:-1:-1;;;;;3946:32:234;;;1330:38:205;;;3928:51:234;1267:43:205;;-1:-1:-1;1321:51:205;;1330:8;;;;:26;;3901:18:234;;1330:38:205;3782:203:234;1321:51:205;1383:8;;:41;;-1:-1:-1;;;1383:41:205;;-1:-1:-1;;;;;4586:32:234;;;1383:41:205;;;4568:51:234;1383:8:205;4635:18:234;;;4628:34;1383:8:205;;;;:26;;4541:18:234;;1383:41:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1444:8:205;;:38;;-1:-1:-1;;;1444:38:205;;-1:-1:-1;;;;;3946:32:234;;;1444:38:205;;;3928:51:234;1435::205;;-1:-1:-1;1444:8:205;;;;-1:-1:-1;1444:26:205;;3901:18:234;;1444:38:205;3782:203:234;1875:141:149;1924:34;1991:18;1970:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1819:584:143;1873:7;;1853:4;;1873:7;;;;;1869:528;;;-1:-1:-1;1903:7:143;;;;;;;;1819:584::o;1869:528::-;1941:17;2997:42;2985:55;3066:16;1980:374;;2196:43;;;1671:64;2196:43;;;4568:51:234;;;-1:-1:-1;;;4635:18:234;;;4628:34;2196:43:143;;;;;;;;;4541:18:234;;;2196:43:143;;;-1:-1:-1;;1671:64:143;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:143;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:143:o;954:256:205:-;1012:16;1031:20;;;;;;;;;;;;;;-1:-1:-1;;;1031:20:205;;;:8;:20::i;:::-;1062:18;;-1:-1:-1;;;1062:18:205;;-1:-1:-1;;;;;3946:32:234;;1062:18:205;;;3928:51:234;1012:39:205;;-1:-1:-1;1062:8:205;;;;3901:18:234;;1062::205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:50:205;;-1:-1:-1;;;1090:50:205;;-1:-1:-1;;;1090:50:205;;;4134:52:234;1090:15:205;;-1:-1:-1;1090:15:205;;-1:-1:-1;4107:18:234;;1090:50:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1150:8:205;;1177:22;;;;;;;;;;;;-1:-1:-1;;;1177:22:205;;;;-1:-1:-1;;;;;1150:8:205;;;;-1:-1:-1;1150:26:205;;-1:-1:-1;1177:22:205;;:8;:22::i;:::-;1150:53;;-1:-1:-1;;;;;;1150:53:205;;;;;;;-1:-1:-1;;;;;4586:32:234;;;1150:53:205;;;4568:51:234;1201:1:205;4635:18:234;;;4628:34;4541:18;;1150:53:205;4386:282:234;2022:142:149;2071:35;2139:18;2118:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2118:39:149;;;;;;;;;;;;;;;;;;;;;;2022:142;:::o;20288:125:147:-;20352:12;20386:20;20401:4;20386:14;:20::i;:::-;-1:-1:-1;20376:30:147;20288:125;-1:-1:-1;;20288:125:147:o;5209:262:143:-;5271:1;5266;:6;5262:203;;5293:41;;;;;7371:2:234;7353:21;;;7410:2;7390:18;;;7383:30;7449:34;7444:2;7429:18;;7422:62;-1:-1:-1;;;7515:2:234;7500:18;;7493:32;7557:3;7542:19;;7169:398;5293:41:143;;;;;;;;5353:31;5382:1;5353:31;;;;;;:::i;:::-;;;;;;;;5403;5432:1;5403:31;;;;;;:::i;:::-;;;;;;;;5448:6;:4;:6::i;3622:277::-;3690:1;-1:-1:-1;;;;;3685:6:143;:1;-1:-1:-1;;;;;3685:6:143;;3681:212;;3712:44;;;;;8808:2:234;8790:21;;;8847:2;8827:18;;;8820:30;8886:34;8881:2;8866:18;;8859:62;-1:-1:-1;;;8952:2:234;8937:18;;8930:35;8997:3;8982:19;;8606:401;3712:44:143;;;;;;;;3775:34;3807:1;3775:34;;;;;;:::i;:::-;;;;;;;;3828;3860:1;3828:34;;;;;;:::i;20007:242:147:-;20077:12;20091:18;20169:4;20152:22;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;20152:22:147;;;;;;;20142:33;;20152:22;20142:33;;;;-1:-1:-1;;;;;;20193:19:147;;;;;10210:25:234;;;20142:33:147;-1:-1:-1;20193:7:147;;;;10183:18:234;;20193:19:147;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20222:20;;-1:-1:-1;;;20222:20:147;;20186:26;;-1:-1:-1;20222:8:147;;;;:20;;20186:26;;20237:4;;20222:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20007:242;;;:::o;2409:432:143:-;2997:42;2985:55;3066:16;2452:359;;2652:67;;;1671:64;2652:67;;;10770:51:234;;;-1:-1:-1;;;10837:18:234;;;10830:34;;;;2712:4:143;10880:18:234;;;10873:34;2489:11:143;;1671:64;2586:43;;10743:18:234;;2652:67:143;;;-1:-1:-1;;2652:67:143;;;;;;;;;;2541:196;;;2652:67;2541:196;;:::i;:::-;;;;-1:-1:-1;;2541:196:143;;;;;;;;;;2506:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2452:359:143;2820:7;:14;;-1:-1:-1;;2820:14:143;;;;;2409:432::o;-1:-1:-1:-;;;;;;;;:::o;14:658:234:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:195;465:6;462:1;459:13;451:195;;;530:13;;-1:-1:-1;;;;;526:39:234;514:52;;621:15;;;;586:12;;;;562:1;480:9;451:195;;;-1:-1:-1;663:3:234;;14:658;-1:-1:-1;;;;;;14:658:234:o;677:1569::-;881:4;910:2;950;939:9;935:18;980:2;969:9;962:21;1003:6;1038;1032:13;1069:6;1061;1054:22;1095:2;1085:12;;1128:2;1117:9;1113:18;1106:25;;1190:2;1180:6;1177:1;1173:14;1162:9;1158:30;1154:39;1228:2;1220:6;1216:15;1249:1;1270;1280:937;1296:6;1291:3;1288:15;1280:937;;;1365:22;;;-1:-1:-1;;1361:36:234;1349:49;;1421:13;;1508:9;;-1:-1:-1;;;;;1504:35:234;1489:51;;1579:11;;1573:18;1611:15;;;1604:27;;;1692:19;;1461:15;;;1724:24;;;1814:21;;;;1859:1;;1782:2;1770:15;;;1873:236;1889:8;1884:3;1881:17;1873:236;;;1970:15;;-1:-1:-1;;;;;;1966:42:234;1952:57;;2078:17;;;;1917:1;1908:11;;;;;2035:14;;;;1873:236;;;-1:-1:-1;2195:12:234;;;;2132:5;-1:-1:-1;;;2160:15:234;;;;1322:1;1313:11;1280:937;;;-1:-1:-1;2234:6:234;;677:1569;-1:-1:-1;;;;;;;;;677:1569:234:o;2251:250::-;2336:1;2346:113;2360:6;2357:1;2354:13;2346:113;;;2436:11;;;2430:18;2417:11;;;2410:39;2382:2;2375:10;2346:113;;;-1:-1:-1;;2493:1:234;2475:16;;2468:27;2251:250::o;2506:271::-;2548:3;2586:5;2580:12;2613:6;2608:3;2601:19;2629:76;2698:6;2691:4;2686:3;2682:14;2675:4;2668:5;2664:16;2629:76;:::i;:::-;2759:2;2738:15;-1:-1:-1;;2734:29:234;2725:39;;;;2766:4;2721:50;;2506:271;-1:-1:-1;;2506:271:234:o;2782:803::-;2944:4;2973:2;3013;3002:9;2998:18;3043:2;3032:9;3025:21;3066:6;3101;3095:13;3132:6;3124;3117:22;3170:2;3159:9;3155:18;3148:25;;3232:2;3222:6;3219:1;3215:14;3204:9;3200:30;3196:39;3182:53;;3270:2;3262:6;3258:15;3291:1;3301:255;3315:6;3312:1;3309:13;3301:255;;;3408:2;3404:7;3392:9;3384:6;3380:22;3376:36;3371:3;3364:49;3436:40;3469:6;3460;3454:13;3436:40;:::i;:::-;3426:50;-1:-1:-1;3534:12:234;;;;3499:15;;;;3337:1;3330:9;3301:255;;;-1:-1:-1;3573:6:234;;2782:803;-1:-1:-1;;;;;;;2782:803:234:o;4197:184::-;4267:6;4320:2;4308:9;4299:7;4295:23;4291:32;4288:52;;;4336:1;4333;4326:12;4288:52;-1:-1:-1;4359:16:234;;4197:184;-1:-1:-1;4197:184:234:o;4960:380::-;5039:1;5035:12;;;;5082;;;5103:61;;5157:4;5149:6;5145:17;5135:27;;5103:61;5210:2;5202:6;5199:14;5179:18;5176:38;5173:161;;5256:10;5251:3;5247:20;5244:1;5237:31;5291:4;5288:1;5281:15;5319:4;5316:1;5309:15;5173:161;;4960:380;;;:::o;5345:290::-;5415:6;5468:2;5456:9;5447:7;5443:23;5439:32;5436:52;;;5484:1;5481;5474:12;5436:52;5510:16;;-1:-1:-1;;;;;5555:31:234;;5545:42;;5535:70;;5601:1;5598;5591:12;5535:70;5624:5;5345:290;-1:-1:-1;;;5345:290:234:o;5919:384::-;-1:-1:-1;;;;;;6104:33:234;;6092:46;;6161:13;;6074:3;;6183:74;6161:13;6246:1;6237:11;;6230:4;6218:17;;6183:74;:::i;:::-;6277:16;;;;6295:1;6273:24;;5919:384;-1:-1:-1;;;5919:384:234:o;6308:287::-;6437:3;6475:6;6469:13;6491:66;6550:6;6545:3;6538:4;6530:6;6526:17;6491:66;:::i;:::-;6573:16;;;;;6308:287;-1:-1:-1;;6308:287:234:o;6600:277::-;6667:6;6720:2;6708:9;6699:7;6695:23;6691:32;6688:52;;;6736:1;6733;6726:12;6688:52;6768:9;6762:16;6821:5;6814:13;6807:21;6800:5;6797:32;6787:60;;6843:1;6840;6833:12;7736:348;7966:2;7955:9;7948:21;7929:4;7986:49;8031:2;8020:9;8016:18;7649:2;7637:15;;-1:-1:-1;;;7677:4:234;7668:14;;7661:36;7722:2;7713:12;;7572:159;7986:49;7978:57;;8071:6;8066:2;8055:9;8051:18;8044:34;7736:348;;;;:::o;8253:::-;8483:2;8472:9;8465:21;8446:4;8503:49;8548:2;8537:9;8533:18;8166:2;8154:15;;-1:-1:-1;;;8194:4:234;8185:14;;8178:36;8239:2;8230:12;;8089:159;9012:374;9242:2;9231:9;9224:21;9205:4;9262:49;9307:2;9296:9;9292:18;7649:2;7637:15;;-1:-1:-1;;;7677:4:234;7668:14;;7661:36;7722:2;7713:12;;7572:159;9262:49;-1:-1:-1;;;;;9347:32:234;;;;9342:2;9327:18;;;;9320:60;;;;-1:-1:-1;9254:57:234;9012:374::o;9391:::-;9621:2;9610:9;9603:21;9584:4;9641:49;9686:2;9675:9;9671:18;8166:2;8154:15;;-1:-1:-1;;;8194:4:234;8185:14;;8178:36;8239:2;8230:12;;8089:159;10246:317;-1:-1:-1;;;;;10423:32:234;;10405:51;;10492:2;10487;10472:18;;10465:30;;;-1:-1:-1;;10512:45:234;;10538:18;;10530:6;10512:45;:::i;:::-;10504:53;10246:317;-1:-1:-1;;;;10246:317:234:o";
        readonly linkReferences: {};
    };
    readonly methodIdentifiers: {
        readonly "IS_TEST()": "fa7626d4";
        readonly "excludeArtifacts()": "b5508aa9";
        readonly "excludeContracts()": "e20c9f71";
        readonly "excludeSenders()": "1ed7831c";
        readonly "failed()": "ba414fa6";
        readonly "setUp()": "0a9254e4";
        readonly "targetArtifactSelectors()": "66d9a9a0";
        readonly "targetArtifacts()": "85226c81";
        readonly "targetContracts()": "3f7286f4";
        readonly "targetSelectors()": "916a17c6";
        readonly "targetSenders()": "3e5e3c23";
        readonly "test_getHyperdriveInfo()": "716bcaa1";
        readonly "test_setHyperdriveInfo()": "9ccd3fb0";
        readonly "test_setHyperdriveInfo_noAuth()": "dc31d3fa";
        readonly "test_updateGovernance()": "9bbee891";
        readonly "test_updateGovernance_noAuth()": "0ba528ce";
    };
    readonly rawMetadata: "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_getHyperdriveInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_setHyperdriveInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_setHyperdriveInfo_noAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_updateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_updateGovernance_noAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/units/HyperdriveRegistry.sol\":\"HyperdriveRegistryTests\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/src/factory/HyperdriveRegistry.sol\":{\"keccak256\":\"0x6c378c57cdfc4987ddb1baa6e28ad020fca6d0f8749a2b2b214310032be20fef\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://905b35218a5214ec8757aa1bbbe36397a01b409fb09fa0a48c8dda88d26469da\",\"dweb:/ipfs/QmNx6aWTVj42Em7Jmconvwa4irBQUdXypYLjeU1bfzsNmL\"]},\"contracts/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x5f446a4987d57c64380d44c234ee079172e98bed9595ec067eb519898c3117d9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a3245994c58110716f5099c07e5cb270137356d288044f03c713d29c36e207ac\",\"dweb:/ipfs/QmYdn52sGRQKXfSyL8ieSz8HysG6R5kLJWsNwEnyX1e22p\"]},\"contracts/src/interfaces/IHyperdrive.sol\":{\"keccak256\":\"0xc293b4229674624983294b673d6fefce53ed8f6f3d9c6bbcb34da25f42ef2c71\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://084f43e7c42615faabfb6ae9100a8cea6bf9846eb1c433dc08fe634c59cadcaf\",\"dweb:/ipfs/QmXW3GgcbQQg5xnfAC6RT2KBL9ii8s1jwbDtZywWXFydpm\"]},\"contracts/src/interfaces/IHyperdriveCore.sol\":{\"keccak256\":\"0x68adcd293ff25711add1698b6024faa45beec01eb044bd0103d3020aa96d856e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0e0f5e35a7d2c656e249394d25896e5adfb9af3e210c01b9ef5fa81d25a45e24\",\"dweb:/ipfs/QmbLASezHPWHcbodqSfw3Qh9NzqekqVPM8FhCXKGTCXL1h\"]},\"contracts/src/interfaces/IHyperdriveEvents.sol\":{\"keccak256\":\"0x812ccb32dff907e8614c89a65196eec239eceb3e63f9f14dde2b2269c75a67c0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://da5f2ce974bfcd8185342c121c879ba5aef23e1e4e7b36cf9fcba68296b8892c\",\"dweb:/ipfs/QmSho3PWs9bzejTYYjySuXcH9tVP4xFnkbUmSzQA54g8eG\"]},\"contracts/src/interfaces/IHyperdriveGovernedRegistry.sol\":{\"keccak256\":\"0xbc3cbd92913846b65613a28f06e222246891d672661d15674c3d3454722fade2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://dcf1e5d47e4ed0413786db673b13edf8959b0d8b568ffdc1c9e374940e11af99\",\"dweb:/ipfs/QmYDdKhfGHcu6MaJmrJGSvFrHiZfi8bz7DYJg6QxKr5vU7\"]},\"contracts/src/interfaces/IHyperdriveRead.sol\":{\"keccak256\":\"0xfbe341a751b577daa735f836ae9e213b23fffecfb1b7512e4faf3d7807f5b045\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://78ba0c247e48f642f44c30d7771bd752a5fe8bd4a6c10f849f1ad66804149c86\",\"dweb:/ipfs/QmXtSLfErEvA8wqMzXDdqNU9TRMVVgoMibmFSDRJCypi6j\"]},\"contracts/src/interfaces/IHyperdriveRegistry.sol\":{\"keccak256\":\"0x241c66a66aa6b7c75ae11a5724b819ba6b3df202cd6bb569f000e8e307044b00\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4d9c479f9a85da89250f9f8db6fc2c5056a7606c8e604655b5a2c8ccf08b168\",\"dweb:/ipfs/QmZBtC8yHBqf1KcKLjCw3eehERbj2A2j9S6t5SG8aKNToC\"]},\"contracts/src/interfaces/IMultiToken.sol\":{\"keccak256\":\"0xf5f82b8223e0c1bfcf4f73566a909ba07a9266960dfe2335c1494e06debbbe3f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://920cf3fd66132a1e98a6a5708ad9a3bb047f4df8848119ab382b51094c1290a7\",\"dweb:/ipfs/QmWL3SyG8L91Coe9DsHz3Ke9tGMvYBf2NgRRDr3Fg5xFzp\"]},\"contracts/src/interfaces/IMultiTokenCore.sol\":{\"keccak256\":\"0x5c27315743bb6ef8a121ecf72cb24d5c144786dedb6526ef010f580eb872e501\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3e102c51bac9c82766c9826d97dc780a05a2bf64703b070757a7531a0851a1ae\",\"dweb:/ipfs/QmXYwbzPbiznj5AeDiX7NNfRE9xyhSx1huTMfMFndrUZWs\"]},\"contracts/src/interfaces/IMultiTokenEvents.sol\":{\"keccak256\":\"0x165f79e628b1975343f979549f3fdb5073a29aeecb03861f41d165961ee39fdb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3c0751cf322944d080a7a6692897807d0cef798268689afc1f6c8f91182a4222\",\"dweb:/ipfs/QmQVWtCgphU9sjqD2q6F6ww62uXDSWZx5KJVj6jFJpXeDK\"]},\"contracts/src/interfaces/IMultiTokenMetadata.sol\":{\"keccak256\":\"0xcc21ad6d3d4e3de354fbc25a472d940e5e2af0b48766404f9efecdac600d72ca\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b48fa111a773c820fe578efdd737d164e3957930ed46f3f304c6a8602a7e26a3\",\"dweb:/ipfs/QmcA7bjBC6ZBvYyojZZx3eKpugHmSrAAA14p14bQugiVKG\"]},\"contracts/src/interfaces/IMultiTokenRead.sol\":{\"keccak256\":\"0xac84dd306f29ae9d6becf764d93545c33f7c37737bb1aeb714c85930d0c074a0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://d9082a16d5a736ab7ce5670be4f2475ea5c5fdae8ad7096ed9663f84eed96b11\",\"dweb:/ipfs/QmUTH8dZaQJt56UsT7N2aCUCKmjQYj7Ah53rRXk6DuVNUR\"]},\"lib/forge-std/lib/ds-test/src/test.sol\":{\"keccak256\":\"0x8758531bbac3972efcf1fa46383dbe1d276406fe527bc7abb2f236486278e83b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1f64264d61506847acf8761e84aff690cebe830958eac00bac7924d8be569240\",\"dweb:/ipfs/QmSekDJvJ82MZAmr63n7YvfLzQ7gS4NLSHPmHL3GN3rw8k\"]},\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b\",\"dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0xc576f8b81bf19c853baa1fdc23ddc3b9fa1856d5749b01a4f99bed73db7d847d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fad0b975990e50941e255397925be1695b1ec06c3649decdbf759f42e49638d4\",\"dweb:/ipfs/QmeeRsbdgzUoPj1GWZZaoTsiEEuSGfjx7MpykgfxcMa1r1\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0x2e1b4b99283c16efaf155f7e55ea357943cf6e61fc02aad060534349f63b6cd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d471a35903e8a367a145ca5b5955caf691c723fe1117c6dcffd928d9f8d7c95a\",\"dweb:/ipfs/QmXGnFUGiX9APL8xit7NZQEYBoEL3wWyW1YyFoJQd2pGPe\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0xf5762db8ef95099bbe77578cd9349511ed77f4dd63ec98cc6b7cd711447830c1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6b0360806a9804eac0f7e07492b5db9c4953c521dabb9a11b17dd610d5b804c\",\"dweb:/ipfs/QmUFozSt3W7drBRdm1cdRow61EABqSLJtkvYZXWmoHUPss\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c\",\"dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x391a28a2e54aea51a6fb03a3a48035304ca4d24bc669ddf3d4c152c7162e514d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://475fd0d87ccb0fdc4418dea2babffb4adb4aafb817e61f7ef31c2303f10c6c26\",\"dweb:/ipfs/QmQgcgtZxpkW6DRmbJszN1F8mU6zhaTZGdWWsj77yCuWN9\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x8758c42ba9d9e46868b796e2330ac239006ede07bd438a4b36dd6f2c47d27dc1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11f5752e0187b1e3631b875efdbe05d45929d05f1c1717105a9115d0a6628140\",\"dweb:/ipfs/QmUKkx9jfsUvjyYBw45RvrW1hTFXDXi2Jv5tbHP86mnzpi\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x39b1729d5868c8e94ab8af16751eb500a17fe3870dc627d2b7ddcd5df18d7ad0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1568c82aff125cc4b0fc168be9d67ac313f469a3c7405c5493caecaaaecfb765\",\"dweb:/ipfs/QmXByuZReJsdu1jDcxj1FcmpcUnzoBcqybn9kWgDAECWri\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xc37bdacd465b44feb78cdf9a86f62255884be84acd5a4b175f48f004386ce8f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8109a9cb6c5b2f6c137e4bc119ce468d88eaf926ed60558e997a5505827c9241\",\"dweb:/ipfs/QmR1H3wWXwhYD4bXgFFxNubnEZYB28WvvUUHkL9oZx14cx\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"test/units/HyperdriveRegistry.sol\":{\"keccak256\":\"0x737d2bcf1fba16c27f451b5a6a32821dbe4d4ee39ba718f44bcb5cc37154227c\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://35566f011eadd72bbe803d749071193839160c4250c761cddb44b110081c81c6\",\"dweb:/ipfs/Qmf1wzFuaHjpneMtZyFE9L6We3G2G7JfRwbBUgdsFNPzMr\"]}},\"version\":1}";
    readonly metadata: {
        readonly compiler: {
            readonly version: "0.8.20+commit.a1b79de6";
        };
        readonly language: "Solidity";
        readonly output: {
            readonly abi: readonly [{
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "";
                    readonly type: "string";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "";
                    readonly type: "address";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_address";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint256[]";
                    readonly name: "val";
                    readonly type: "uint256[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "int256[]";
                    readonly name: "val";
                    readonly type: "int256[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "val";
                    readonly type: "address[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "bytes";
                    readonly name: "";
                    readonly type: "bytes";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_bytes";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "";
                    readonly type: "bytes32";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_bytes32";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "int256";
                    readonly name: "";
                    readonly type: "int256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_int";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "address";
                    readonly name: "val";
                    readonly type: "address";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_address";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "uint256[]";
                    readonly name: "val";
                    readonly type: "uint256[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "int256[]";
                    readonly name: "val";
                    readonly type: "int256[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "address[]";
                    readonly name: "val";
                    readonly type: "address[]";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_array";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "bytes";
                    readonly name: "val";
                    readonly type: "bytes";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_bytes";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "val";
                    readonly type: "bytes32";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_bytes32";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "int256";
                    readonly name: "val";
                    readonly type: "int256";
                    readonly indexed: false;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "decimals";
                    readonly type: "uint256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_decimal_int";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "val";
                    readonly type: "uint256";
                    readonly indexed: false;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "decimals";
                    readonly type: "uint256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_decimal_uint";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "int256";
                    readonly name: "val";
                    readonly type: "int256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_int";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "string";
                    readonly name: "val";
                    readonly type: "string";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_string";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "key";
                    readonly type: "string";
                    readonly indexed: false;
                }, {
                    readonly internalType: "uint256";
                    readonly name: "val";
                    readonly type: "uint256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_named_uint";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "";
                    readonly type: "string";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_string";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "";
                    readonly type: "uint256";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "log_uint";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "bytes";
                    readonly name: "";
                    readonly type: "bytes";
                    readonly indexed: false;
                }];
                readonly type: "event";
                readonly name: "logs";
                readonly anonymous: false;
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "IS_TEST";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "";
                    readonly type: "bool";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "excludeArtifacts";
                readonly outputs: readonly [{
                    readonly internalType: "string[]";
                    readonly name: "excludedArtifacts_";
                    readonly type: "string[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "excludeContracts";
                readonly outputs: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "excludedContracts_";
                    readonly type: "address[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "excludeSenders";
                readonly outputs: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "excludedSenders_";
                    readonly type: "address[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "failed";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "";
                    readonly type: "bool";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "setUp";
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "targetArtifactSelectors";
                readonly outputs: readonly [{
                    readonly internalType: "struct StdInvariant.FuzzSelector[]";
                    readonly name: "targetedArtifactSelectors_";
                    readonly type: "tuple[]";
                    readonly components: readonly [{
                        readonly internalType: "address";
                        readonly name: "addr";
                        readonly type: "address";
                    }, {
                        readonly internalType: "bytes4[]";
                        readonly name: "selectors";
                        readonly type: "bytes4[]";
                    }];
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "targetArtifacts";
                readonly outputs: readonly [{
                    readonly internalType: "string[]";
                    readonly name: "targetedArtifacts_";
                    readonly type: "string[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "targetContracts";
                readonly outputs: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "targetedContracts_";
                    readonly type: "address[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "targetSelectors";
                readonly outputs: readonly [{
                    readonly internalType: "struct StdInvariant.FuzzSelector[]";
                    readonly name: "targetedSelectors_";
                    readonly type: "tuple[]";
                    readonly components: readonly [{
                        readonly internalType: "address";
                        readonly name: "addr";
                        readonly type: "address";
                    }, {
                        readonly internalType: "bytes4[]";
                        readonly name: "selectors";
                        readonly type: "bytes4[]";
                    }];
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "targetSenders";
                readonly outputs: readonly [{
                    readonly internalType: "address[]";
                    readonly name: "targetedSenders_";
                    readonly type: "address[]";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "test_getHyperdriveInfo";
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "test_setHyperdriveInfo";
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "test_setHyperdriveInfo_noAuth";
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "test_updateGovernance";
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "test_updateGovernance_noAuth";
            }];
            readonly devdoc: {
                readonly kind: "dev";
                readonly methods: {};
                readonly version: 1;
            };
            readonly userdoc: {
                readonly kind: "user";
                readonly methods: {};
                readonly version: 1;
            };
        };
        readonly settings: {
            readonly remappings: readonly ["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/", "ds-test/=lib/forge-std/lib/ds-test/src/", "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/", "forge-std/=lib/forge-std/src/", "openzeppelin-contracts/=lib/openzeppelin-contracts/", "openzeppelin/=lib/openzeppelin-contracts/contracts/", "solmate/=lib/solmate/src/"];
            readonly optimizer: {
                readonly enabled: true;
                readonly runs: 200;
            };
            readonly metadata: {
                readonly bytecodeHash: "ipfs";
            };
            readonly compilationTarget: {
                readonly "test/units/HyperdriveRegistry.sol": "HyperdriveRegistryTests";
            };
            readonly libraries: {};
        };
        readonly sources: {
            readonly "contracts/src/factory/HyperdriveRegistry.sol": {
                readonly keccak256: "0x6c378c57cdfc4987ddb1baa6e28ad020fca6d0f8749a2b2b214310032be20fef";
                readonly urls: readonly ["bzz-raw://905b35218a5214ec8757aa1bbbe36397a01b409fb09fa0a48c8dda88d26469da", "dweb:/ipfs/QmNx6aWTVj42Em7Jmconvwa4irBQUdXypYLjeU1bfzsNmL"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IERC20.sol": {
                readonly keccak256: "0x5f446a4987d57c64380d44c234ee079172e98bed9595ec067eb519898c3117d9";
                readonly urls: readonly ["bzz-raw://a3245994c58110716f5099c07e5cb270137356d288044f03c713d29c36e207ac", "dweb:/ipfs/QmYdn52sGRQKXfSyL8ieSz8HysG6R5kLJWsNwEnyX1e22p"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdrive.sol": {
                readonly keccak256: "0xc293b4229674624983294b673d6fefce53ed8f6f3d9c6bbcb34da25f42ef2c71";
                readonly urls: readonly ["bzz-raw://084f43e7c42615faabfb6ae9100a8cea6bf9846eb1c433dc08fe634c59cadcaf", "dweb:/ipfs/QmXW3GgcbQQg5xnfAC6RT2KBL9ii8s1jwbDtZywWXFydpm"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveCore.sol": {
                readonly keccak256: "0x68adcd293ff25711add1698b6024faa45beec01eb044bd0103d3020aa96d856e";
                readonly urls: readonly ["bzz-raw://0e0f5e35a7d2c656e249394d25896e5adfb9af3e210c01b9ef5fa81d25a45e24", "dweb:/ipfs/QmbLASezHPWHcbodqSfw3Qh9NzqekqVPM8FhCXKGTCXL1h"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveEvents.sol": {
                readonly keccak256: "0x812ccb32dff907e8614c89a65196eec239eceb3e63f9f14dde2b2269c75a67c0";
                readonly urls: readonly ["bzz-raw://da5f2ce974bfcd8185342c121c879ba5aef23e1e4e7b36cf9fcba68296b8892c", "dweb:/ipfs/QmSho3PWs9bzejTYYjySuXcH9tVP4xFnkbUmSzQA54g8eG"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveGovernedRegistry.sol": {
                readonly keccak256: "0xbc3cbd92913846b65613a28f06e222246891d672661d15674c3d3454722fade2";
                readonly urls: readonly ["bzz-raw://dcf1e5d47e4ed0413786db673b13edf8959b0d8b568ffdc1c9e374940e11af99", "dweb:/ipfs/QmYDdKhfGHcu6MaJmrJGSvFrHiZfi8bz7DYJg6QxKr5vU7"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveRead.sol": {
                readonly keccak256: "0xfbe341a751b577daa735f836ae9e213b23fffecfb1b7512e4faf3d7807f5b045";
                readonly urls: readonly ["bzz-raw://78ba0c247e48f642f44c30d7771bd752a5fe8bd4a6c10f849f1ad66804149c86", "dweb:/ipfs/QmXtSLfErEvA8wqMzXDdqNU9TRMVVgoMibmFSDRJCypi6j"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveRegistry.sol": {
                readonly keccak256: "0x241c66a66aa6b7c75ae11a5724b819ba6b3df202cd6bb569f000e8e307044b00";
                readonly urls: readonly ["bzz-raw://c4d9c479f9a85da89250f9f8db6fc2c5056a7606c8e604655b5a2c8ccf08b168", "dweb:/ipfs/QmZBtC8yHBqf1KcKLjCw3eehERbj2A2j9S6t5SG8aKNToC"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiToken.sol": {
                readonly keccak256: "0xf5f82b8223e0c1bfcf4f73566a909ba07a9266960dfe2335c1494e06debbbe3f";
                readonly urls: readonly ["bzz-raw://920cf3fd66132a1e98a6a5708ad9a3bb047f4df8848119ab382b51094c1290a7", "dweb:/ipfs/QmWL3SyG8L91Coe9DsHz3Ke9tGMvYBf2NgRRDr3Fg5xFzp"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenCore.sol": {
                readonly keccak256: "0x5c27315743bb6ef8a121ecf72cb24d5c144786dedb6526ef010f580eb872e501";
                readonly urls: readonly ["bzz-raw://3e102c51bac9c82766c9826d97dc780a05a2bf64703b070757a7531a0851a1ae", "dweb:/ipfs/QmXYwbzPbiznj5AeDiX7NNfRE9xyhSx1huTMfMFndrUZWs"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenEvents.sol": {
                readonly keccak256: "0x165f79e628b1975343f979549f3fdb5073a29aeecb03861f41d165961ee39fdb";
                readonly urls: readonly ["bzz-raw://3c0751cf322944d080a7a6692897807d0cef798268689afc1f6c8f91182a4222", "dweb:/ipfs/QmQVWtCgphU9sjqD2q6F6ww62uXDSWZx5KJVj6jFJpXeDK"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenMetadata.sol": {
                readonly keccak256: "0xcc21ad6d3d4e3de354fbc25a472d940e5e2af0b48766404f9efecdac600d72ca";
                readonly urls: readonly ["bzz-raw://b48fa111a773c820fe578efdd737d164e3957930ed46f3f304c6a8602a7e26a3", "dweb:/ipfs/QmcA7bjBC6ZBvYyojZZx3eKpugHmSrAAA14p14bQugiVKG"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenRead.sol": {
                readonly keccak256: "0xac84dd306f29ae9d6becf764d93545c33f7c37737bb1aeb714c85930d0c074a0";
                readonly urls: readonly ["bzz-raw://d9082a16d5a736ab7ce5670be4f2475ea5c5fdae8ad7096ed9663f84eed96b11", "dweb:/ipfs/QmUTH8dZaQJt56UsT7N2aCUCKmjQYj7Ah53rRXk6DuVNUR"];
                readonly license: "Apache-2.0";
            };
            readonly "lib/forge-std/lib/ds-test/src/test.sol": {
                readonly keccak256: "0x8758531bbac3972efcf1fa46383dbe1d276406fe527bc7abb2f236486278e83b";
                readonly urls: readonly ["bzz-raw://1f64264d61506847acf8761e84aff690cebe830958eac00bac7924d8be569240", "dweb:/ipfs/QmSekDJvJ82MZAmr63n7YvfLzQ7gS4NLSHPmHL3GN3rw8k"];
                readonly license: "GPL-3.0-or-later";
            };
            readonly "lib/forge-std/src/Base.sol": {
                readonly keccak256: "0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c";
                readonly urls: readonly ["bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224", "dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdAssertions.sol": {
                readonly keccak256: "0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60";
                readonly urls: readonly ["bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b", "dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdChains.sol": {
                readonly keccak256: "0xc576f8b81bf19c853baa1fdc23ddc3b9fa1856d5749b01a4f99bed73db7d847d";
                readonly urls: readonly ["bzz-raw://fad0b975990e50941e255397925be1695b1ec06c3649decdbf759f42e49638d4", "dweb:/ipfs/QmeeRsbdgzUoPj1GWZZaoTsiEEuSGfjx7MpykgfxcMa1r1"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdCheats.sol": {
                readonly keccak256: "0x2e1b4b99283c16efaf155f7e55ea357943cf6e61fc02aad060534349f63b6cd5";
                readonly urls: readonly ["bzz-raw://d471a35903e8a367a145ca5b5955caf691c723fe1117c6dcffd928d9f8d7c95a", "dweb:/ipfs/QmXGnFUGiX9APL8xit7NZQEYBoEL3wWyW1YyFoJQd2pGPe"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdError.sol": {
                readonly keccak256: "0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77";
                readonly urls: readonly ["bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6", "dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdInvariant.sol": {
                readonly keccak256: "0xf5762db8ef95099bbe77578cd9349511ed77f4dd63ec98cc6b7cd711447830c1";
                readonly urls: readonly ["bzz-raw://a6b0360806a9804eac0f7e07492b5db9c4953c521dabb9a11b17dd610d5b804c", "dweb:/ipfs/QmUFozSt3W7drBRdm1cdRow61EABqSLJtkvYZXWmoHUPss"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdJson.sol": {
                readonly keccak256: "0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b";
                readonly urls: readonly ["bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c", "dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdMath.sol": {
                readonly keccak256: "0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2";
                readonly urls: readonly ["bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92", "dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdStorage.sol": {
                readonly keccak256: "0x391a28a2e54aea51a6fb03a3a48035304ca4d24bc669ddf3d4c152c7162e514d";
                readonly urls: readonly ["bzz-raw://475fd0d87ccb0fdc4418dea2babffb4adb4aafb817e61f7ef31c2303f10c6c26", "dweb:/ipfs/QmQgcgtZxpkW6DRmbJszN1F8mU6zhaTZGdWWsj77yCuWN9"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdStyle.sol": {
                readonly keccak256: "0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d";
                readonly urls: readonly ["bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8", "dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/StdUtils.sol": {
                readonly keccak256: "0x8758c42ba9d9e46868b796e2330ac239006ede07bd438a4b36dd6f2c47d27dc1";
                readonly urls: readonly ["bzz-raw://11f5752e0187b1e3631b875efdbe05d45929d05f1c1717105a9115d0a6628140", "dweb:/ipfs/QmUKkx9jfsUvjyYBw45RvrW1hTFXDXi2Jv5tbHP86mnzpi"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/Test.sol": {
                readonly keccak256: "0x39b1729d5868c8e94ab8af16751eb500a17fe3870dc627d2b7ddcd5df18d7ad0";
                readonly urls: readonly ["bzz-raw://1568c82aff125cc4b0fc168be9d67ac313f469a3c7405c5493caecaaaecfb765", "dweb:/ipfs/QmXByuZReJsdu1jDcxj1FcmpcUnzoBcqybn9kWgDAECWri"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/Vm.sol": {
                readonly keccak256: "0xc37bdacd465b44feb78cdf9a86f62255884be84acd5a4b175f48f004386ce8f4";
                readonly urls: readonly ["bzz-raw://8109a9cb6c5b2f6c137e4bc119ce468d88eaf926ed60558e997a5505827c9241", "dweb:/ipfs/QmR1H3wWXwhYD4bXgFFxNubnEZYB28WvvUUHkL9oZx14cx"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/console.sol": {
                readonly keccak256: "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba";
                readonly urls: readonly ["bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70", "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/console2.sol": {
                readonly keccak256: "0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea";
                readonly urls: readonly ["bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973", "dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/interfaces/IMulticall3.sol": {
                readonly keccak256: "0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a";
                readonly urls: readonly ["bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0", "dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2"];
                readonly license: "MIT";
            };
            readonly "lib/forge-std/src/safeconsole.sol": {
                readonly keccak256: "0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381";
                readonly urls: readonly ["bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae", "dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq"];
                readonly license: "MIT";
            };
            readonly "test/units/HyperdriveRegistry.sol": {
                readonly keccak256: "0x737d2bcf1fba16c27f451b5a6a32821dbe4d4ee39ba718f44bcb5cc37154227c";
                readonly urls: readonly ["bzz-raw://35566f011eadd72bbe803d749071193839160c4250c761cddb44b110081c81c6", "dweb:/ipfs/Qmf1wzFuaHjpneMtZyFE9L6We3G2G7JfRwbBUgdsFNPzMr"];
                readonly license: "Apache-2.0";
            };
        };
        readonly version: 1;
    };
    readonly ast: {
        readonly absolutePath: "test/units/HyperdriveRegistry.sol";
        readonly id: 121819;
        readonly exportedSymbols: {
            readonly DSTest: readonly [29642];
            readonly HyperdriveRegistry: readonly [7653];
            readonly HyperdriveRegistryTests: readonly [121818];
            readonly IHyperdrive: readonly [10676];
            readonly StdAssertions: readonly [31135];
            readonly StdChains: readonly [31855];
            readonly StdCheats: readonly [34673];
            readonly StdInvariant: readonly [34963];
            readonly StdStorage: readonly [35713];
            readonly StdStyle: readonly [38377];
            readonly StdUtils: readonly [39225];
            readonly Test: readonly [39276];
            readonly TestBase: readonly [29708];
            readonly Vm: readonly [40813];
            readonly console: readonly [48877];
            readonly console2: readonly [57002];
            readonly safeconsole: readonly [70240];
            readonly stdError: readonly [34739];
            readonly stdJson: readonly [35539];
            readonly stdMath: readonly [35681];
            readonly stdStorage: readonly [37166];
        };
        readonly nodeType: "SourceUnit";
        readonly src: "39:1976:205";
        readonly nodes: readonly [{
            readonly id: 121603;
            readonly nodeType: "PragmaDirective";
            readonly src: "39:24:205";
            readonly nodes: readonly [];
            readonly literals: readonly ["solidity", "^", "0.8", ".18"];
        }, {
            readonly id: 121604;
            readonly nodeType: "ImportDirective";
            readonly src: "65:28:205";
            readonly nodes: readonly [];
            readonly absolutePath: "lib/forge-std/src/Test.sol";
            readonly file: "forge-std/Test.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 121819;
            readonly sourceUnit: 39277;
            readonly symbolAliases: readonly [];
            readonly unitAlias: "";
        }, {
            readonly id: 121606;
            readonly nodeType: "ImportDirective";
            readonly src: "95:71:205";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IHyperdrive.sol";
            readonly file: "contracts/src/interfaces/IHyperdrive.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 121819;
            readonly sourceUnit: 10677;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 121605;
                    readonly name: "IHyperdrive";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 10676;
                    readonly src: "104:11:205";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 121608;
            readonly nodeType: "ImportDirective";
            readonly src: "168:82:205";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/factory/HyperdriveRegistry.sol";
            readonly file: "contracts/src/factory/HyperdriveRegistry.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 121819;
            readonly sourceUnit: 7654;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 121607;
                    readonly name: "HyperdriveRegistry";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 7653;
                    readonly src: "177:18:205";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 121818;
            readonly nodeType: "ContractDefinition";
            readonly src: "252:1762:205";
            readonly nodes: readonly [{
                readonly id: 121613;
                readonly nodeType: "VariableDeclaration";
                readonly src: "299:27:205";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly mutability: "mutable";
                readonly name: "registry";
                readonly nameLocation: "318:8:205";
                readonly scope: 121818;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                    readonly typeString: "contract HyperdriveRegistry";
                };
                readonly typeName: {
                    readonly id: 121612;
                    readonly nodeType: "UserDefinedTypeName";
                    readonly pathNode: {
                        readonly id: 121611;
                        readonly name: "HyperdriveRegistry";
                        readonly nameLocations: readonly ["299:18:205"];
                        readonly nodeType: "IdentifierPath";
                        readonly referencedDeclaration: 7653;
                        readonly src: "299:18:205";
                    };
                    readonly referencedDeclaration: 7653;
                    readonly src: "299:18:205";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                        readonly typeString: "contract HyperdriveRegistry";
                    };
                };
                readonly visibility: "internal";
            }, {
                readonly id: 121624;
                readonly nodeType: "FunctionDefinition";
                readonly src: "333:78:205";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 121623;
                    readonly nodeType: "Block";
                    readonly src: "359:52:205";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly id: 121621;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 121616;
                                readonly name: "registry";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 121613;
                                readonly src: "369:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                    readonly typeString: "contract HyperdriveRegistry";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [];
                                readonly expression: {
                                    readonly argumentTypes: readonly [];
                                    readonly id: 121619;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly nodeType: "NewExpression";
                                    readonly src: "380:22:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_creation_nonpayable$__$returns$_t_contract$_HyperdriveRegistry_$7653_$";
                                        readonly typeString: "function () returns (contract HyperdriveRegistry)";
                                    };
                                    readonly typeName: {
                                        readonly id: 121618;
                                        readonly nodeType: "UserDefinedTypeName";
                                        readonly pathNode: {
                                            readonly id: 121617;
                                            readonly name: "HyperdriveRegistry";
                                            readonly nameLocations: readonly ["384:18:205"];
                                            readonly nodeType: "IdentifierPath";
                                            readonly referencedDeclaration: 7653;
                                            readonly src: "384:18:205";
                                        };
                                        readonly referencedDeclaration: 7653;
                                        readonly src: "384:18:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                            readonly typeString: "contract HyperdriveRegistry";
                                        };
                                    };
                                };
                                readonly id: 121620;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "380:24:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                    readonly typeString: "contract HyperdriveRegistry";
                                };
                            };
                            readonly src: "369:35:205";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                readonly typeString: "contract HyperdriveRegistry";
                            };
                        };
                        readonly id: 121622;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "369:35:205";
                    }];
                };
                readonly functionSelector: "0a9254e4";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "setUp";
                readonly nameLocation: "342:5:205";
                readonly parameters: {
                    readonly id: 121614;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "347:2:205";
                };
                readonly returnParameters: {
                    readonly id: 121615;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "359:0:205";
                };
                readonly scope: 121818;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "external";
            }, {
                readonly id: 121656;
                readonly nodeType: "FunctionDefinition";
                readonly src: "417:254:205";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 121655;
                    readonly nodeType: "Block";
                    readonly src: "464:207:205";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [121628];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 121628;
                            readonly mutability: "mutable";
                            readonly name: "notAdmin";
                            readonly nameLocation: "482:8:205";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 121655;
                            readonly src: "474:16:205";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                            readonly typeName: {
                                readonly id: 121627;
                                readonly name: "address";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "474:7:205";
                                readonly stateMutability: "nonpayable";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 121632;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly hexValue: "6e6f7441646d696e";
                                readonly id: 121630;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "string";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "502:10:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_stringliteral_629b74486970c23857e48b976c9a74a9df83fe59f3ac3c4e34f14eac0f324abd";
                                    readonly typeString: "literal_string \"notAdmin\"";
                                };
                                readonly value: "notAdmin";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_stringliteral_629b74486970c23857e48b976c9a74a9df83fe59f3ac3c4e34f14eac0f324abd";
                                    readonly typeString: "literal_string \"notAdmin\"";
                                }];
                                readonly id: 121629;
                                readonly name: "makeAddr";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 33671;
                                readonly src: "493:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                    readonly typeString: "function (string memory) returns (address)";
                                };
                            };
                            readonly id: 121631;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "493:20:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "474:39:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 121636;
                                readonly name: "notAdmin";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 121628;
                                readonly src: "533:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }];
                                readonly expression: {
                                    readonly id: 121633;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 29701;
                                    readonly src: "524:2:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$40813";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 121635;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "527:5:205";
                                readonly memberName: "prank";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 40411;
                                readonly src: "524:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$returns$__$";
                                    readonly typeString: "function (address) external";
                                };
                            };
                            readonly id: 121637;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "524:18:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121638;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "524:18:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly expression: {
                                    readonly expression: {
                                        readonly id: 121642;
                                        readonly name: "IHyperdrive";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 10676;
                                        readonly src: "568:11:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_contract$_IHyperdrive_$10676_$";
                                            readonly typeString: "type(contract IHyperdrive)";
                                        };
                                    };
                                    readonly id: 121643;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "580:12:205";
                                    readonly memberName: "Unauthorized";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 10624;
                                    readonly src: "568:24:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_error_pure$__$returns$__$";
                                        readonly typeString: "function () pure";
                                    };
                                };
                                readonly id: 121644;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "593:8:205";
                                readonly memberName: "selector";
                                readonly nodeType: "MemberAccess";
                                readonly src: "568:33:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes4";
                                    readonly typeString: "bytes4";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes4";
                                    readonly typeString: "bytes4";
                                }];
                                readonly expression: {
                                    readonly id: 121639;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 29701;
                                    readonly src: "552:2:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$40813";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 121641;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "555:12:205";
                                readonly memberName: "expectRevert";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 40472;
                                readonly src: "552:15:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_bytes4_$returns$__$";
                                    readonly typeString: "function (bytes4) external";
                                };
                            };
                            readonly id: 121645;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "552:50:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121646;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "552:50:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly hexValue: "6e6577476f7665726e616e6365";
                                    readonly id: 121651;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "647:15:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_96ba6c2b717aa6fab0e2333d3f727e17df564737c00b88d1dc9f0e8e4889050c";
                                        readonly typeString: "literal_string \"newGovernance\"";
                                    };
                                    readonly value: "newGovernance";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_96ba6c2b717aa6fab0e2333d3f727e17df564737c00b88d1dc9f0e8e4889050c";
                                        readonly typeString: "literal_string \"newGovernance\"";
                                    }];
                                    readonly id: 121650;
                                    readonly name: "makeAddr";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 33671;
                                    readonly src: "638:8:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 121652;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "638:25:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }];
                                readonly expression: {
                                    readonly id: 121647;
                                    readonly name: "registry";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121613;
                                    readonly src: "612:8:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                        readonly typeString: "contract HyperdriveRegistry";
                                    };
                                };
                                readonly id: 121649;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "621:16:205";
                                readonly memberName: "updateGovernance";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 7615;
                                readonly src: "612:25:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$returns$__$";
                                    readonly typeString: "function (address) external";
                                };
                            };
                            readonly id: 121653;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "612:52:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121654;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "612:52:205";
                    }];
                };
                readonly functionSelector: "0ba528ce";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "test_updateGovernance_noAuth";
                readonly nameLocation: "426:28:205";
                readonly parameters: {
                    readonly id: 121625;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "454:2:205";
                };
                readonly returnParameters: {
                    readonly id: 121626;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "464:0:205";
                };
                readonly scope: 121818;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "public";
            }, {
                readonly id: 121689;
                readonly nodeType: "FunctionDefinition";
                readonly src: "677:271:205";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 121688;
                    readonly nodeType: "Block";
                    readonly src: "717:231:205";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [121660];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 121660;
                            readonly mutability: "mutable";
                            readonly name: "newGovernance";
                            readonly nameLocation: "735:13:205";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 121688;
                            readonly src: "727:21:205";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                            readonly typeName: {
                                readonly id: 121659;
                                readonly name: "address";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "727:7:205";
                                readonly stateMutability: "nonpayable";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 121664;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly hexValue: "6e6577476f7665726e616e6365";
                                readonly id: 121662;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "string";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "760:15:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_stringliteral_96ba6c2b717aa6fab0e2333d3f727e17df564737c00b88d1dc9f0e8e4889050c";
                                    readonly typeString: "literal_string \"newGovernance\"";
                                };
                                readonly value: "newGovernance";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_stringliteral_96ba6c2b717aa6fab0e2333d3f727e17df564737c00b88d1dc9f0e8e4889050c";
                                    readonly typeString: "literal_string \"newGovernance\"";
                                }];
                                readonly id: 121661;
                                readonly name: "makeAddr";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 33671;
                                readonly src: "751:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                    readonly typeString: "function (string memory) returns (address)";
                                };
                            };
                            readonly id: 121663;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "751:25:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "727:49:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [];
                                readonly expression: {
                                    readonly argumentTypes: readonly [];
                                    readonly expression: {
                                        readonly id: 121666;
                                        readonly name: "registry";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 121613;
                                        readonly src: "796:8:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                            readonly typeString: "contract HyperdriveRegistry";
                                        };
                                    };
                                    readonly id: 121667;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "805:10:205";
                                    readonly memberName: "governance";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 7569;
                                    readonly src: "796:19:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_view$__$returns$_t_address_$";
                                        readonly typeString: "function () view external returns (address)";
                                    };
                                };
                                readonly id: 121668;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "796:21:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly arguments: readonly [{
                                    readonly id: 121671;
                                    readonly name: "this";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: -28;
                                    readonly src: "827:4:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_HyperdriveRegistryTests_$121818";
                                        readonly typeString: "contract HyperdriveRegistryTests";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_contract$_HyperdriveRegistryTests_$121818";
                                        readonly typeString: "contract HyperdriveRegistryTests";
                                    }];
                                    readonly id: 121670;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly nodeType: "ElementaryTypeNameExpression";
                                    readonly src: "819:7:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_type$_t_address_$";
                                        readonly typeString: "type(address)";
                                    };
                                    readonly typeName: {
                                        readonly id: 121669;
                                        readonly name: "address";
                                        readonly nodeType: "ElementaryTypeName";
                                        readonly src: "819:7:205";
                                        readonly typeDescriptions: {};
                                    };
                                };
                                readonly id: 121672;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "typeConversion";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "819:13:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }];
                                readonly id: 121665;
                                readonly name: "assertEq";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [29836, 29861, 29874, 29890, 29932, 29974, 30016, 30053, 30090, 30127, 27671, 27696, 27726, 27751, 27810, 27835, 27865, 27890, 29363, 29398];
                                readonly referencedDeclaration: 27671;
                                readonly src: "787:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$";
                                    readonly typeString: "function (address,address)";
                                };
                            };
                            readonly id: 121673;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "787:46:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121674;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "787:46:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 121678;
                                readonly name: "newGovernance";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 121660;
                                readonly src: "870:13:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }];
                                readonly expression: {
                                    readonly id: 121675;
                                    readonly name: "registry";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121613;
                                    readonly src: "844:8:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                        readonly typeString: "contract HyperdriveRegistry";
                                    };
                                };
                                readonly id: 121677;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "853:16:205";
                                readonly memberName: "updateGovernance";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 7615;
                                readonly src: "844:25:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$returns$__$";
                                    readonly typeString: "function (address) external";
                                };
                            };
                            readonly id: 121679;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "844:40:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121680;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "844:40:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [];
                                readonly expression: {
                                    readonly argumentTypes: readonly [];
                                    readonly expression: {
                                        readonly id: 121682;
                                        readonly name: "registry";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 121613;
                                        readonly src: "904:8:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                            readonly typeString: "contract HyperdriveRegistry";
                                        };
                                    };
                                    readonly id: 121683;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "913:10:205";
                                    readonly memberName: "governance";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 7569;
                                    readonly src: "904:19:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_view$__$returns$_t_address_$";
                                        readonly typeString: "function () view external returns (address)";
                                    };
                                };
                                readonly id: 121684;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "904:21:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly id: 121685;
                                readonly name: "newGovernance";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 121660;
                                readonly src: "927:13:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }];
                                readonly id: 121681;
                                readonly name: "assertEq";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [29836, 29861, 29874, 29890, 29932, 29974, 30016, 30053, 30090, 30127, 27671, 27696, 27726, 27751, 27810, 27835, 27865, 27890, 29363, 29398];
                                readonly referencedDeclaration: 27671;
                                readonly src: "895:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$";
                                    readonly typeString: "function (address,address)";
                                };
                            };
                            readonly id: 121686;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "895:46:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121687;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "895:46:205";
                    }];
                };
                readonly functionSelector: "9bbee891";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "test_updateGovernance";
                readonly nameLocation: "686:21:205";
                readonly parameters: {
                    readonly id: 121657;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "707:2:205";
                };
                readonly returnParameters: {
                    readonly id: 121658;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "717:0:205";
                };
                readonly scope: 121818;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "public";
            }, {
                readonly id: 121722;
                readonly nodeType: "FunctionDefinition";
                readonly src: "954:256:205";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 121721;
                    readonly nodeType: "Block";
                    readonly src: "1002:208:205";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [121693];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 121693;
                            readonly mutability: "mutable";
                            readonly name: "notAdmin";
                            readonly nameLocation: "1020:8:205";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 121721;
                            readonly src: "1012:16:205";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                            readonly typeName: {
                                readonly id: 121692;
                                readonly name: "address";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "1012:7:205";
                                readonly stateMutability: "nonpayable";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 121697;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly hexValue: "6e6f7441646d696e";
                                readonly id: 121695;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "string";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1040:10:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_stringliteral_629b74486970c23857e48b976c9a74a9df83fe59f3ac3c4e34f14eac0f324abd";
                                    readonly typeString: "literal_string \"notAdmin\"";
                                };
                                readonly value: "notAdmin";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_stringliteral_629b74486970c23857e48b976c9a74a9df83fe59f3ac3c4e34f14eac0f324abd";
                                    readonly typeString: "literal_string \"notAdmin\"";
                                }];
                                readonly id: 121694;
                                readonly name: "makeAddr";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 33671;
                                readonly src: "1031:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                    readonly typeString: "function (string memory) returns (address)";
                                };
                            };
                            readonly id: 121696;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1031:20:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "1012:39:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 121701;
                                readonly name: "notAdmin";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 121693;
                                readonly src: "1071:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }];
                                readonly expression: {
                                    readonly id: 121698;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 29701;
                                    readonly src: "1062:2:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$40813";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 121700;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1065:5:205";
                                readonly memberName: "prank";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 40411;
                                readonly src: "1062:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$returns$__$";
                                    readonly typeString: "function (address) external";
                                };
                            };
                            readonly id: 121702;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1062:18:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121703;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1062:18:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly expression: {
                                    readonly expression: {
                                        readonly id: 121707;
                                        readonly name: "IHyperdrive";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 10676;
                                        readonly src: "1106:11:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_contract$_IHyperdrive_$10676_$";
                                            readonly typeString: "type(contract IHyperdrive)";
                                        };
                                    };
                                    readonly id: 121708;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "1118:12:205";
                                    readonly memberName: "Unauthorized";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 10624;
                                    readonly src: "1106:24:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_error_pure$__$returns$__$";
                                        readonly typeString: "function () pure";
                                    };
                                };
                                readonly id: 121709;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1131:8:205";
                                readonly memberName: "selector";
                                readonly nodeType: "MemberAccess";
                                readonly src: "1106:33:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes4";
                                    readonly typeString: "bytes4";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes4";
                                    readonly typeString: "bytes4";
                                }];
                                readonly expression: {
                                    readonly id: 121704;
                                    readonly name: "vm";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 29701;
                                    readonly src: "1090:2:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_Vm_$40813";
                                        readonly typeString: "contract Vm";
                                    };
                                };
                                readonly id: 121706;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1093:12:205";
                                readonly memberName: "expectRevert";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 40472;
                                readonly src: "1090:15:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_bytes4_$returns$__$";
                                    readonly typeString: "function (bytes4) external";
                                };
                            };
                            readonly id: 121710;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1090:50:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121711;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1090:50:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly hexValue: "68797065726472697665";
                                    readonly id: 121716;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "string";
                                    readonly lValueRequested: false;
                                    readonly nodeType: "Literal";
                                    readonly src: "1186:12:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_stringliteral_db549222efe01ccd500ddbe378a420d9a5d9d43d6893221b7f2246b93d75db69";
                                        readonly typeString: "literal_string \"hyperdrive\"";
                                    };
                                    readonly value: "hyperdrive";
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_stringliteral_db549222efe01ccd500ddbe378a420d9a5d9d43d6893221b7f2246b93d75db69";
                                        readonly typeString: "literal_string \"hyperdrive\"";
                                    }];
                                    readonly id: 121715;
                                    readonly name: "makeAddr";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 33671;
                                    readonly src: "1177:8:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                        readonly typeString: "function (string memory) returns (address)";
                                    };
                                };
                                readonly id: 121717;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1177:22:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly hexValue: "30";
                                readonly id: 121718;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1201:1:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_0_by_1";
                                    readonly typeString: "int_const 0";
                                };
                                readonly value: "0";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_rational_0_by_1";
                                    readonly typeString: "int_const 0";
                                }];
                                readonly expression: {
                                    readonly id: 121712;
                                    readonly name: "registry";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121613;
                                    readonly src: "1150:8:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                        readonly typeString: "contract HyperdriveRegistry";
                                    };
                                };
                                readonly id: 121714;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1159:17:205";
                                readonly memberName: "setHyperdriveInfo";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 7638;
                                readonly src: "1150:26:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (address,uint256) external";
                                };
                            };
                            readonly id: 121719;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1150:53:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121720;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1150:53:205";
                    }];
                };
                readonly functionSelector: "dc31d3fa";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "test_setHyperdriveInfo_noAuth";
                readonly nameLocation: "963:29:205";
                readonly parameters: {
                    readonly id: 121690;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "992:2:205";
                };
                readonly returnParameters: {
                    readonly id: 121691;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "1002:0:205";
                };
                readonly scope: 121818;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "public";
            }, {
                readonly id: 121755;
                readonly nodeType: "FunctionDefinition";
                readonly src: "1216:277:205";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 121754;
                    readonly nodeType: "Block";
                    readonly src: "1257:236:205";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [121726];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 121726;
                            readonly mutability: "mutable";
                            readonly name: "hyperdrive";
                            readonly nameLocation: "1275:10:205";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 121754;
                            readonly src: "1267:18:205";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                            readonly typeName: {
                                readonly id: 121725;
                                readonly name: "address";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "1267:7:205";
                                readonly stateMutability: "nonpayable";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 121730;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly hexValue: "68797065726472697665";
                                readonly id: 121728;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "string";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1297:12:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_stringliteral_db549222efe01ccd500ddbe378a420d9a5d9d43d6893221b7f2246b93d75db69";
                                    readonly typeString: "literal_string \"hyperdrive\"";
                                };
                                readonly value: "hyperdrive";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_stringliteral_db549222efe01ccd500ddbe378a420d9a5d9d43d6893221b7f2246b93d75db69";
                                    readonly typeString: "literal_string \"hyperdrive\"";
                                }];
                                readonly id: 121727;
                                readonly name: "makeAddr";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 33671;
                                readonly src: "1288:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                    readonly typeString: "function (string memory) returns (address)";
                                };
                            };
                            readonly id: 121729;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1288:22:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "1267:43:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 121734;
                                    readonly name: "hyperdrive";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121726;
                                    readonly src: "1357:10:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }];
                                    readonly expression: {
                                        readonly id: 121732;
                                        readonly name: "registry";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 121613;
                                        readonly src: "1330:8:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                            readonly typeString: "contract HyperdriveRegistry";
                                        };
                                    };
                                    readonly id: 121733;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "1339:17:205";
                                    readonly memberName: "getHyperdriveInfo";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 7652;
                                    readonly src: "1330:26:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$";
                                        readonly typeString: "function (address) view external returns (uint256)";
                                    };
                                };
                                readonly id: 121735;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1330:38:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }, {
                                readonly hexValue: "30";
                                readonly id: 121736;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1370:1:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_0_by_1";
                                    readonly typeString: "int_const 0";
                                };
                                readonly value: "0";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }, {
                                    readonly typeIdentifier: "t_rational_0_by_1";
                                    readonly typeString: "int_const 0";
                                }];
                                readonly id: 121731;
                                readonly name: "assertEq";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [29836, 29861, 29874, 29890, 29932, 29974, 30016, 30053, 30090, 30127, 27671, 27696, 27726, 27751, 27810, 27835, 27865, 27890, 29363, 29398];
                                readonly referencedDeclaration: 27865;
                                readonly src: "1321:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256,uint256)";
                                };
                            };
                            readonly id: 121737;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1321:51:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121738;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1321:51:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 121742;
                                readonly name: "hyperdrive";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 121726;
                                readonly src: "1410:10:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly hexValue: "31";
                                readonly id: 121743;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1422:1:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                };
                                readonly value: "1";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                }];
                                readonly expression: {
                                    readonly id: 121739;
                                    readonly name: "registry";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121613;
                                    readonly src: "1383:8:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                        readonly typeString: "contract HyperdriveRegistry";
                                    };
                                };
                                readonly id: 121741;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1392:17:205";
                                readonly memberName: "setHyperdriveInfo";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 7638;
                                readonly src: "1383:26:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (address,uint256) external";
                                };
                            };
                            readonly id: 121744;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1383:41:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121745;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1383:41:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 121749;
                                    readonly name: "hyperdrive";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121726;
                                    readonly src: "1471:10:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }];
                                    readonly expression: {
                                        readonly id: 121747;
                                        readonly name: "registry";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 121613;
                                        readonly src: "1444:8:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                            readonly typeString: "contract HyperdriveRegistry";
                                        };
                                    };
                                    readonly id: 121748;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "1453:17:205";
                                    readonly memberName: "getHyperdriveInfo";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 7652;
                                    readonly src: "1444:26:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$";
                                        readonly typeString: "function (address) view external returns (uint256)";
                                    };
                                };
                                readonly id: 121750;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1444:38:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }, {
                                readonly hexValue: "31";
                                readonly id: 121751;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1484:1:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                };
                                readonly value: "1";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }, {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                }];
                                readonly id: 121746;
                                readonly name: "assertEq";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [29836, 29861, 29874, 29890, 29932, 29974, 30016, 30053, 30090, 30127, 27671, 27696, 27726, 27751, 27810, 27835, 27865, 27890, 29363, 29398];
                                readonly referencedDeclaration: 27865;
                                readonly src: "1435:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256,uint256)";
                                };
                            };
                            readonly id: 121752;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1435:51:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121753;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1435:51:205";
                    }];
                };
                readonly functionSelector: "9ccd3fb0";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "test_setHyperdriveInfo";
                readonly nameLocation: "1225:22:205";
                readonly parameters: {
                    readonly id: 121723;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "1247:2:205";
                };
                readonly returnParameters: {
                    readonly id: 121724;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "1257:0:205";
                };
                readonly scope: 121818;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "public";
            }, {
                readonly id: 121817;
                readonly nodeType: "FunctionDefinition";
                readonly src: "1499:513:205";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 121816;
                    readonly nodeType: "Block";
                    readonly src: "1540:472:205";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [121759];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 121759;
                            readonly mutability: "mutable";
                            readonly name: "hyperdrive1";
                            readonly nameLocation: "1558:11:205";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 121816;
                            readonly src: "1550:19:205";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                            readonly typeName: {
                                readonly id: 121758;
                                readonly name: "address";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "1550:7:205";
                                readonly stateMutability: "nonpayable";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 121763;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly hexValue: "6879706572647269766531";
                                readonly id: 121761;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "string";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1581:13:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_stringliteral_d689592bcf43a56dd7a31613407d0e33267c3af56d429ce0ac9de830def2bcb2";
                                    readonly typeString: "literal_string \"hyperdrive1\"";
                                };
                                readonly value: "hyperdrive1";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_stringliteral_d689592bcf43a56dd7a31613407d0e33267c3af56d429ce0ac9de830def2bcb2";
                                    readonly typeString: "literal_string \"hyperdrive1\"";
                                }];
                                readonly id: 121760;
                                readonly name: "makeAddr";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 33671;
                                readonly src: "1572:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                    readonly typeString: "function (string memory) returns (address)";
                                };
                            };
                            readonly id: 121762;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1572:23:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "1550:45:205";
                    }, {
                        readonly assignments: readonly [121765];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 121765;
                            readonly mutability: "mutable";
                            readonly name: "hyperdrive2";
                            readonly nameLocation: "1613:11:205";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 121816;
                            readonly src: "1605:19:205";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                            readonly typeName: {
                                readonly id: 121764;
                                readonly name: "address";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "1605:7:205";
                                readonly stateMutability: "nonpayable";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 121769;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly hexValue: "6879706572647269766532";
                                readonly id: 121767;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "string";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1636:13:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_stringliteral_ff9adfbabf7e88ba3f14d11a2df47170c6cd98f553996566a0c61c120a77b1e1";
                                    readonly typeString: "literal_string \"hyperdrive2\"";
                                };
                                readonly value: "hyperdrive2";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_stringliteral_ff9adfbabf7e88ba3f14d11a2df47170c6cd98f553996566a0c61c120a77b1e1";
                                    readonly typeString: "literal_string \"hyperdrive2\"";
                                }];
                                readonly id: 121766;
                                readonly name: "makeAddr";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 33671;
                                readonly src: "1627:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$_t_address_$";
                                    readonly typeString: "function (string memory) returns (address)";
                                };
                            };
                            readonly id: 121768;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1627:23:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "1605:45:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 121773;
                                    readonly name: "hyperdrive1";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121759;
                                    readonly src: "1697:11:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }];
                                    readonly expression: {
                                        readonly id: 121771;
                                        readonly name: "registry";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 121613;
                                        readonly src: "1670:8:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                            readonly typeString: "contract HyperdriveRegistry";
                                        };
                                    };
                                    readonly id: 121772;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "1679:17:205";
                                    readonly memberName: "getHyperdriveInfo";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 7652;
                                    readonly src: "1670:26:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$";
                                        readonly typeString: "function (address) view external returns (uint256)";
                                    };
                                };
                                readonly id: 121774;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1670:39:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }, {
                                readonly hexValue: "30";
                                readonly id: 121775;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1711:1:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_0_by_1";
                                    readonly typeString: "int_const 0";
                                };
                                readonly value: "0";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }, {
                                    readonly typeIdentifier: "t_rational_0_by_1";
                                    readonly typeString: "int_const 0";
                                }];
                                readonly id: 121770;
                                readonly name: "assertEq";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [29836, 29861, 29874, 29890, 29932, 29974, 30016, 30053, 30090, 30127, 27671, 27696, 27726, 27751, 27810, 27835, 27865, 27890, 29363, 29398];
                                readonly referencedDeclaration: 27865;
                                readonly src: "1661:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256,uint256)";
                                };
                            };
                            readonly id: 121776;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1661:52:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121777;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1661:52:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 121781;
                                    readonly name: "hyperdrive2";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121765;
                                    readonly src: "1759:11:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }];
                                    readonly expression: {
                                        readonly id: 121779;
                                        readonly name: "registry";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 121613;
                                        readonly src: "1732:8:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                            readonly typeString: "contract HyperdriveRegistry";
                                        };
                                    };
                                    readonly id: 121780;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "1741:17:205";
                                    readonly memberName: "getHyperdriveInfo";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 7652;
                                    readonly src: "1732:26:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$";
                                        readonly typeString: "function (address) view external returns (uint256)";
                                    };
                                };
                                readonly id: 121782;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1732:39:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }, {
                                readonly hexValue: "30";
                                readonly id: 121783;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1773:1:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_0_by_1";
                                    readonly typeString: "int_const 0";
                                };
                                readonly value: "0";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }, {
                                    readonly typeIdentifier: "t_rational_0_by_1";
                                    readonly typeString: "int_const 0";
                                }];
                                readonly id: 121778;
                                readonly name: "assertEq";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [29836, 29861, 29874, 29890, 29932, 29974, 30016, 30053, 30090, 30127, 27671, 27696, 27726, 27751, 27810, 27835, 27865, 27890, 29363, 29398];
                                readonly referencedDeclaration: 27865;
                                readonly src: "1723:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256,uint256)";
                                };
                            };
                            readonly id: 121784;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1723:52:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121785;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1723:52:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 121789;
                                readonly name: "hyperdrive1";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 121759;
                                readonly src: "1813:11:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly hexValue: "31";
                                readonly id: 121790;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1826:1:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                };
                                readonly value: "1";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                }];
                                readonly expression: {
                                    readonly id: 121786;
                                    readonly name: "registry";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121613;
                                    readonly src: "1786:8:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                        readonly typeString: "contract HyperdriveRegistry";
                                    };
                                };
                                readonly id: 121788;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1795:17:205";
                                readonly memberName: "setHyperdriveInfo";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 7638;
                                readonly src: "1786:26:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (address,uint256) external";
                                };
                            };
                            readonly id: 121791;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1786:42:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121792;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1786:42:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 121796;
                                readonly name: "hyperdrive2";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 121765;
                                readonly src: "1865:11:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                };
                            }, {
                                readonly hexValue: "32";
                                readonly id: 121797;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1878:1:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_2_by_1";
                                    readonly typeString: "int_const 2";
                                };
                                readonly value: "2";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_address";
                                    readonly typeString: "address";
                                }, {
                                    readonly typeIdentifier: "t_rational_2_by_1";
                                    readonly typeString: "int_const 2";
                                }];
                                readonly expression: {
                                    readonly id: 121793;
                                    readonly name: "registry";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121613;
                                    readonly src: "1838:8:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                        readonly typeString: "contract HyperdriveRegistry";
                                    };
                                };
                                readonly id: 121795;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly memberLocation: "1847:17:205";
                                readonly memberName: "setHyperdriveInfo";
                                readonly nodeType: "MemberAccess";
                                readonly referencedDeclaration: 7638;
                                readonly src: "1838:26:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (address,uint256) external";
                                };
                            };
                            readonly id: 121798;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1838:42:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121799;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1838:42:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 121803;
                                    readonly name: "hyperdrive1";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121759;
                                    readonly src: "1927:11:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }];
                                    readonly expression: {
                                        readonly id: 121801;
                                        readonly name: "registry";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 121613;
                                        readonly src: "1900:8:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                            readonly typeString: "contract HyperdriveRegistry";
                                        };
                                    };
                                    readonly id: 121802;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "1909:17:205";
                                    readonly memberName: "getHyperdriveInfo";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 7652;
                                    readonly src: "1900:26:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$";
                                        readonly typeString: "function (address) view external returns (uint256)";
                                    };
                                };
                                readonly id: 121804;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1900:39:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }, {
                                readonly hexValue: "31";
                                readonly id: 121805;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "1941:1:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                };
                                readonly value: "1";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }, {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                }];
                                readonly id: 121800;
                                readonly name: "assertEq";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [29836, 29861, 29874, 29890, 29932, 29974, 30016, 30053, 30090, 30127, 27671, 27696, 27726, 27751, 27810, 27835, 27865, 27890, 29363, 29398];
                                readonly referencedDeclaration: 27865;
                                readonly src: "1891:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256,uint256)";
                                };
                            };
                            readonly id: 121806;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1891:52:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121807;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1891:52:205";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 121811;
                                    readonly name: "hyperdrive2";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 121765;
                                    readonly src: "1989:11:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }];
                                    readonly expression: {
                                        readonly id: 121809;
                                        readonly name: "registry";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 121613;
                                        readonly src: "1962:8:205";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_HyperdriveRegistry_$7653";
                                            readonly typeString: "contract HyperdriveRegistry";
                                        };
                                    };
                                    readonly id: 121810;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "1971:17:205";
                                    readonly memberName: "getHyperdriveInfo";
                                    readonly nodeType: "MemberAccess";
                                    readonly referencedDeclaration: 7652;
                                    readonly src: "1962:26:205";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_external_view$_t_address_$returns$_t_uint256_$";
                                        readonly typeString: "function (address) view external returns (uint256)";
                                    };
                                };
                                readonly id: 121812;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "1962:39:205";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }, {
                                readonly hexValue: "32";
                                readonly id: 121813;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "2003:1:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_2_by_1";
                                    readonly typeString: "int_const 2";
                                };
                                readonly value: "2";
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                }, {
                                    readonly typeIdentifier: "t_rational_2_by_1";
                                    readonly typeString: "int_const 2";
                                }];
                                readonly id: 121808;
                                readonly name: "assertEq";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [29836, 29861, 29874, 29890, 29932, 29974, 30016, 30053, 30090, 30127, 27671, 27696, 27726, 27751, 27810, 27835, 27865, 27890, 29363, 29398];
                                readonly referencedDeclaration: 27865;
                                readonly src: "1953:8:205";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$";
                                    readonly typeString: "function (uint256,uint256)";
                                };
                            };
                            readonly id: 121814;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1953:52:205";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$__$";
                                readonly typeString: "tuple()";
                            };
                        };
                        readonly id: 121815;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1953:52:205";
                    }];
                };
                readonly functionSelector: "716bcaa1";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "test_getHyperdriveInfo";
                readonly nameLocation: "1508:22:205";
                readonly parameters: {
                    readonly id: 121756;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "1530:2:205";
                };
                readonly returnParameters: {
                    readonly id: 121757;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "1540:0:205";
                };
                readonly scope: 121818;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "public";
            }];
            readonly abstract: false;
            readonly baseContracts: readonly [{
                readonly baseName: {
                    readonly id: 121609;
                    readonly name: "Test";
                    readonly nameLocations: readonly ["288:4:205"];
                    readonly nodeType: "IdentifierPath";
                    readonly referencedDeclaration: 39276;
                    readonly src: "288:4:205";
                };
                readonly id: 121610;
                readonly nodeType: "InheritanceSpecifier";
                readonly src: "288:4:205";
            }];
            readonly canonicalName: "HyperdriveRegistryTests";
            readonly contractDependencies: readonly [7653];
            readonly contractKind: "contract";
            readonly fullyImplemented: true;
            readonly linearizedBaseContracts: readonly [121818, 39276, 39225, 34963, 34673, 33909, 31855, 31135, 29642, 29708, 29705];
            readonly name: "HyperdriveRegistryTests";
            readonly nameLocation: "261:23:205";
            readonly scope: 121819;
            readonly usedErrors: readonly [];
            readonly usedEvents: readonly [27356, 27360, 27364, 27368, 27372, 27376, 27380, 27384, 27390, 27396, 27404, 27412, 27418, 27424, 27430, 27436, 29730, 29735, 29740, 29747, 29754, 29761];
        }];
        readonly license: "Apache-2.0";
    };
    readonly id: 205;
};
//# sourceMappingURL=HyperdriveRegistryTests.d.ts.map