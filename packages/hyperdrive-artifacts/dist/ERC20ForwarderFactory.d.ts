export declare const ERC20ForwarderFactory: {
    readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidForwarderAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC20LINK_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IMultiToken";
            readonly name: "__token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "__tokenId";
            readonly type: "uint256";
        }];
        readonly name: "create";
        readonly outputs: readonly [{
            readonly internalType: "contract IERC20Forwarder";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDeployDetails";
        readonly outputs: readonly [{
            readonly internalType: "contract IMultiToken";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IMultiToken";
            readonly name: "__token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "__tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getForwarder";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    readonly bytecode: {
        readonly object: "";
        readonly sourceMap: "991:2888:80:-:0;;;1125:52;;;-1:-1:-1;;;;;;1125:52:80;1174:1;1125:52;;;;;;1253:28;;991:2888;;;;;;;;;;;;;;;;";
        readonly linkReferences: {};
    };
    readonly deployedBytecode: {
        readonly object: "";
        readonly sourceMap: "991:2888:80:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3382:495;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;557:32:182;;;539:51;;527:2;512:18;3382:495:80;;;;;;;;1797:888;;;;;;:::i;:::-;;:::i;3005:115::-;;3056:11;3096:6;;3104:8;-1:-1:-1;;;;;3096:6:80;;;;3005:115;;;;;-1:-1:-1;;;;;1045:32:182;;;1027:51;;1109:2;1094:18;;1087:34;;;;1000:18;3005:115:80;833:294:182;1362:93:80;;;:::i;:::-;;;1278:25:182;;;1266:2;1251:18;1362:93:80;1132:177:182;3382:495:80;3588:30;;;-1:-1:-1;;;;;1045:32:182;;3588:30:80;;;1027:51:182;1094:18;;;1087:34;;;3487:7:80;;;;1000:18:182;;3588:30:80;;;;;;;;;;;;3578:41;;;;;;3563:56;;3629:20;3699:4;3692:12;;3714:4;3721;1421:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1411:44;;;;;;3675:67;;;;;;;;;;-1:-1:-1;;;;;;1537:26:182;;;;1525:39;;1601:2;1597:15;;;;-1:-1:-1;;1593:53:182;1589:1;1580:11;;1573:74;1672:2;1663:12;;1656:28;1709:2;1700:12;;1693:28;1746:2;1737:12;;1314:441;3675:67:80;;;;;;;-1:-1:-1;;3675:67:80;;;;;;3652:100;;3675:67;3652:100;;;;;3382:495;-1:-1:-1;;;;;3382:495:80:o;1797:888::-;1980:8;:20;;;1893:15;2010:16;;-1:-1:-1;;;;;;2010:16:80;-1:-1:-1;;;;;2010:16:80;;;;;;;2127:30;;;;;;1027:51:182;;;;1094:18;;1087:34;;;1893:15:80;;1000:18:182;;2127:30:80;;;;;;;;;;;;2117:41;;;;;;2102:56;;2217:23;2269:4;2243:34;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;2217:60;;2393:32;2406:7;2415:9;2393:12;:32::i;:::-;-1:-1:-1;;;;;2372:53:80;2380:8;-1:-1:-1;;;;;2372:53:80;;2366:142;;2449:48;;-1:-1:-1;;;2449:48:80;;;;;;;;;;;2366:142;2556:6;:32;;-1:-1:-1;;;;;;2556:32:80;2585:1;2556:32;;;;;;2598:12;;2670:8;-1:-1:-1;;1797:888:80;;;;:::o;1362:93::-;1421:33;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1411:44;;;;;;1362:93;:::o;-1:-1:-1:-;;;;;;;;:::o;14:374:182:-;102:6;110;163:2;151:9;142:7;138:23;134:32;131:52;;;179:1;176;169:12;131:52;205:23;;-1:-1:-1;;;;;257:31:182;;247:42;;237:70;;303:1;300;293:12;237:70;326:5;378:2;363:18;;;;350:32;;-1:-1:-1;;;14:374:182:o";
        readonly linkReferences: {};
    };
    readonly methodIdentifiers: {
        readonly "ERC20LINK_HASH()": "d13053bb";
        readonly "create(address,uint256)": "0ecaea73";
        readonly "getDeployDetails()": "600eb4ba";
        readonly "getForwarder(address,uint256)": "0710fd58";
    };
    readonly rawMetadata: "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidForwarderAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20LINK_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMultiToken\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract IERC20Forwarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployDetails\",\"outputs\":[{\"internalType\":\"contract IMultiToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMultiToken\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"DELV\",\"custom:disclaimer\":\"The language used in this code is for coding convenience                    only, and is not intended to, and does not, have any                    particular legal or regulatory significance.\",\"details\":\"This factory deploys them using create2 so that the multi token can do      cheap verification of the interfaces before they access sensitive      functions.\",\"kind\":\"dev\",\"methods\":{\"create(address,uint256)\":{\"params\":{\"__token\":\"The MultiToken targeted by this factory.\",\"__tokenId\":\"The sub-token ID targeted by this factory.\"},\"returns\":{\"_0\":\"Returns the address of the deployed forwarder.\"}},\"getDeployDetails()\":{\"details\":\"The target MultiToken and token ID are transient state variables      that are set during deployment.\",\"returns\":{\"_0\":\"The target MultiToken.\",\"_1\":\"The target token ID.\"}},\"getForwarder(address,uint256)\":{\"params\":{\"__token\":\"The target MultiToken of the forwarder.\",\"__tokenId\":\"The target token ID of the forwarder.\"},\"returns\":{\"_0\":\"The expected address of the forwarder.\"}}},\"title\":\"ERC20ForwarderFactory\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidForwarderAddress()\":[{\"notice\":\"Thrown when a forwarder is deployed to an unexpected address.\"}]},\"kind\":\"user\",\"methods\":{\"ERC20LINK_HASH()\":{\"notice\":\"The hash of the bytecode of the ERC20 forwarder contract.\"},\"create(address,uint256)\":{\"notice\":\"Uses create2 to deploy a forwarder at a predictable address as         part of our ERC20 multitoken implementation.\"},\"getDeployDetails()\":{\"notice\":\"Gets the MultiToken and token ID that should be targeted by the         calling forwarder.\"},\"getForwarder(address,uint256)\":{\"notice\":\"Helper to calculate expected forwarder contract addresses.\"}},\"notice\":\"Our MultiToken contract consists of fungible sub-tokens that         are similar to ERC20 tokens. In order to support ERC20 compatibility         we can deploy interfaces which are ERC20s.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/token/ERC20ForwarderFactory.sol\":\"ERC20ForwarderFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":aave-v3-core/=lib/aave-v3-core/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x5f446a4987d57c64380d44c234ee079172e98bed9595ec067eb519898c3117d9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a3245994c58110716f5099c07e5cb270137356d288044f03c713d29c36e207ac\",\"dweb:/ipfs/QmYdn52sGRQKXfSyL8ieSz8HysG6R5kLJWsNwEnyX1e22p\"]},\"contracts/src/interfaces/IERC20Forwarder.sol\":{\"keccak256\":\"0xeb9152fad7b2431ab4e9f0db4945462104825ac0ca2541319fafb1ea3e726592\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ab76c60cc144e299295e24f00f4e642ab093eab7c0157de6201b96cd2097892e\",\"dweb:/ipfs/QmYLiPgwNvZgUKzuLqsJKAotqFoq1Yw7y5NQZgbUcdCWgV\"]},\"contracts/src/interfaces/IERC20ForwarderFactory.sol\":{\"keccak256\":\"0xd413c9701c4d8be234bd037de24aabacce110848f86eac44fa6de04eda6d05ed\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://59fcaa637112713c2d1264664f8c6b428da46cceb4689fd8757f07fa87633aad\",\"dweb:/ipfs/QmWGLox6p9Ja2dwH5bgED69JtuK4Y55G7pgTPeeTmYrW5Z\"]},\"contracts/src/interfaces/IHyperdrive.sol\":{\"keccak256\":\"0x7cc4f7a8878cf02f9896f930882ccb6839b20f63c85efc4a66e88af46c57c317\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://de756bba0e3622e5ddaff774a989fa20b4be7c49806dd972efc11f2cef523213\",\"dweb:/ipfs/QmPWwZo7TsF8ccFYbGVXhZMo85FYjKmyTnEYGV3V936YG2\"]},\"contracts/src/interfaces/IHyperdriveCore.sol\":{\"keccak256\":\"0xd15fb3cb39e359f334b7f836f23026d162de7b5be66d9aab3ac11dede9357a76\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b8b6fdcb4a2a45a3dbb8a70e9451fdd6aa5e23ee75d8960e42a149e9138a32eb\",\"dweb:/ipfs/QmNQiGzu6qhssorP8UMtaRbxygqzajPg3rB4phnbfQuMzF\"]},\"contracts/src/interfaces/IHyperdriveEvents.sol\":{\"keccak256\":\"0x1233242868a6eaeb6e6764df97cd094bfda03978bbedb04592db8ddc3ac6db56\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5cc50aa0bdaff888c940b004ad3a7a0c2aac4c15104419bd216ca48270c3fcb8\",\"dweb:/ipfs/QmQS6jncTRsBmZxDgR6dAofzXgTt1bXSRb8WdBNqKTCKiR\"]},\"contracts/src/interfaces/IHyperdriveRead.sol\":{\"keccak256\":\"0x5922cbd86a7267c8fd19e3dc7a6f2636bad2b3330c28bca8e66adc7cd8ce2b55\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ced8bce3f3c15a9f0bcdd11ba16e69651179edd6b16e267936788f4ab4d6eabf\",\"dweb:/ipfs/QmcoZPj4h2ym6r13KDU7JG2GoVdDWa1GwfKL2jjFRsp8H6\"]},\"contracts/src/interfaces/IMultiToken.sol\":{\"keccak256\":\"0xf5f82b8223e0c1bfcf4f73566a909ba07a9266960dfe2335c1494e06debbbe3f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://920cf3fd66132a1e98a6a5708ad9a3bb047f4df8848119ab382b51094c1290a7\",\"dweb:/ipfs/QmWL3SyG8L91Coe9DsHz3Ke9tGMvYBf2NgRRDr3Fg5xFzp\"]},\"contracts/src/interfaces/IMultiTokenCore.sol\":{\"keccak256\":\"0x5c27315743bb6ef8a121ecf72cb24d5c144786dedb6526ef010f580eb872e501\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3e102c51bac9c82766c9826d97dc780a05a2bf64703b070757a7531a0851a1ae\",\"dweb:/ipfs/QmXYwbzPbiznj5AeDiX7NNfRE9xyhSx1huTMfMFndrUZWs\"]},\"contracts/src/interfaces/IMultiTokenEvents.sol\":{\"keccak256\":\"0x165f79e628b1975343f979549f3fdb5073a29aeecb03861f41d165961ee39fdb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3c0751cf322944d080a7a6692897807d0cef798268689afc1f6c8f91182a4222\",\"dweb:/ipfs/QmQVWtCgphU9sjqD2q6F6ww62uXDSWZx5KJVj6jFJpXeDK\"]},\"contracts/src/interfaces/IMultiTokenMetadata.sol\":{\"keccak256\":\"0xcc21ad6d3d4e3de354fbc25a472d940e5e2af0b48766404f9efecdac600d72ca\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b48fa111a773c820fe578efdd737d164e3957930ed46f3f304c6a8602a7e26a3\",\"dweb:/ipfs/QmcA7bjBC6ZBvYyojZZx3eKpugHmSrAAA14p14bQugiVKG\"]},\"contracts/src/interfaces/IMultiTokenRead.sol\":{\"keccak256\":\"0xac84dd306f29ae9d6becf764d93545c33f7c37737bb1aeb714c85930d0c074a0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://d9082a16d5a736ab7ce5670be4f2475ea5c5fdae8ad7096ed9663f84eed96b11\",\"dweb:/ipfs/QmUTH8dZaQJt56UsT7N2aCUCKmjQYj7Ah53rRXk6DuVNUR\"]},\"contracts/src/token/ERC20Forwarder.sol\":{\"keccak256\":\"0x96b1f8899c3d97f301d1ce6bf3e53f4a911a652b487e53fb7c71f1e22ed3ce87\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2ad03e1ec6a9acba7d3fbf8ad4cec54eeb889c01f600785f81d73b318db640ce\",\"dweb:/ipfs/QmcHf1wsqNY8oCmLXrF4meo3jLg7y1GchYv5iUcpUJmae7\"]},\"contracts/src/token/ERC20ForwarderFactory.sol\":{\"keccak256\":\"0x9e11c237e16db734da588b1dd4324d0e5ef9d14f1eb92c19e92dc9c4b322c0d9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8034d25041870c6a58a03c91f18fce321cdaa6a5f8318025670d79bd983feaf1\",\"dweb:/ipfs/QmYzeem28bs2z2hiDkZCY4ziS1M1wQ9B8epieGZKZEqrui\"]}},\"version\":1}";
    readonly metadata: {
        readonly compiler: {
            readonly version: "0.8.20+commit.a1b79de6";
        };
        readonly language: "Solidity";
        readonly output: {
            readonly abi: readonly [{
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "InvalidForwarderAddress";
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "ERC20LINK_HASH";
                readonly outputs: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "";
                    readonly type: "bytes32";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "contract IMultiToken";
                    readonly name: "__token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "__tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "create";
                readonly outputs: readonly [{
                    readonly internalType: "contract IERC20Forwarder";
                    readonly name: "";
                    readonly type: "address";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "getDeployDetails";
                readonly outputs: readonly [{
                    readonly internalType: "contract IMultiToken";
                    readonly name: "";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "";
                    readonly type: "uint256";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "contract IMultiToken";
                    readonly name: "__token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "__tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "getForwarder";
                readonly outputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "";
                    readonly type: "address";
                }];
            }];
            readonly devdoc: {
                readonly kind: "dev";
                readonly methods: {
                    readonly "create(address,uint256)": {
                        readonly params: {
                            readonly __token: "The MultiToken targeted by this factory.";
                            readonly __tokenId: "The sub-token ID targeted by this factory.";
                        };
                        readonly returns: {
                            readonly _0: "Returns the address of the deployed forwarder.";
                        };
                    };
                    readonly "getDeployDetails()": {
                        readonly details: "The target MultiToken and token ID are transient state variables      that are set during deployment.";
                        readonly returns: {
                            readonly _0: "The target MultiToken.";
                            readonly _1: "The target token ID.";
                        };
                    };
                    readonly "getForwarder(address,uint256)": {
                        readonly params: {
                            readonly __token: "The target MultiToken of the forwarder.";
                            readonly __tokenId: "The target token ID of the forwarder.";
                        };
                        readonly returns: {
                            readonly _0: "The expected address of the forwarder.";
                        };
                    };
                };
                readonly version: 1;
            };
            readonly userdoc: {
                readonly kind: "user";
                readonly methods: {
                    readonly "ERC20LINK_HASH()": {
                        readonly notice: "The hash of the bytecode of the ERC20 forwarder contract.";
                    };
                    readonly "create(address,uint256)": {
                        readonly notice: "Uses create2 to deploy a forwarder at a predictable address as         part of our ERC20 multitoken implementation.";
                    };
                    readonly "getDeployDetails()": {
                        readonly notice: "Gets the MultiToken and token ID that should be targeted by the         calling forwarder.";
                    };
                    readonly "getForwarder(address,uint256)": {
                        readonly notice: "Helper to calculate expected forwarder contract addresses.";
                    };
                };
                readonly version: 1;
            };
        };
        readonly settings: {
            readonly remappings: readonly ["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/", "aave-v3-core/=lib/aave-v3-core/", "ds-test/=lib/forge-std/lib/ds-test/src/", "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/", "forge-std/=lib/forge-std/src/", "openzeppelin-contracts/=lib/openzeppelin-contracts/", "openzeppelin/=lib/openzeppelin-contracts/contracts/", "solmate/=lib/solmate/src/"];
            readonly optimizer: {
                readonly enabled: true;
                readonly runs: 200;
            };
            readonly metadata: {
                readonly bytecodeHash: "ipfs";
            };
            readonly compilationTarget: {
                readonly "contracts/src/token/ERC20ForwarderFactory.sol": "ERC20ForwarderFactory";
            };
            readonly libraries: {};
        };
        readonly sources: {
            readonly "contracts/src/interfaces/IERC20.sol": {
                readonly keccak256: "0x5f446a4987d57c64380d44c234ee079172e98bed9595ec067eb519898c3117d9";
                readonly urls: readonly ["bzz-raw://a3245994c58110716f5099c07e5cb270137356d288044f03c713d29c36e207ac", "dweb:/ipfs/QmYdn52sGRQKXfSyL8ieSz8HysG6R5kLJWsNwEnyX1e22p"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IERC20Forwarder.sol": {
                readonly keccak256: "0xeb9152fad7b2431ab4e9f0db4945462104825ac0ca2541319fafb1ea3e726592";
                readonly urls: readonly ["bzz-raw://ab76c60cc144e299295e24f00f4e642ab093eab7c0157de6201b96cd2097892e", "dweb:/ipfs/QmYLiPgwNvZgUKzuLqsJKAotqFoq1Yw7y5NQZgbUcdCWgV"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IERC20ForwarderFactory.sol": {
                readonly keccak256: "0xd413c9701c4d8be234bd037de24aabacce110848f86eac44fa6de04eda6d05ed";
                readonly urls: readonly ["bzz-raw://59fcaa637112713c2d1264664f8c6b428da46cceb4689fd8757f07fa87633aad", "dweb:/ipfs/QmWGLox6p9Ja2dwH5bgED69JtuK4Y55G7pgTPeeTmYrW5Z"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdrive.sol": {
                readonly keccak256: "0x7cc4f7a8878cf02f9896f930882ccb6839b20f63c85efc4a66e88af46c57c317";
                readonly urls: readonly ["bzz-raw://de756bba0e3622e5ddaff774a989fa20b4be7c49806dd972efc11f2cef523213", "dweb:/ipfs/QmPWwZo7TsF8ccFYbGVXhZMo85FYjKmyTnEYGV3V936YG2"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveCore.sol": {
                readonly keccak256: "0xd15fb3cb39e359f334b7f836f23026d162de7b5be66d9aab3ac11dede9357a76";
                readonly urls: readonly ["bzz-raw://b8b6fdcb4a2a45a3dbb8a70e9451fdd6aa5e23ee75d8960e42a149e9138a32eb", "dweb:/ipfs/QmNQiGzu6qhssorP8UMtaRbxygqzajPg3rB4phnbfQuMzF"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveEvents.sol": {
                readonly keccak256: "0x1233242868a6eaeb6e6764df97cd094bfda03978bbedb04592db8ddc3ac6db56";
                readonly urls: readonly ["bzz-raw://5cc50aa0bdaff888c940b004ad3a7a0c2aac4c15104419bd216ca48270c3fcb8", "dweb:/ipfs/QmQS6jncTRsBmZxDgR6dAofzXgTt1bXSRb8WdBNqKTCKiR"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveRead.sol": {
                readonly keccak256: "0x5922cbd86a7267c8fd19e3dc7a6f2636bad2b3330c28bca8e66adc7cd8ce2b55";
                readonly urls: readonly ["bzz-raw://ced8bce3f3c15a9f0bcdd11ba16e69651179edd6b16e267936788f4ab4d6eabf", "dweb:/ipfs/QmcoZPj4h2ym6r13KDU7JG2GoVdDWa1GwfKL2jjFRsp8H6"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiToken.sol": {
                readonly keccak256: "0xf5f82b8223e0c1bfcf4f73566a909ba07a9266960dfe2335c1494e06debbbe3f";
                readonly urls: readonly ["bzz-raw://920cf3fd66132a1e98a6a5708ad9a3bb047f4df8848119ab382b51094c1290a7", "dweb:/ipfs/QmWL3SyG8L91Coe9DsHz3Ke9tGMvYBf2NgRRDr3Fg5xFzp"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenCore.sol": {
                readonly keccak256: "0x5c27315743bb6ef8a121ecf72cb24d5c144786dedb6526ef010f580eb872e501";
                readonly urls: readonly ["bzz-raw://3e102c51bac9c82766c9826d97dc780a05a2bf64703b070757a7531a0851a1ae", "dweb:/ipfs/QmXYwbzPbiznj5AeDiX7NNfRE9xyhSx1huTMfMFndrUZWs"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenEvents.sol": {
                readonly keccak256: "0x165f79e628b1975343f979549f3fdb5073a29aeecb03861f41d165961ee39fdb";
                readonly urls: readonly ["bzz-raw://3c0751cf322944d080a7a6692897807d0cef798268689afc1f6c8f91182a4222", "dweb:/ipfs/QmQVWtCgphU9sjqD2q6F6ww62uXDSWZx5KJVj6jFJpXeDK"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenMetadata.sol": {
                readonly keccak256: "0xcc21ad6d3d4e3de354fbc25a472d940e5e2af0b48766404f9efecdac600d72ca";
                readonly urls: readonly ["bzz-raw://b48fa111a773c820fe578efdd737d164e3957930ed46f3f304c6a8602a7e26a3", "dweb:/ipfs/QmcA7bjBC6ZBvYyojZZx3eKpugHmSrAAA14p14bQugiVKG"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenRead.sol": {
                readonly keccak256: "0xac84dd306f29ae9d6becf764d93545c33f7c37737bb1aeb714c85930d0c074a0";
                readonly urls: readonly ["bzz-raw://d9082a16d5a736ab7ce5670be4f2475ea5c5fdae8ad7096ed9663f84eed96b11", "dweb:/ipfs/QmUTH8dZaQJt56UsT7N2aCUCKmjQYj7Ah53rRXk6DuVNUR"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/token/ERC20Forwarder.sol": {
                readonly keccak256: "0x96b1f8899c3d97f301d1ce6bf3e53f4a911a652b487e53fb7c71f1e22ed3ce87";
                readonly urls: readonly ["bzz-raw://2ad03e1ec6a9acba7d3fbf8ad4cec54eeb889c01f600785f81d73b318db640ce", "dweb:/ipfs/QmcHf1wsqNY8oCmLXrF4meo3jLg7y1GchYv5iUcpUJmae7"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/token/ERC20ForwarderFactory.sol": {
                readonly keccak256: "0x9e11c237e16db734da588b1dd4324d0e5ef9d14f1eb92c19e92dc9c4b322c0d9";
                readonly urls: readonly ["bzz-raw://8034d25041870c6a58a03c91f18fce321cdaa6a5f8318025670d79bd983feaf1", "dweb:/ipfs/QmYzeem28bs2z2hiDkZCY4ziS1M1wQ9B8epieGZKZEqrui"];
                readonly license: "Apache-2.0";
            };
        };
        readonly version: 1;
    };
    readonly ast: {
        readonly absolutePath: "contracts/src/token/ERC20ForwarderFactory.sol";
        readonly id: 19117;
        readonly exportedSymbols: {
            readonly ERC20Forwarder: readonly [18940];
            readonly ERC20ForwarderFactory: readonly [19116];
            readonly IERC20Forwarder: readonly [6989];
            readonly IERC20ForwarderFactory: readonly [7037];
            readonly IMultiToken: readonly [8498];
        };
        readonly nodeType: "SourceUnit";
        readonly src: "39:3841:80";
        readonly nodes: readonly [{
            readonly id: 18942;
            readonly nodeType: "PragmaDirective";
            readonly src: "39:23:80";
            readonly nodes: readonly [];
            readonly literals: readonly ["solidity", "0.8", ".20"];
        }, {
            readonly id: 18944;
            readonly nodeType: "ImportDirective";
            readonly src: "64:68:80";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IERC20Forwarder.sol";
            readonly file: "../interfaces/IERC20Forwarder.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19117;
            readonly sourceUnit: 6990;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 18943;
                    readonly name: "IERC20Forwarder";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 6989;
                    readonly src: "73:15:80";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 18946;
            readonly nodeType: "ImportDirective";
            readonly src: "133:82:80";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IERC20ForwarderFactory.sol";
            readonly file: "../interfaces/IERC20ForwarderFactory.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19117;
            readonly sourceUnit: 7038;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 18945;
                    readonly name: "IERC20ForwarderFactory";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 7037;
                    readonly src: "142:22:80";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 18948;
            readonly nodeType: "ImportDirective";
            readonly src: "216:60:80";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IMultiToken.sol";
            readonly file: "../interfaces/IMultiToken.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19117;
            readonly sourceUnit: 8499;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 18947;
                    readonly name: "IMultiToken";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 8498;
                    readonly src: "225:11:80";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 18950;
            readonly nodeType: "ImportDirective";
            readonly src: "277:54:80";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/token/ERC20Forwarder.sol";
            readonly file: "./ERC20Forwarder.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19117;
            readonly sourceUnit: 18941;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 18949;
                    readonly name: "ERC20Forwarder";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 18940;
                    readonly src: "286:14:80";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 19116;
            readonly nodeType: "ContractDefinition";
            readonly src: "991:2888:80";
            readonly nodes: readonly [{
                readonly id: 18963;
                readonly nodeType: "VariableDeclaration";
                readonly src: "1125:52:80";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly documentation: {
                    readonly id: 18954;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1054:66:80";
                    readonly text: "@notice The transient MultiToken addressed used in deployment.";
                };
                readonly mutability: "mutable";
                readonly name: "_token";
                readonly nameLocation: "1145:6:80";
                readonly scope: 19116;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                    readonly typeString: "contract IMultiToken";
                };
                readonly typeName: {
                    readonly id: 18956;
                    readonly nodeType: "UserDefinedTypeName";
                    readonly pathNode: {
                        readonly id: 18955;
                        readonly name: "IMultiToken";
                        readonly nameLocations: readonly ["1125:11:80"];
                        readonly nodeType: "IdentifierPath";
                        readonly referencedDeclaration: 8498;
                        readonly src: "1125:11:80";
                    };
                    readonly referencedDeclaration: 8498;
                    readonly src: "1125:11:80";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                        readonly typeString: "contract IMultiToken";
                    };
                };
                readonly value: {
                    readonly arguments: readonly [{
                        readonly arguments: readonly [{
                            readonly hexValue: "31";
                            readonly id: 18960;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: true;
                            readonly kind: "number";
                            readonly lValueRequested: false;
                            readonly nodeType: "Literal";
                            readonly src: "1174:1:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_rational_1_by_1";
                                readonly typeString: "int_const 1";
                            };
                            readonly value: "1";
                        }];
                        readonly expression: {
                            readonly argumentTypes: readonly [{
                                readonly typeIdentifier: "t_rational_1_by_1";
                                readonly typeString: "int_const 1";
                            }];
                            readonly id: 18959;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: true;
                            readonly lValueRequested: false;
                            readonly nodeType: "ElementaryTypeNameExpression";
                            readonly src: "1166:7:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_type$_t_address_$";
                                readonly typeString: "type(address)";
                            };
                            readonly typeName: {
                                readonly id: 18958;
                                readonly name: "address";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "1166:7:80";
                                readonly typeDescriptions: {};
                            };
                        };
                        readonly id: 18961;
                        readonly isConstant: false;
                        readonly isLValue: false;
                        readonly isPure: true;
                        readonly kind: "typeConversion";
                        readonly lValueRequested: false;
                        readonly nameLocations: readonly [];
                        readonly names: readonly [];
                        readonly nodeType: "FunctionCall";
                        readonly src: "1166:10:80";
                        readonly tryCall: false;
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                    }];
                    readonly expression: {
                        readonly argumentTypes: readonly [{
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        }];
                        readonly id: 18957;
                        readonly name: "IMultiToken";
                        readonly nodeType: "Identifier";
                        readonly overloadedDeclarations: readonly [];
                        readonly referencedDeclaration: 8498;
                        readonly src: "1154:11:80";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_type$_t_contract$_IMultiToken_$8498_$";
                            readonly typeString: "type(contract IMultiToken)";
                        };
                    };
                    readonly id: 18962;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: true;
                    readonly kind: "typeConversion";
                    readonly lValueRequested: false;
                    readonly nameLocations: readonly [];
                    readonly names: readonly [];
                    readonly nodeType: "FunctionCall";
                    readonly src: "1154:23:80";
                    readonly tryCall: false;
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                        readonly typeString: "contract IMultiToken";
                    };
                };
                readonly visibility: "private";
            }, {
                readonly id: 18967;
                readonly nodeType: "VariableDeclaration";
                readonly src: "1253:28:80";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly documentation: {
                    readonly id: 18964;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1184:64:80";
                    readonly text: "@notice The transient token ID addressed used in deployment.";
                };
                readonly mutability: "mutable";
                readonly name: "_tokenId";
                readonly nameLocation: "1269:8:80";
                readonly scope: 19116;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_uint256";
                    readonly typeString: "uint256";
                };
                readonly typeName: {
                    readonly id: 18965;
                    readonly name: "uint256";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "1253:7:80";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_uint256";
                        readonly typeString: "uint256";
                    };
                };
                readonly value: {
                    readonly hexValue: "31";
                    readonly id: 18966;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: true;
                    readonly kind: "number";
                    readonly lValueRequested: false;
                    readonly nodeType: "Literal";
                    readonly src: "1280:1:80";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_rational_1_by_1";
                        readonly typeString: "int_const 1";
                    };
                    readonly value: "1";
                };
                readonly visibility: "private";
            }, {
                readonly id: 18976;
                readonly nodeType: "VariableDeclaration";
                readonly src: "1362:93:80";
                readonly nodes: readonly [];
                readonly baseFunctions: readonly [7036];
                readonly constant: true;
                readonly documentation: {
                    readonly id: 18968;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1288:69:80";
                    readonly text: "@notice The hash of the bytecode of the ERC20 forwarder contract.";
                };
                readonly functionSelector: "d13053bb";
                readonly mutability: "constant";
                readonly name: "ERC20LINK_HASH";
                readonly nameLocation: "1386:14:80";
                readonly scope: 19116;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_bytes32";
                    readonly typeString: "bytes32";
                };
                readonly typeName: {
                    readonly id: 18969;
                    readonly name: "bytes32";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "1362:7:80";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_bytes32";
                        readonly typeString: "bytes32";
                    };
                };
                readonly value: {
                    readonly arguments: readonly [{
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 18972;
                                readonly name: "ERC20Forwarder";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18940;
                                readonly src: "1426:14:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_type$_t_contract$_ERC20Forwarder_$18940_$";
                                    readonly typeString: "type(contract ERC20Forwarder)";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_type$_t_contract$_ERC20Forwarder_$18940_$";
                                    readonly typeString: "type(contract ERC20Forwarder)";
                                }];
                                readonly id: 18971;
                                readonly name: "type";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -27;
                                readonly src: "1421:4:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_metatype_pure$__$returns$__$";
                                    readonly typeString: "function () pure";
                                };
                            };
                            readonly id: 18973;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: true;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1421:20:80";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_magic_meta_type_t_contract$_ERC20Forwarder_$18940";
                                readonly typeString: "type(contract ERC20Forwarder)";
                            };
                        };
                        readonly id: 18974;
                        readonly isConstant: false;
                        readonly isLValue: false;
                        readonly isPure: true;
                        readonly lValueRequested: false;
                        readonly memberLocation: "1442:12:80";
                        readonly memberName: "creationCode";
                        readonly nodeType: "MemberAccess";
                        readonly src: "1421:33:80";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_bytes_memory_ptr";
                            readonly typeString: "bytes memory";
                        };
                    }];
                    readonly expression: {
                        readonly argumentTypes: readonly [{
                            readonly typeIdentifier: "t_bytes_memory_ptr";
                            readonly typeString: "bytes memory";
                        }];
                        readonly id: 18970;
                        readonly name: "keccak256";
                        readonly nodeType: "Identifier";
                        readonly overloadedDeclarations: readonly [];
                        readonly referencedDeclaration: -8;
                        readonly src: "1411:9:80";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                            readonly typeString: "function (bytes memory) pure returns (bytes32)";
                        };
                    };
                    readonly id: 18975;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: true;
                    readonly kind: "functionCall";
                    readonly lValueRequested: false;
                    readonly nameLocations: readonly [];
                    readonly names: readonly [];
                    readonly nodeType: "FunctionCall";
                    readonly src: "1411:44:80";
                    readonly tryCall: false;
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_bytes32";
                        readonly typeString: "bytes32";
                    };
                };
                readonly visibility: "public";
            }, {
                readonly id: 19050;
                readonly nodeType: "FunctionDefinition";
                readonly src: "1797:888:80";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 19049;
                    readonly nodeType: "Block";
                    readonly src: "1910:775:80";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly id: 18990;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 18988;
                                readonly name: "_tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18967;
                                readonly src: "1980:8:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly id: 18989;
                                readonly name: "__tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18982;
                                readonly src: "1991:9:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly src: "1980:20:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly id: 18991;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "1980:20:80";
                    }, {
                        readonly expression: {
                            readonly id: 18994;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 18992;
                                readonly name: "_token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18963;
                                readonly src: "2010:6:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly id: 18993;
                                readonly name: "__token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18980;
                                readonly src: "2019:7:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly src: "2010:16:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly id: 18995;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2010:16:80";
                    }, {
                        readonly assignments: readonly [18997];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 18997;
                            readonly mutability: "mutable";
                            readonly name: "salt";
                            readonly nameLocation: "2110:4:80";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19049;
                            readonly src: "2102:12:80";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                            readonly typeName: {
                                readonly id: 18996;
                                readonly name: "bytes32";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "2102:7:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes32";
                                    readonly typeString: "bytes32";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19005;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 19001;
                                    readonly name: "__token";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 18980;
                                    readonly src: "2138:7:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                        readonly typeString: "contract IMultiToken";
                                    };
                                }, {
                                    readonly id: 19002;
                                    readonly name: "__tokenId";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 18982;
                                    readonly src: "2147:9:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                        readonly typeString: "contract IMultiToken";
                                    }, {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    }];
                                    readonly expression: {
                                        readonly id: 18999;
                                        readonly name: "abi";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -1;
                                        readonly src: "2127:3:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_magic_abi";
                                            readonly typeString: "abi";
                                        };
                                    };
                                    readonly id: 19000;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "2131:6:80";
                                    readonly memberName: "encode";
                                    readonly nodeType: "MemberAccess";
                                    readonly src: "2127:10:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$";
                                        readonly typeString: "function () pure returns (bytes memory)";
                                    };
                                };
                                readonly id: 19003;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "2127:30:80";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                }];
                                readonly id: 18998;
                                readonly name: "keccak256";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -8;
                                readonly src: "2117:9:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                                    readonly typeString: "function (bytes memory) pure returns (bytes32)";
                                };
                            };
                            readonly id: 19004;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2117:41:80";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "2102:56:80";
                    }, {
                        readonly assignments: readonly [19008];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19008;
                            readonly mutability: "mutable";
                            readonly name: "deployed";
                            readonly nameLocation: "2232:8:80";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19049;
                            readonly src: "2217:23:80";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18940";
                                readonly typeString: "contract ERC20Forwarder";
                            };
                            readonly typeName: {
                                readonly id: 19007;
                                readonly nodeType: "UserDefinedTypeName";
                                readonly pathNode: {
                                    readonly id: 19006;
                                    readonly name: "ERC20Forwarder";
                                    readonly nameLocations: readonly ["2217:14:80"];
                                    readonly nodeType: "IdentifierPath";
                                    readonly referencedDeclaration: 18940;
                                    readonly src: "2217:14:80";
                                };
                                readonly referencedDeclaration: 18940;
                                readonly src: "2217:14:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18940";
                                    readonly typeString: "contract ERC20Forwarder";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19015;
                        readonly initialValue: {
                            readonly arguments: readonly [];
                            readonly expression: {
                                readonly argumentTypes: readonly [];
                                readonly expression: {
                                    readonly argumentTypes: readonly [];
                                    readonly id: 19011;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly nodeType: "NewExpression";
                                    readonly src: "2243:18:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_creation_nonpayable$__$returns$_t_contract$_ERC20Forwarder_$18940_$";
                                        readonly typeString: "function () returns (contract ERC20Forwarder)";
                                    };
                                    readonly typeName: {
                                        readonly id: 19010;
                                        readonly nodeType: "UserDefinedTypeName";
                                        readonly pathNode: {
                                            readonly id: 19009;
                                            readonly name: "ERC20Forwarder";
                                            readonly nameLocations: readonly ["2247:14:80"];
                                            readonly nodeType: "IdentifierPath";
                                            readonly referencedDeclaration: 18940;
                                            readonly src: "2247:14:80";
                                        };
                                        readonly referencedDeclaration: 18940;
                                        readonly src: "2247:14:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18940";
                                            readonly typeString: "contract ERC20Forwarder";
                                        };
                                    };
                                };
                                readonly id: 19013;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly names: readonly ["salt"];
                                readonly nodeType: "FunctionCallOptions";
                                readonly options: readonly [{
                                    readonly id: 19012;
                                    readonly name: "salt";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 18997;
                                    readonly src: "2269:4:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    };
                                }];
                                readonly src: "2243:32:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_creation_nonpayable$__$returns$_t_contract$_ERC20Forwarder_$18940_$salt";
                                    readonly typeString: "function () returns (contract ERC20Forwarder)";
                                };
                            };
                            readonly id: 19014;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2243:34:80";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18940";
                                readonly typeString: "contract ERC20Forwarder";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "2217:60:80";
                    }, {
                        readonly condition: {
                            readonly id: 19026;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly nodeType: "UnaryOperation";
                            readonly operator: "!";
                            readonly prefix: true;
                            readonly src: "2370:56:80";
                            readonly subExpression: {
                                readonly components: readonly [{
                                    readonly commonType: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                    readonly id: 19024;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly leftExpression: {
                                        readonly arguments: readonly [{
                                            readonly id: 19018;
                                            readonly name: "deployed";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 19008;
                                            readonly src: "2380:8:80";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18940";
                                                readonly typeString: "contract ERC20Forwarder";
                                            };
                                        }];
                                        readonly expression: {
                                            readonly argumentTypes: readonly [{
                                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18940";
                                                readonly typeString: "contract ERC20Forwarder";
                                            }];
                                            readonly id: 19017;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: true;
                                            readonly lValueRequested: false;
                                            readonly nodeType: "ElementaryTypeNameExpression";
                                            readonly src: "2372:7:80";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_type$_t_address_$";
                                                readonly typeString: "type(address)";
                                            };
                                            readonly typeName: {
                                                readonly id: 19016;
                                                readonly name: "address";
                                                readonly nodeType: "ElementaryTypeName";
                                                readonly src: "2372:7:80";
                                                readonly typeDescriptions: {};
                                            };
                                        };
                                        readonly id: 19019;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly kind: "typeConversion";
                                        readonly lValueRequested: false;
                                        readonly nameLocations: readonly [];
                                        readonly names: readonly [];
                                        readonly nodeType: "FunctionCall";
                                        readonly src: "2372:17:80";
                                        readonly tryCall: false;
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        };
                                    };
                                    readonly nodeType: "BinaryOperation";
                                    readonly operator: "==";
                                    readonly rightExpression: {
                                        readonly arguments: readonly [{
                                            readonly id: 19021;
                                            readonly name: "__token";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 18980;
                                            readonly src: "2406:7:80";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                                readonly typeString: "contract IMultiToken";
                                            };
                                        }, {
                                            readonly id: 19022;
                                            readonly name: "__tokenId";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 18982;
                                            readonly src: "2415:9:80";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        }];
                                        readonly expression: {
                                            readonly argumentTypes: readonly [{
                                                readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                                readonly typeString: "contract IMultiToken";
                                            }, {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            }];
                                            readonly id: 19020;
                                            readonly name: "getForwarder";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 19115;
                                            readonly src: "2393:12:80";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_function_internal_view$_t_contract$_IMultiToken_$8498_$_t_uint256_$returns$_t_address_$";
                                                readonly typeString: "function (contract IMultiToken,uint256) view returns (address)";
                                            };
                                        };
                                        readonly id: 19023;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly kind: "functionCall";
                                        readonly lValueRequested: false;
                                        readonly nameLocations: readonly [];
                                        readonly names: readonly [];
                                        readonly nodeType: "FunctionCall";
                                        readonly src: "2393:32:80";
                                        readonly tryCall: false;
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        };
                                    };
                                    readonly src: "2372:53:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bool";
                                        readonly typeString: "bool";
                                    };
                                }];
                                readonly id: 19025;
                                readonly isConstant: false;
                                readonly isInlineArray: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly nodeType: "TupleExpression";
                                readonly src: "2371:55:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                            };
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly id: 19033;
                        readonly nodeType: "IfStatement";
                        readonly src: "2366:142:80";
                        readonly trueBody: {
                            readonly id: 19032;
                            readonly nodeType: "Block";
                            readonly src: "2428:80:80";
                            readonly statements: readonly [{
                                readonly errorCall: {
                                    readonly arguments: readonly [];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [];
                                        readonly expression: {
                                            readonly id: 19027;
                                            readonly name: "IERC20ForwarderFactory";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 7037;
                                            readonly src: "2449:22:80";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_type$_t_contract$_IERC20ForwarderFactory_$7037_$";
                                                readonly typeString: "type(contract IERC20ForwarderFactory)";
                                            };
                                        };
                                        readonly id: 19029;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly memberLocation: "2472:23:80";
                                        readonly memberName: "InvalidForwarderAddress";
                                        readonly nodeType: "MemberAccess";
                                        readonly referencedDeclaration: 6998;
                                        readonly src: "2449:46:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_function_error_pure$__$returns$__$";
                                            readonly typeString: "function () pure";
                                        };
                                    };
                                    readonly id: 19030;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "functionCall";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "2449:48:80";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_tuple$__$";
                                        readonly typeString: "tuple()";
                                    };
                                };
                                readonly id: 19031;
                                readonly nodeType: "RevertStatement";
                                readonly src: "2442:55:80";
                            }];
                        };
                    }, {
                        readonly expression: {
                            readonly id: 19041;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 19034;
                                readonly name: "_token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18963;
                                readonly src: "2556:6:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly arguments: readonly [{
                                        readonly hexValue: "31";
                                        readonly id: 19038;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly kind: "number";
                                        readonly lValueRequested: false;
                                        readonly nodeType: "Literal";
                                        readonly src: "2585:1:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_rational_1_by_1";
                                            readonly typeString: "int_const 1";
                                        };
                                        readonly value: "1";
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_rational_1_by_1";
                                            readonly typeString: "int_const 1";
                                        }];
                                        readonly id: 19037;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "2577:7:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_address_$";
                                            readonly typeString: "type(address)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19036;
                                            readonly name: "address";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "2577:7:80";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19039;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "2577:10:80";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }];
                                    readonly id: 19035;
                                    readonly name: "IMultiToken";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 8498;
                                    readonly src: "2565:11:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_type$_t_contract$_IMultiToken_$8498_$";
                                        readonly typeString: "type(contract IMultiToken)";
                                    };
                                };
                                readonly id: 19040;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "typeConversion";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "2565:23:80";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly src: "2556:32:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly id: 19042;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2556:32:80";
                    }, {
                        readonly expression: {
                            readonly id: 19045;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 19043;
                                readonly name: "_tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18967;
                                readonly src: "2598:8:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly hexValue: "31";
                                readonly id: 19044;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "2609:1:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                };
                                readonly value: "1";
                            };
                            readonly src: "2598:12:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly id: 19046;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2598:12:80";
                    }, {
                        readonly expression: {
                            readonly id: 19047;
                            readonly name: "deployed";
                            readonly nodeType: "Identifier";
                            readonly overloadedDeclarations: readonly [];
                            readonly referencedDeclaration: 19008;
                            readonly src: "2670:8:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18940";
                                readonly typeString: "contract ERC20Forwarder";
                            };
                        };
                        readonly functionReturnParameters: 18987;
                        readonly id: 19048;
                        readonly nodeType: "Return";
                        readonly src: "2663:15:80";
                    }];
                };
                readonly baseFunctions: readonly [7010];
                readonly documentation: {
                    readonly id: 18977;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1462:330:80";
                    readonly text: "@notice Uses create2 to deploy a forwarder at a predictable address as\n         part of our ERC20 multitoken implementation.\n @param __token The MultiToken targeted by this factory.\n @param __tokenId The sub-token ID targeted by this factory.\n @return Returns the address of the deployed forwarder.";
                };
                readonly functionSelector: "0ecaea73";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "create";
                readonly nameLocation: "1806:6:80";
                readonly parameters: {
                    readonly id: 18983;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 18980;
                        readonly mutability: "mutable";
                        readonly name: "__token";
                        readonly nameLocation: "1834:7:80";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19050;
                        readonly src: "1822:19:80";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                            readonly typeString: "contract IMultiToken";
                        };
                        readonly typeName: {
                            readonly id: 18979;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 18978;
                                readonly name: "IMultiToken";
                                readonly nameLocations: readonly ["1822:11:80"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 8498;
                                readonly src: "1822:11:80";
                            };
                            readonly referencedDeclaration: 8498;
                            readonly src: "1822:11:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 18982;
                        readonly mutability: "mutable";
                        readonly name: "__tokenId";
                        readonly nameLocation: "1859:9:80";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19050;
                        readonly src: "1851:17:80";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 18981;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "1851:7:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "1812:62:80";
                };
                readonly returnParameters: {
                    readonly id: 18987;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 18986;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19050;
                        readonly src: "1893:15:80";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IERC20Forwarder_$6989";
                            readonly typeString: "contract IERC20Forwarder";
                        };
                        readonly typeName: {
                            readonly id: 18985;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 18984;
                                readonly name: "IERC20Forwarder";
                                readonly nameLocations: readonly ["1893:15:80"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 6989;
                                readonly src: "1893:15:80";
                            };
                            readonly referencedDeclaration: 6989;
                            readonly src: "1893:15:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IERC20Forwarder_$6989";
                                readonly typeString: "contract IERC20Forwarder";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "1892:17:80";
                };
                readonly scope: 19116;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "external";
            }, {
                readonly id: 19064;
                readonly nodeType: "FunctionDefinition";
                readonly src: "3005:115:80";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 19063;
                    readonly nodeType: "Block";
                    readonly src: "3078:42:80";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly components: readonly [{
                                readonly id: 19059;
                                readonly name: "_token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18963;
                                readonly src: "3096:6:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                    readonly typeString: "contract IMultiToken";
                                };
                            }, {
                                readonly id: 19060;
                                readonly name: "_tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18967;
                                readonly src: "3104:8:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }];
                            readonly id: 19061;
                            readonly isConstant: false;
                            readonly isInlineArray: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly nodeType: "TupleExpression";
                            readonly src: "3095:18:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$_t_contract$_IMultiToken_$8498_$_t_uint256_$";
                                readonly typeString: "tuple(contract IMultiToken,uint256)";
                            };
                        };
                        readonly functionReturnParameters: 19058;
                        readonly id: 19062;
                        readonly nodeType: "Return";
                        readonly src: "3088:25:80";
                    }];
                };
                readonly baseFunctions: readonly [7019];
                readonly documentation: {
                    readonly id: 19051;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "2691:309:80";
                    readonly text: "@notice Gets the MultiToken and token ID that should be targeted by the\n         calling forwarder.\n @dev The target MultiToken and token ID are transient state variables\n      that are set during deployment.\n @return The target MultiToken.\n @return The target token ID.";
                };
                readonly functionSelector: "600eb4ba";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "getDeployDetails";
                readonly nameLocation: "3014:16:80";
                readonly parameters: {
                    readonly id: 19052;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "3030:2:80";
                };
                readonly returnParameters: {
                    readonly id: 19058;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19055;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19064;
                        readonly src: "3056:11:80";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                            readonly typeString: "contract IMultiToken";
                        };
                        readonly typeName: {
                            readonly id: 19054;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 19053;
                                readonly name: "IMultiToken";
                                readonly nameLocations: readonly ["3056:11:80"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 8498;
                                readonly src: "3056:11:80";
                            };
                            readonly referencedDeclaration: 8498;
                            readonly src: "3056:11:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 19057;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19064;
                        readonly src: "3069:7:80";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 19056;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3069:7:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "3055:22:80";
                };
                readonly scope: 19116;
                readonly stateMutability: "view";
                readonly virtual: false;
                readonly visibility: "external";
            }, {
                readonly id: 19115;
                readonly nodeType: "FunctionDefinition";
                readonly src: "3382:495:80";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 19114;
                    readonly nodeType: "Block";
                    readonly src: "3496:381:80";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [19076];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19076;
                            readonly mutability: "mutable";
                            readonly name: "salt";
                            readonly nameLocation: "3571:4:80";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19114;
                            readonly src: "3563:12:80";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                            readonly typeName: {
                                readonly id: 19075;
                                readonly name: "bytes32";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "3563:7:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes32";
                                    readonly typeString: "bytes32";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19084;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 19080;
                                    readonly name: "__token";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19068;
                                    readonly src: "3599:7:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                        readonly typeString: "contract IMultiToken";
                                    };
                                }, {
                                    readonly id: 19081;
                                    readonly name: "__tokenId";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19070;
                                    readonly src: "3608:9:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                        readonly typeString: "contract IMultiToken";
                                    }, {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    }];
                                    readonly expression: {
                                        readonly id: 19078;
                                        readonly name: "abi";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -1;
                                        readonly src: "3588:3:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_magic_abi";
                                            readonly typeString: "abi";
                                        };
                                    };
                                    readonly id: 19079;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "3592:6:80";
                                    readonly memberName: "encode";
                                    readonly nodeType: "MemberAccess";
                                    readonly src: "3588:10:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$";
                                        readonly typeString: "function () pure returns (bytes memory)";
                                    };
                                };
                                readonly id: 19082;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "3588:30:80";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                }];
                                readonly id: 19077;
                                readonly name: "keccak256";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -8;
                                readonly src: "3578:9:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                                    readonly typeString: "function (bytes memory) pure returns (bytes32)";
                                };
                            };
                            readonly id: 19083;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "3578:41:80";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "3563:56:80";
                    }, {
                        readonly assignments: readonly [19086];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19086;
                            readonly mutability: "mutable";
                            readonly name: "addressBytes";
                            readonly nameLocation: "3637:12:80";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19114;
                            readonly src: "3629:20:80";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                            readonly typeName: {
                                readonly id: 19085;
                                readonly name: "bytes32";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "3629:7:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes32";
                                    readonly typeString: "bytes32";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19102;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly arguments: readonly [{
                                        readonly hexValue: "30786666";
                                        readonly id: 19092;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly kind: "number";
                                        readonly lValueRequested: false;
                                        readonly nodeType: "Literal";
                                        readonly src: "3699:4:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_rational_255_by_1";
                                            readonly typeString: "int_const 255";
                                        };
                                        readonly value: "0xff";
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_rational_255_by_1";
                                            readonly typeString: "int_const 255";
                                        }];
                                        readonly id: 19091;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "3692:6:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_bytes1_$";
                                            readonly typeString: "type(bytes1)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19090;
                                            readonly name: "bytes1";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "3692:6:80";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19093;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3692:12:80";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes1";
                                        readonly typeString: "bytes1";
                                    };
                                }, {
                                    readonly arguments: readonly [{
                                        readonly id: 19096;
                                        readonly name: "this";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -28;
                                        readonly src: "3714:4:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_ERC20ForwarderFactory_$19116";
                                            readonly typeString: "contract ERC20ForwarderFactory";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_contract$_ERC20ForwarderFactory_$19116";
                                            readonly typeString: "contract ERC20ForwarderFactory";
                                        }];
                                        readonly id: 19095;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "3706:7:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_address_$";
                                            readonly typeString: "type(address)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19094;
                                            readonly name: "address";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "3706:7:80";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19097;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3706:13:80";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }, {
                                    readonly id: 19098;
                                    readonly name: "salt";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19076;
                                    readonly src: "3721:4:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    };
                                }, {
                                    readonly id: 19099;
                                    readonly name: "ERC20LINK_HASH";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 18976;
                                    readonly src: "3727:14:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_bytes1";
                                        readonly typeString: "bytes1";
                                    }, {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }, {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    }, {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    }];
                                    readonly expression: {
                                        readonly id: 19088;
                                        readonly name: "abi";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -1;
                                        readonly src: "3675:3:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_magic_abi";
                                            readonly typeString: "abi";
                                        };
                                    };
                                    readonly id: 19089;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "3679:12:80";
                                    readonly memberName: "encodePacked";
                                    readonly nodeType: "MemberAccess";
                                    readonly src: "3675:16:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$";
                                        readonly typeString: "function () pure returns (bytes memory)";
                                    };
                                };
                                readonly id: 19100;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "3675:67:80";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                }];
                                readonly id: 19087;
                                readonly name: "keccak256";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -8;
                                readonly src: "3652:9:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                                    readonly typeString: "function (bytes memory) pure returns (bytes32)";
                                };
                            };
                            readonly id: 19101;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "3652:100:80";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "3629:123:80";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly arguments: readonly [{
                                        readonly id: 19109;
                                        readonly name: "addressBytes";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 19086;
                                        readonly src: "3855:12:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_bytes32";
                                            readonly typeString: "bytes32";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_bytes32";
                                            readonly typeString: "bytes32";
                                        }];
                                        readonly id: 19108;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "3847:7:80";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_uint256_$";
                                            readonly typeString: "type(uint256)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19107;
                                            readonly name: "uint256";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "3847:7:80";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19110;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3847:21:80";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    }];
                                    readonly id: 19106;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly nodeType: "ElementaryTypeNameExpression";
                                    readonly src: "3839:7:80";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_type$_t_uint160_$";
                                        readonly typeString: "type(uint160)";
                                    };
                                    readonly typeName: {
                                        readonly id: 19105;
                                        readonly name: "uint160";
                                        readonly nodeType: "ElementaryTypeName";
                                        readonly src: "3839:7:80";
                                        readonly typeDescriptions: {};
                                    };
                                };
                                readonly id: 19111;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "typeConversion";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "3839:30:80";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint160";
                                    readonly typeString: "uint160";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint160";
                                    readonly typeString: "uint160";
                                }];
                                readonly id: 19104;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly lValueRequested: false;
                                readonly nodeType: "ElementaryTypeNameExpression";
                                readonly src: "3831:7:80";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_type$_t_address_$";
                                    readonly typeString: "type(address)";
                                };
                                readonly typeName: {
                                    readonly id: 19103;
                                    readonly name: "address";
                                    readonly nodeType: "ElementaryTypeName";
                                    readonly src: "3831:7:80";
                                    readonly typeDescriptions: {};
                                };
                            };
                            readonly id: 19112;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "typeConversion";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "3831:39:80";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly functionReturnParameters: 19074;
                        readonly id: 19113;
                        readonly nodeType: "Return";
                        readonly src: "3824:46:80";
                    }];
                };
                readonly baseFunctions: readonly [7030];
                readonly documentation: {
                    readonly id: 19065;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "3126:251:80";
                    readonly text: "@notice Helper to calculate expected forwarder contract addresses.\n @param __token The target MultiToken of the forwarder.\n @param __tokenId The target token ID of the forwarder.\n @return The expected address of the forwarder.";
                };
                readonly functionSelector: "0710fd58";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "getForwarder";
                readonly nameLocation: "3391:12:80";
                readonly parameters: {
                    readonly id: 19071;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19068;
                        readonly mutability: "mutable";
                        readonly name: "__token";
                        readonly nameLocation: "3425:7:80";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19115;
                        readonly src: "3413:19:80";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                            readonly typeString: "contract IMultiToken";
                        };
                        readonly typeName: {
                            readonly id: 19067;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 19066;
                                readonly name: "IMultiToken";
                                readonly nameLocations: readonly ["3413:11:80"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 8498;
                                readonly src: "3413:11:80";
                            };
                            readonly referencedDeclaration: 8498;
                            readonly src: "3413:11:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8498";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 19070;
                        readonly mutability: "mutable";
                        readonly name: "__tokenId";
                        readonly nameLocation: "3450:9:80";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19115;
                        readonly src: "3442:17:80";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 19069;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3442:7:80";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "3403:62:80";
                };
                readonly returnParameters: {
                    readonly id: 19074;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19073;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19115;
                        readonly src: "3487:7:80";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 19072;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3487:7:80";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "3486:9:80";
                };
                readonly scope: 19116;
                readonly stateMutability: "view";
                readonly virtual: false;
                readonly visibility: "public";
            }];
            readonly abstract: false;
            readonly baseContracts: readonly [{
                readonly baseName: {
                    readonly id: 18952;
                    readonly name: "IERC20ForwarderFactory";
                    readonly nameLocations: readonly ["1025:22:80"];
                    readonly nodeType: "IdentifierPath";
                    readonly referencedDeclaration: 7037;
                    readonly src: "1025:22:80";
                };
                readonly id: 18953;
                readonly nodeType: "InheritanceSpecifier";
                readonly src: "1025:22:80";
            }];
            readonly canonicalName: "ERC20ForwarderFactory";
            readonly contractDependencies: readonly [18940];
            readonly contractKind: "contract";
            readonly documentation: {
                readonly id: 18951;
                readonly nodeType: "StructuredDocumentation";
                readonly src: "333:658:80";
                readonly text: "@author DELV\n @title ERC20ForwarderFactory\n @notice Our MultiToken contract consists of fungible sub-tokens that\n         are similar to ERC20 tokens. In order to support ERC20 compatibility\n         we can deploy interfaces which are ERC20s.\n @dev This factory deploys them using create2 so that the multi token can do\n      cheap verification of the interfaces before they access sensitive\n      functions.\n @custom:disclaimer The language used in this code is for coding convenience\n                    only, and is not intended to, and does not, have any\n                    particular legal or regulatory significance.";
            };
            readonly fullyImplemented: true;
            readonly linearizedBaseContracts: readonly [19116, 7037];
            readonly name: "ERC20ForwarderFactory";
            readonly nameLocation: "1000:21:80";
            readonly scope: 19117;
            readonly usedErrors: readonly [6998];
            readonly usedEvents: readonly [];
        }];
        readonly license: "Apache-2.0";
    };
    readonly id: 80;
};
//# sourceMappingURL=ERC20ForwarderFactory.d.ts.map