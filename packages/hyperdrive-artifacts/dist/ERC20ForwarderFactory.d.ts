export declare const ERC20ForwarderFactory: {
    readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidForwarderAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ERC20LINK_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IMultiToken";
            readonly name: "__token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "__tokenId";
            readonly type: "uint256";
        }];
        readonly name: "create";
        readonly outputs: readonly [{
            readonly internalType: "contract IERC20Forwarder";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDeployDetails";
        readonly outputs: readonly [{
            readonly internalType: "contract IMultiToken";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IMultiToken";
            readonly name: "__token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "__tokenId";
            readonly type: "uint256";
        }];
        readonly name: "getForwarder";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    readonly bytecode: {
        readonly object: "0x6080604052600080546001600160a01b0319166001908117909155805534801561002857600080fd5b506115e7806100386000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630710fd58146100515780630ecaea7314610081578063600eb4ba14610094578063d13053bb146100ca575b600080fd5b61006461005f3660046102cc565b6100e0565b6040516001600160a01b0390911681526020015b60405180910390f35b61006461008f3660046102cc565b6101b5565b6100ab6000546001546001600160a01b0390911691565b604080516001600160a01b039093168352602083019190915201610078565b6100d2610292565b604051908152602001610078565b604080516001600160a01b03841660208201529081018290526000908190606001604051602081830303815290604052805190602001209050600060ff60f81b308360405180602001610132906102bf565b6020820181038252601f19601f820116604052508051906020012060405160200161019494939291906001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60408051808303601f19018152919052805160209091012095945050505050565b6001819055600080546001600160a01b0319166001600160a01b038416908117825560408051602081019290925281018390528190606001604051602081830303815290604052805190602001209050600081604051610214906102bf565b8190604051809103906000f5905080158015610234573d6000803e3d6000fd5b50905061024185856100e0565b6001600160a01b0316816001600160a01b0316146102715760405162e0775560e61b815260040160405180910390fd5b600080546001600160a01b0319166001908117909155805591505092915050565b6040516102a1602082016102bf565b6020820181038252601f19601f820116604052508051906020012081565b6112ad8061030583390190565b600080604083850312156102df57600080fd5b82356001600160a01b03811681146102f657600080fd5b94602093909301359350505056fe60e06040523480156200001157600080fd5b50604080516330075a5d60e11b815281513392839263600eb4ba92600480830193928290030181865afa1580156200004d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200007391906200019a565b60a08190526001600160a01b039091166080819052604051622b600360e21b81527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9262ad800c91620000cd919060040190815260200190565b600060405180830381865afa158015620000eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001159190810190620001ec565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f19818403018152919052805160209091012060c05250620002c1565b60008060408385031215620001ae57600080fd5b82516001600160a01b0381168114620001c657600080fd5b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200020057600080fd5b82516001600160401b03808211156200021857600080fd5b818501915085601f8301126200022d57600080fd5b815181811115620002425762000242620001d6565b604051601f8201601f19908116603f011681019083821181831017156200026d576200026d620001d6565b8160405282815288868487010111156200028657600080fd5b600093505b82841015620002aa57848401860151818501870152928501926200028b565b600086848301015280965050505050505092915050565b60805160a05160c051610f306200037d600039600081816101c601526108fc015260008181610140015281816102ab0152818161035f0152818161045d015281816105080152818161061a015281816106cf0152818161073e01528181610a030152610bab015260008181610263015281816102d4015281816103a5015281816104860152818161055601528181610653015281816106f80152818161078e01528181610a4001528181610b210152610be90152610f306000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80633644e51511610097578063a9059cbb11610066578063a9059cbb14610223578063d505accf14610236578063dd62ed3e1461024b578063fc0c546a1461025e57600080fd5b80633644e515146101c157806370a08231146101e85780637ecebe00146101fb57806395d89b411461021b57600080fd5b806318160ddd116100d357806318160ddd1461017057806323b872dd1461017857806330adf81f1461018b578063313ce567146101b257600080fd5b806306fdde03146100fa578063095ea7b31461011857806317d70f7c1461013b575b600080fd5b61010261029d565b60405161010f9190610c7f565b60405180910390f35b61012b610126366004610cce565b610350565b604051901515815260200161010f565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161010f565b61016261044e565b61012b610186366004610cf8565b6104f9565b6101627f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6040516012815260200161010f565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101626101f6366004610d34565b61060b565b610162610209366004610d34565b60006020819052908152604090205481565b6101026106c0565b61012b610231366004610cce565b61072f565b610249610244366004610d56565b610829565b005b610162610259366004610dc9565b610af7565b6102857f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010f565b604051622b600360e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169062ad800c906024015b600060405180830381865afa158015610323573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261034b9190810190610e12565b905090565b6040516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b038381166024830152604482018390523360648301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b1580156103eb57600080fd5b505af11580156103ff573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906020015b60405180910390a35060015b92915050565b60405163bd85b03960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bd85b03990602401602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b9190610ebf565b604051633912022f60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0384811660248301528381166044830152606482018390523360848301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105f991815260200190565b60405180910390a35060019392505050565b604051631b2b776160e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0382811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690633656eec290604401602060405180830381865afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104489190610ebf565b604051634e41a1fb60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634e41a1fb90602401610306565b604051633912022f60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015233602482018190526001600160a01b0384811660448401526064830184905260848301919091526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161043c565b8342111561084a5760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b0387166108715760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152602081815260408083205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e08501909152805191012061190160f01b6101008401527f0000000000000000000000000000000000000000000000000000000000000000610102840152610122830152906101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa158015610997573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b0316146109d557604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b03808b1660008181526020819052604090819020600187019055516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201528b83166024820152604481018b905260648101919091527f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b158015610a8657600080fd5b505af1158015610a9a573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258a604051610ae391815260200190565b60405180910390a350505050505050505050565b60405163e985e9c560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e985e9c590604401602060405180830381865afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e9190610ed8565b15610b9c5750600019610448565b6040516321ff32a960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b03848116602483015283811660448301527f000000000000000000000000000000000000000000000000000000000000000016906321ff32a990606401602060405180830381865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190610ebf565b9050610448565b60005b83811015610c76578181015183820152602001610c5e565b50506000910152565b6020815260008251806020840152610c9e816040850160208701610c5b565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610cc957600080fd5b919050565b60008060408385031215610ce157600080fd5b610cea83610cb2565b946020939093013593505050565b600080600060608486031215610d0d57600080fd5b610d1684610cb2565b9250610d2460208501610cb2565b9150604084013590509250925092565b600060208284031215610d4657600080fd5b610d4f82610cb2565b9392505050565b600080600080600080600060e0888a031215610d7157600080fd5b610d7a88610cb2565b9650610d8860208901610cb2565b95506040880135945060608801359350608088013560ff81168114610dac57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610ddc57600080fd5b610de583610cb2565b9150610df360208401610cb2565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610e2457600080fd5b815167ffffffffffffffff80821115610e3c57600080fd5b818401915084601f830112610e5057600080fd5b815181811115610e6257610e62610dfc565b604051601f8201601f19908116603f01168101908382118183101715610e8a57610e8a610dfc565b81604052828152876020848701011115610ea357600080fd5b610eb4836020830160208801610c5b565b979650505050505050565b600060208284031215610ed157600080fd5b5051919050565b600060208284031215610eea57600080fd5b81518015158114610d4f57600080fdfea2646970667358221220ce1a4f39a38ec95e66f5f59841657de131e0ebc6ea320213f6d13a04dab316ce64736f6c63430008140033a26469706673582212204fafa3eeab7db191c06180503210657842df40eb0fe396e596e53c2eea1249d764736f6c63430008140033";
        readonly sourceMap: "1052:2888:79:-:0;;;1186:52;;;-1:-1:-1;;;;;;1186:52:79;1235:1;1186:52;;;;;;1314:28;;1052:2888;;;;;;;;;;;;;;;;";
        readonly linkReferences: {};
    };
    readonly deployedBytecode: {
        readonly object: "";
        readonly sourceMap: "1052:2888:79:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3443:495;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;557:32:182;;;539:51;;527:2;512:18;3443:495:79;;;;;;;;1858:888;;;;;;:::i;:::-;;:::i;3066:115::-;;3117:11;3157:6;;3165:8;-1:-1:-1;;;;;3157:6:79;;;;3066:115;;;;;-1:-1:-1;;;;;1045:32:182;;;1027:51;;1109:2;1094:18;;1087:34;;;;1000:18;3066:115:79;833:294:182;1423:93:79;;;:::i;:::-;;;1278:25:182;;;1266:2;1251:18;1423:93:79;1132:177:182;3443:495:79;3649:30;;;-1:-1:-1;;;;;1045:32:182;;3649:30:79;;;1027:51:182;1094:18;;;1087:34;;;3548:7:79;;;;1000:18:182;;3649:30:79;;;;;;;;;;;;3639:41;;;;;;3624:56;;3690:20;3760:4;3753:12;;3775:4;3782;1482:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1472:44;;;;;;3736:67;;;;;;;;;;-1:-1:-1;;;;;;1537:26:182;;;;1525:39;;1601:2;1597:15;;;;-1:-1:-1;;1593:53:182;1589:1;1580:11;;1573:74;1672:2;1663:12;;1656:28;1709:2;1700:12;;1693:28;1746:2;1737:12;;1314:441;3736:67:79;;;;;;;-1:-1:-1;;3736:67:79;;;;;;3713:100;;3736:67;3713:100;;;;;3443:495;-1:-1:-1;;;;;3443:495:79:o;1858:888::-;2041:8;:20;;;1954:15;2071:16;;-1:-1:-1;;;;;;2071:16:79;-1:-1:-1;;;;;2071:16:79;;;;;;;2188:30;;;;;;1027:51:182;;;;1094:18;;1087:34;;;1954:15:79;;1000:18:182;;2188:30:79;;;;;;;;;;;;2178:41;;;;;;2163:56;;2278:23;2330:4;2304:34;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;2278:60;;2454:32;2467:7;2476:9;2454:12;:32::i;:::-;-1:-1:-1;;;;;2433:53:79;2441:8;-1:-1:-1;;;;;2433:53:79;;2427:142;;2510:48;;-1:-1:-1;;;2510:48:79;;;;;;;;;;;2427:142;2617:6;:32;;-1:-1:-1;;;;;;2617:32:79;2646:1;2617:32;;;;;;2659:12;;2731:8;-1:-1:-1;;1858:888:79;;;;:::o;1423:93::-;1482:33;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1472:44;;;;;;1423:93;:::o;-1:-1:-1:-;;;;;;;;:::o;14:374:182:-;102:6;110;163:2;151:9;142:7;138:23;134:32;131:52;;;179:1;176;169:12;131:52;205:23;;-1:-1:-1;;;;;257:31:182;;247:42;;237:70;;303:1;300;293:12;237:70;326:5;378:2;363:18;;;;350:32;;-1:-1:-1;;;14:374:182:o";
        readonly linkReferences: {};
    };
    readonly methodIdentifiers: {
        readonly "ERC20LINK_HASH()": "d13053bb";
        readonly "create(address,uint256)": "0ecaea73";
        readonly "getDeployDetails()": "600eb4ba";
        readonly "getForwarder(address,uint256)": "0710fd58";
    };
    readonly rawMetadata: "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidForwarderAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20LINK_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMultiToken\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract IERC20Forwarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployDetails\",\"outputs\":[{\"internalType\":\"contract IMultiToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMultiToken\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"DELV\",\"custom:disclaimer\":\"The language used in this code is for coding convenience                    only, and is not intended to, and does not, have any                    particular legal or regulatory significance.\",\"details\":\"This factory deploys them using create2 so that the multi token can do      cheap verification of the interfaces before they access sensitive      functions.\",\"kind\":\"dev\",\"methods\":{\"create(address,uint256)\":{\"params\":{\"__token\":\"The MultiToken targeted by this factory.\",\"__tokenId\":\"The sub-token ID targeted by this factory.\"},\"returns\":{\"_0\":\"Returns the address of the deployed forwarder.\"}},\"getDeployDetails()\":{\"details\":\"The target MultiToken and token ID are transient state variables      that are set during deployment.\",\"returns\":{\"_0\":\"The target MultiToken.\",\"_1\":\"The target token ID.\"}},\"getForwarder(address,uint256)\":{\"params\":{\"__token\":\"The target MultiToken of the forwarder.\",\"__tokenId\":\"The target token ID of the forwarder.\"},\"returns\":{\"_0\":\"The expected address of the forwarder.\"}}},\"title\":\"ERC20ForwarderFactory\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidForwarderAddress()\":[{\"notice\":\"Thrown when a forwarder is deployed to an unexpected address.\"}]},\"kind\":\"user\",\"methods\":{\"ERC20LINK_HASH()\":{\"notice\":\"The hash of the bytecode of the ERC20 forwarder contract.\"},\"create(address,uint256)\":{\"notice\":\"Uses create2 to deploy a forwarder at a predictable address as         part of our ERC20 multitoken implementation.\"},\"getDeployDetails()\":{\"notice\":\"Gets the MultiToken and token ID that should be targeted by the         calling forwarder.\"},\"getForwarder(address,uint256)\":{\"notice\":\"Helper to calculate expected forwarder contract addresses.\"}},\"notice\":\"Our MultiToken contract consists of fungible sub-tokens that         are similar to ERC20 tokens. In order to support ERC20 compatibility         we can deploy interfaces which are ERC20s.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/token/ERC20ForwarderFactory.sol\":\"ERC20ForwarderFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":aave-v3-core/=lib/aave-v3-core/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x5f446a4987d57c64380d44c234ee079172e98bed9595ec067eb519898c3117d9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a3245994c58110716f5099c07e5cb270137356d288044f03c713d29c36e207ac\",\"dweb:/ipfs/QmYdn52sGRQKXfSyL8ieSz8HysG6R5kLJWsNwEnyX1e22p\"]},\"contracts/src/interfaces/IERC20Forwarder.sol\":{\"keccak256\":\"0x0af72255c641b0cd5c1975215e3f6713539da7963edd3d67d8151657e524dbe9\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://187998e942efa97a7932bef37fde379346938e19f513e8e73c7ae9dbdd83499a\",\"dweb:/ipfs/QmSwSphYw15JVo2vizDWknyAzsc6ttrjiDMmRDbN7UXHrZ\"]},\"contracts/src/interfaces/IERC20ForwarderFactory.sol\":{\"keccak256\":\"0xd413c9701c4d8be234bd037de24aabacce110848f86eac44fa6de04eda6d05ed\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://59fcaa637112713c2d1264664f8c6b428da46cceb4689fd8757f07fa87633aad\",\"dweb:/ipfs/QmWGLox6p9Ja2dwH5bgED69JtuK4Y55G7pgTPeeTmYrW5Z\"]},\"contracts/src/interfaces/IHyperdrive.sol\":{\"keccak256\":\"0xbb41b77195a206fee42f1c801d1feeefcb84d1d33fcdb537ba2597a2eaf7bf94\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ad3474360d05cf4002ea0703ff36dba900dc1b17da8077f8bcaf159c0b0861eb\",\"dweb:/ipfs/QmYTehjAXpiuLErAWGfVw1LFn8g2oZ7YnjLNXcmU5ngPBf\"]},\"contracts/src/interfaces/IHyperdriveCore.sol\":{\"keccak256\":\"0x2836b8e9e2b6e143d4601e0047dfd09232352038a2133670d2f40da5442ff4b3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://64eec4fc70dd4fdf3ad835ef343d56bd4a7c48f2bb0e1f338d9f090e42848660\",\"dweb:/ipfs/Qmeg2aX8QZBggY1tChJQJbkhkbxWFRQPDsZRxUMsGfFg5m\"]},\"contracts/src/interfaces/IHyperdriveEvents.sol\":{\"keccak256\":\"0x1841703b12d5b2ca7dedff94c7dd71a4ad0a0b47ca59ba9de98ea14929fb72e5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c192bfc8bee91341d7e7530d71df2fbaec69d7bf0017e7b318dea276b7f3e171\",\"dweb:/ipfs/QmRWCkdXJ7G2FDo4CpsNuRvDgYWzN9U3LXLzM3YKHs9M4y\"]},\"contracts/src/interfaces/IHyperdriveRead.sol\":{\"keccak256\":\"0x5922cbd86a7267c8fd19e3dc7a6f2636bad2b3330c28bca8e66adc7cd8ce2b55\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ced8bce3f3c15a9f0bcdd11ba16e69651179edd6b16e267936788f4ab4d6eabf\",\"dweb:/ipfs/QmcoZPj4h2ym6r13KDU7JG2GoVdDWa1GwfKL2jjFRsp8H6\"]},\"contracts/src/interfaces/IMultiToken.sol\":{\"keccak256\":\"0xf5f82b8223e0c1bfcf4f73566a909ba07a9266960dfe2335c1494e06debbbe3f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://920cf3fd66132a1e98a6a5708ad9a3bb047f4df8848119ab382b51094c1290a7\",\"dweb:/ipfs/QmWL3SyG8L91Coe9DsHz3Ke9tGMvYBf2NgRRDr3Fg5xFzp\"]},\"contracts/src/interfaces/IMultiTokenCore.sol\":{\"keccak256\":\"0xf692b4673daac8627a185253b5fb99c843d9c5a2897be50599030fbd02c21a28\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ec28e35b2523d2f399c79ec5c8e29a4985a0e7a2d1d83c9a834d84dfc44130a2\",\"dweb:/ipfs/QmZLHmSUkDJsnU2FJ4FuaMfo2t6dPimmLaCDrfuxYF8nmD\"]},\"contracts/src/interfaces/IMultiTokenEvents.sol\":{\"keccak256\":\"0x165f79e628b1975343f979549f3fdb5073a29aeecb03861f41d165961ee39fdb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3c0751cf322944d080a7a6692897807d0cef798268689afc1f6c8f91182a4222\",\"dweb:/ipfs/QmQVWtCgphU9sjqD2q6F6ww62uXDSWZx5KJVj6jFJpXeDK\"]},\"contracts/src/interfaces/IMultiTokenMetadata.sol\":{\"keccak256\":\"0xeabffcfcd0fd642caaa2355dccad38269d25fbd4db1b0db43fd97328bf464862\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://6970e3db54bfcca6748db01b871fcee4f8d74fea2e66c39e3320232086633355\",\"dweb:/ipfs/QmPq66eyA4DmnU7m1QpMgKGrJ3ebUeN6e8UEuhb64U3BH2\"]},\"contracts/src/interfaces/IMultiTokenRead.sol\":{\"keccak256\":\"0xc28d1017afe010c20c2fbe9b78e0001eb8b7db16e0fe5038990692227be365ec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8056e866c6da775c66cefc4e03d8856d75980d8c6eb98e954e1319b2478ad51c\",\"dweb:/ipfs/Qme9n2mBoeFUxf7Tzx4dD3iYt2kDsza6mqPXoUogPnS2hx\"]},\"contracts/src/token/ERC20Forwarder.sol\":{\"keccak256\":\"0x6befdeedb2195833825ed48a9f7895b62805f28cb1acd6fce0c0b6aea29f2f2d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02faffbfc37e602a6b889afb7569ffde81cc5e25dfb88343d22ae5d73222f8f4\",\"dweb:/ipfs/QmXnfa9bQGpxVJhzT4kCynk9YuDk9zeqnVCULbxmkwcePo\"]},\"contracts/src/token/ERC20ForwarderFactory.sol\":{\"keccak256\":\"0x9cf65c1e42f92b33cfe1de3ca603376fe6de3e690fa492ce256eab2f12f8082d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4a8ac28437748df20f024974e626c0c29ddad855540c61e59afda59cb02ef4da\",\"dweb:/ipfs/QmSKMYuPVnUbhQGopuSViy8DhzYcKSenFFxz2m3EoTSqkp\"]}},\"version\":1}";
    readonly metadata: {
        readonly compiler: {
            readonly version: "0.8.20+commit.a1b79de6";
        };
        readonly language: "Solidity";
        readonly output: {
            readonly abi: readonly [{
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "InvalidForwarderAddress";
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "ERC20LINK_HASH";
                readonly outputs: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "";
                    readonly type: "bytes32";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "contract IMultiToken";
                    readonly name: "__token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "__tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "create";
                readonly outputs: readonly [{
                    readonly internalType: "contract IERC20Forwarder";
                    readonly name: "";
                    readonly type: "address";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "getDeployDetails";
                readonly outputs: readonly [{
                    readonly internalType: "contract IMultiToken";
                    readonly name: "";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "";
                    readonly type: "uint256";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "contract IMultiToken";
                    readonly name: "__token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "__tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "getForwarder";
                readonly outputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "";
                    readonly type: "address";
                }];
            }];
            readonly devdoc: {
                readonly kind: "dev";
                readonly methods: {
                    readonly "create(address,uint256)": {
                        readonly params: {
                            readonly __token: "The MultiToken targeted by this factory.";
                            readonly __tokenId: "The sub-token ID targeted by this factory.";
                        };
                        readonly returns: {
                            readonly _0: "Returns the address of the deployed forwarder.";
                        };
                    };
                    readonly "getDeployDetails()": {
                        readonly details: "The target MultiToken and token ID are transient state variables      that are set during deployment.";
                        readonly returns: {
                            readonly _0: "The target MultiToken.";
                            readonly _1: "The target token ID.";
                        };
                    };
                    readonly "getForwarder(address,uint256)": {
                        readonly params: {
                            readonly __token: "The target MultiToken of the forwarder.";
                            readonly __tokenId: "The target token ID of the forwarder.";
                        };
                        readonly returns: {
                            readonly _0: "The expected address of the forwarder.";
                        };
                    };
                };
                readonly version: 1;
            };
            readonly userdoc: {
                readonly kind: "user";
                readonly methods: {
                    readonly "ERC20LINK_HASH()": {
                        readonly notice: "The hash of the bytecode of the ERC20 forwarder contract.";
                    };
                    readonly "create(address,uint256)": {
                        readonly notice: "Uses create2 to deploy a forwarder at a predictable address as         part of our ERC20 multitoken implementation.";
                    };
                    readonly "getDeployDetails()": {
                        readonly notice: "Gets the MultiToken and token ID that should be targeted by the         calling forwarder.";
                    };
                    readonly "getForwarder(address,uint256)": {
                        readonly notice: "Helper to calculate expected forwarder contract addresses.";
                    };
                };
                readonly version: 1;
            };
        };
        readonly settings: {
            readonly remappings: readonly ["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/", "aave-v3-core/=lib/aave-v3-core/", "ds-test/=lib/forge-std/lib/ds-test/src/", "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/", "forge-std/=lib/forge-std/src/", "openzeppelin-contracts/=lib/openzeppelin-contracts/", "openzeppelin/=lib/openzeppelin-contracts/contracts/", "solmate/=lib/solmate/src/"];
            readonly optimizer: {
                readonly enabled: true;
                readonly runs: 200;
            };
            readonly metadata: {
                readonly bytecodeHash: "ipfs";
            };
            readonly compilationTarget: {
                readonly "contracts/src/token/ERC20ForwarderFactory.sol": "ERC20ForwarderFactory";
            };
            readonly libraries: {};
        };
        readonly sources: {
            readonly "contracts/src/interfaces/IERC20.sol": {
                readonly keccak256: "0x5f446a4987d57c64380d44c234ee079172e98bed9595ec067eb519898c3117d9";
                readonly urls: readonly ["bzz-raw://a3245994c58110716f5099c07e5cb270137356d288044f03c713d29c36e207ac", "dweb:/ipfs/QmYdn52sGRQKXfSyL8ieSz8HysG6R5kLJWsNwEnyX1e22p"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IERC20Forwarder.sol": {
                readonly keccak256: "0x0af72255c641b0cd5c1975215e3f6713539da7963edd3d67d8151657e524dbe9";
                readonly urls: readonly ["bzz-raw://187998e942efa97a7932bef37fde379346938e19f513e8e73c7ae9dbdd83499a", "dweb:/ipfs/QmSwSphYw15JVo2vizDWknyAzsc6ttrjiDMmRDbN7UXHrZ"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IERC20ForwarderFactory.sol": {
                readonly keccak256: "0xd413c9701c4d8be234bd037de24aabacce110848f86eac44fa6de04eda6d05ed";
                readonly urls: readonly ["bzz-raw://59fcaa637112713c2d1264664f8c6b428da46cceb4689fd8757f07fa87633aad", "dweb:/ipfs/QmWGLox6p9Ja2dwH5bgED69JtuK4Y55G7pgTPeeTmYrW5Z"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdrive.sol": {
                readonly keccak256: "0xbb41b77195a206fee42f1c801d1feeefcb84d1d33fcdb537ba2597a2eaf7bf94";
                readonly urls: readonly ["bzz-raw://ad3474360d05cf4002ea0703ff36dba900dc1b17da8077f8bcaf159c0b0861eb", "dweb:/ipfs/QmYTehjAXpiuLErAWGfVw1LFn8g2oZ7YnjLNXcmU5ngPBf"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveCore.sol": {
                readonly keccak256: "0x2836b8e9e2b6e143d4601e0047dfd09232352038a2133670d2f40da5442ff4b3";
                readonly urls: readonly ["bzz-raw://64eec4fc70dd4fdf3ad835ef343d56bd4a7c48f2bb0e1f338d9f090e42848660", "dweb:/ipfs/Qmeg2aX8QZBggY1tChJQJbkhkbxWFRQPDsZRxUMsGfFg5m"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveEvents.sol": {
                readonly keccak256: "0x1841703b12d5b2ca7dedff94c7dd71a4ad0a0b47ca59ba9de98ea14929fb72e5";
                readonly urls: readonly ["bzz-raw://c192bfc8bee91341d7e7530d71df2fbaec69d7bf0017e7b318dea276b7f3e171", "dweb:/ipfs/QmRWCkdXJ7G2FDo4CpsNuRvDgYWzN9U3LXLzM3YKHs9M4y"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveRead.sol": {
                readonly keccak256: "0x5922cbd86a7267c8fd19e3dc7a6f2636bad2b3330c28bca8e66adc7cd8ce2b55";
                readonly urls: readonly ["bzz-raw://ced8bce3f3c15a9f0bcdd11ba16e69651179edd6b16e267936788f4ab4d6eabf", "dweb:/ipfs/QmcoZPj4h2ym6r13KDU7JG2GoVdDWa1GwfKL2jjFRsp8H6"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiToken.sol": {
                readonly keccak256: "0xf5f82b8223e0c1bfcf4f73566a909ba07a9266960dfe2335c1494e06debbbe3f";
                readonly urls: readonly ["bzz-raw://920cf3fd66132a1e98a6a5708ad9a3bb047f4df8848119ab382b51094c1290a7", "dweb:/ipfs/QmWL3SyG8L91Coe9DsHz3Ke9tGMvYBf2NgRRDr3Fg5xFzp"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenCore.sol": {
                readonly keccak256: "0xf692b4673daac8627a185253b5fb99c843d9c5a2897be50599030fbd02c21a28";
                readonly urls: readonly ["bzz-raw://ec28e35b2523d2f399c79ec5c8e29a4985a0e7a2d1d83c9a834d84dfc44130a2", "dweb:/ipfs/QmZLHmSUkDJsnU2FJ4FuaMfo2t6dPimmLaCDrfuxYF8nmD"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenEvents.sol": {
                readonly keccak256: "0x165f79e628b1975343f979549f3fdb5073a29aeecb03861f41d165961ee39fdb";
                readonly urls: readonly ["bzz-raw://3c0751cf322944d080a7a6692897807d0cef798268689afc1f6c8f91182a4222", "dweb:/ipfs/QmQVWtCgphU9sjqD2q6F6ww62uXDSWZx5KJVj6jFJpXeDK"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenMetadata.sol": {
                readonly keccak256: "0xeabffcfcd0fd642caaa2355dccad38269d25fbd4db1b0db43fd97328bf464862";
                readonly urls: readonly ["bzz-raw://6970e3db54bfcca6748db01b871fcee4f8d74fea2e66c39e3320232086633355", "dweb:/ipfs/QmPq66eyA4DmnU7m1QpMgKGrJ3ebUeN6e8UEuhb64U3BH2"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenRead.sol": {
                readonly keccak256: "0xc28d1017afe010c20c2fbe9b78e0001eb8b7db16e0fe5038990692227be365ec";
                readonly urls: readonly ["bzz-raw://8056e866c6da775c66cefc4e03d8856d75980d8c6eb98e954e1319b2478ad51c", "dweb:/ipfs/Qme9n2mBoeFUxf7Tzx4dD3iYt2kDsza6mqPXoUogPnS2hx"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/token/ERC20Forwarder.sol": {
                readonly keccak256: "0x6befdeedb2195833825ed48a9f7895b62805f28cb1acd6fce0c0b6aea29f2f2d";
                readonly urls: readonly ["bzz-raw://02faffbfc37e602a6b889afb7569ffde81cc5e25dfb88343d22ae5d73222f8f4", "dweb:/ipfs/QmXnfa9bQGpxVJhzT4kCynk9YuDk9zeqnVCULbxmkwcePo"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/token/ERC20ForwarderFactory.sol": {
                readonly keccak256: "0x9cf65c1e42f92b33cfe1de3ca603376fe6de3e690fa492ce256eab2f12f8082d";
                readonly urls: readonly ["bzz-raw://4a8ac28437748df20f024974e626c0c29ddad855540c61e59afda59cb02ef4da", "dweb:/ipfs/QmSKMYuPVnUbhQGopuSViy8DhzYcKSenFFxz2m3EoTSqkp"];
                readonly license: "Apache-2.0";
            };
        };
        readonly version: 1;
    };
    readonly ast: {
        readonly absolutePath: "contracts/src/token/ERC20ForwarderFactory.sol";
        readonly id: 19431;
        readonly exportedSymbols: {
            readonly ERC20Forwarder: readonly [19252];
            readonly ERC20ForwarderFactory: readonly [19430];
            readonly IERC20Forwarder: readonly [6862];
            readonly IERC20ForwarderFactory: readonly [6910];
            readonly IHyperdrive: readonly [7480];
            readonly IMultiToken: readonly [8357];
        };
        readonly nodeType: "SourceUnit";
        readonly src: "39:3902:79";
        readonly nodes: readonly [{
            readonly id: 19254;
            readonly nodeType: "PragmaDirective";
            readonly src: "39:23:79";
            readonly nodes: readonly [];
            readonly literals: readonly ["solidity", "0.8", ".20"];
        }, {
            readonly id: 19256;
            readonly nodeType: "ImportDirective";
            readonly src: "64:68:79";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IERC20Forwarder.sol";
            readonly file: "../interfaces/IERC20Forwarder.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19431;
            readonly sourceUnit: 6863;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 19255;
                    readonly name: "IERC20Forwarder";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 6862;
                    readonly src: "73:15:79";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 19258;
            readonly nodeType: "ImportDirective";
            readonly src: "133:82:79";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IERC20ForwarderFactory.sol";
            readonly file: "../interfaces/IERC20ForwarderFactory.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19431;
            readonly sourceUnit: 6911;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 19257;
                    readonly name: "IERC20ForwarderFactory";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 6910;
                    readonly src: "142:22:79";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 19260;
            readonly nodeType: "ImportDirective";
            readonly src: "216:60:79";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IHyperdrive.sol";
            readonly file: "../interfaces/IHyperdrive.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19431;
            readonly sourceUnit: 7481;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 19259;
                    readonly name: "IHyperdrive";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 7480;
                    readonly src: "225:11:79";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 19262;
            readonly nodeType: "ImportDirective";
            readonly src: "277:60:79";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IMultiToken.sol";
            readonly file: "../interfaces/IMultiToken.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19431;
            readonly sourceUnit: 8358;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 19261;
                    readonly name: "IMultiToken";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 8357;
                    readonly src: "286:11:79";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 19264;
            readonly nodeType: "ImportDirective";
            readonly src: "338:54:79";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/token/ERC20Forwarder.sol";
            readonly file: "./ERC20Forwarder.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19431;
            readonly sourceUnit: 19253;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 19263;
                    readonly name: "ERC20Forwarder";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 19252;
                    readonly src: "347:14:79";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 19430;
            readonly nodeType: "ContractDefinition";
            readonly src: "1052:2888:79";
            readonly nodes: readonly [{
                readonly id: 19277;
                readonly nodeType: "VariableDeclaration";
                readonly src: "1186:52:79";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly documentation: {
                    readonly id: 19268;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1115:66:79";
                    readonly text: "@notice The transient MultiToken addressed used in deployment.";
                };
                readonly mutability: "mutable";
                readonly name: "_token";
                readonly nameLocation: "1206:6:79";
                readonly scope: 19430;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                    readonly typeString: "contract IMultiToken";
                };
                readonly typeName: {
                    readonly id: 19270;
                    readonly nodeType: "UserDefinedTypeName";
                    readonly pathNode: {
                        readonly id: 19269;
                        readonly name: "IMultiToken";
                        readonly nameLocations: readonly ["1186:11:79"];
                        readonly nodeType: "IdentifierPath";
                        readonly referencedDeclaration: 8357;
                        readonly src: "1186:11:79";
                    };
                    readonly referencedDeclaration: 8357;
                    readonly src: "1186:11:79";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                        readonly typeString: "contract IMultiToken";
                    };
                };
                readonly value: {
                    readonly arguments: readonly [{
                        readonly arguments: readonly [{
                            readonly hexValue: "31";
                            readonly id: 19274;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: true;
                            readonly kind: "number";
                            readonly lValueRequested: false;
                            readonly nodeType: "Literal";
                            readonly src: "1235:1:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_rational_1_by_1";
                                readonly typeString: "int_const 1";
                            };
                            readonly value: "1";
                        }];
                        readonly expression: {
                            readonly argumentTypes: readonly [{
                                readonly typeIdentifier: "t_rational_1_by_1";
                                readonly typeString: "int_const 1";
                            }];
                            readonly id: 19273;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: true;
                            readonly lValueRequested: false;
                            readonly nodeType: "ElementaryTypeNameExpression";
                            readonly src: "1227:7:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_type$_t_address_$";
                                readonly typeString: "type(address)";
                            };
                            readonly typeName: {
                                readonly id: 19272;
                                readonly name: "address";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "1227:7:79";
                                readonly typeDescriptions: {};
                            };
                        };
                        readonly id: 19275;
                        readonly isConstant: false;
                        readonly isLValue: false;
                        readonly isPure: true;
                        readonly kind: "typeConversion";
                        readonly lValueRequested: false;
                        readonly nameLocations: readonly [];
                        readonly names: readonly [];
                        readonly nodeType: "FunctionCall";
                        readonly src: "1227:10:79";
                        readonly tryCall: false;
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                    }];
                    readonly expression: {
                        readonly argumentTypes: readonly [{
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        }];
                        readonly id: 19271;
                        readonly name: "IMultiToken";
                        readonly nodeType: "Identifier";
                        readonly overloadedDeclarations: readonly [];
                        readonly referencedDeclaration: 8357;
                        readonly src: "1215:11:79";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_type$_t_contract$_IMultiToken_$8357_$";
                            readonly typeString: "type(contract IMultiToken)";
                        };
                    };
                    readonly id: 19276;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: true;
                    readonly kind: "typeConversion";
                    readonly lValueRequested: false;
                    readonly nameLocations: readonly [];
                    readonly names: readonly [];
                    readonly nodeType: "FunctionCall";
                    readonly src: "1215:23:79";
                    readonly tryCall: false;
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                        readonly typeString: "contract IMultiToken";
                    };
                };
                readonly visibility: "private";
            }, {
                readonly id: 19281;
                readonly nodeType: "VariableDeclaration";
                readonly src: "1314:28:79";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly documentation: {
                    readonly id: 19278;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1245:64:79";
                    readonly text: "@notice The transient token ID addressed used in deployment.";
                };
                readonly mutability: "mutable";
                readonly name: "_tokenId";
                readonly nameLocation: "1330:8:79";
                readonly scope: 19430;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_uint256";
                    readonly typeString: "uint256";
                };
                readonly typeName: {
                    readonly id: 19279;
                    readonly name: "uint256";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "1314:7:79";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_uint256";
                        readonly typeString: "uint256";
                    };
                };
                readonly value: {
                    readonly hexValue: "31";
                    readonly id: 19280;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: true;
                    readonly kind: "number";
                    readonly lValueRequested: false;
                    readonly nodeType: "Literal";
                    readonly src: "1341:1:79";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_rational_1_by_1";
                        readonly typeString: "int_const 1";
                    };
                    readonly value: "1";
                };
                readonly visibility: "private";
            }, {
                readonly id: 19290;
                readonly nodeType: "VariableDeclaration";
                readonly src: "1423:93:79";
                readonly nodes: readonly [];
                readonly baseFunctions: readonly [6909];
                readonly constant: true;
                readonly documentation: {
                    readonly id: 19282;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1349:69:79";
                    readonly text: "@notice The hash of the bytecode of the ERC20 forwarder contract.";
                };
                readonly functionSelector: "d13053bb";
                readonly mutability: "constant";
                readonly name: "ERC20LINK_HASH";
                readonly nameLocation: "1447:14:79";
                readonly scope: 19430;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_bytes32";
                    readonly typeString: "bytes32";
                };
                readonly typeName: {
                    readonly id: 19283;
                    readonly name: "bytes32";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "1423:7:79";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_bytes32";
                        readonly typeString: "bytes32";
                    };
                };
                readonly value: {
                    readonly arguments: readonly [{
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 19286;
                                readonly name: "ERC20Forwarder";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19252;
                                readonly src: "1487:14:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_type$_t_contract$_ERC20Forwarder_$19252_$";
                                    readonly typeString: "type(contract ERC20Forwarder)";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_type$_t_contract$_ERC20Forwarder_$19252_$";
                                    readonly typeString: "type(contract ERC20Forwarder)";
                                }];
                                readonly id: 19285;
                                readonly name: "type";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -27;
                                readonly src: "1482:4:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_metatype_pure$__$returns$__$";
                                    readonly typeString: "function () pure";
                                };
                            };
                            readonly id: 19287;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: true;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1482:20:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_magic_meta_type_t_contract$_ERC20Forwarder_$19252";
                                readonly typeString: "type(contract ERC20Forwarder)";
                            };
                        };
                        readonly id: 19288;
                        readonly isConstant: false;
                        readonly isLValue: false;
                        readonly isPure: true;
                        readonly lValueRequested: false;
                        readonly memberLocation: "1503:12:79";
                        readonly memberName: "creationCode";
                        readonly nodeType: "MemberAccess";
                        readonly src: "1482:33:79";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_bytes_memory_ptr";
                            readonly typeString: "bytes memory";
                        };
                    }];
                    readonly expression: {
                        readonly argumentTypes: readonly [{
                            readonly typeIdentifier: "t_bytes_memory_ptr";
                            readonly typeString: "bytes memory";
                        }];
                        readonly id: 19284;
                        readonly name: "keccak256";
                        readonly nodeType: "Identifier";
                        readonly overloadedDeclarations: readonly [];
                        readonly referencedDeclaration: -8;
                        readonly src: "1472:9:79";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                            readonly typeString: "function (bytes memory) pure returns (bytes32)";
                        };
                    };
                    readonly id: 19289;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: true;
                    readonly kind: "functionCall";
                    readonly lValueRequested: false;
                    readonly nameLocations: readonly [];
                    readonly names: readonly [];
                    readonly nodeType: "FunctionCall";
                    readonly src: "1472:44:79";
                    readonly tryCall: false;
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_bytes32";
                        readonly typeString: "bytes32";
                    };
                };
                readonly visibility: "public";
            }, {
                readonly id: 19364;
                readonly nodeType: "FunctionDefinition";
                readonly src: "1858:888:79";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 19363;
                    readonly nodeType: "Block";
                    readonly src: "1971:775:79";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly id: 19304;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 19302;
                                readonly name: "_tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19281;
                                readonly src: "2041:8:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly id: 19303;
                                readonly name: "__tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19296;
                                readonly src: "2052:9:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly src: "2041:20:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly id: 19305;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2041:20:79";
                    }, {
                        readonly expression: {
                            readonly id: 19308;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 19306;
                                readonly name: "_token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19277;
                                readonly src: "2071:6:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly id: 19307;
                                readonly name: "__token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19294;
                                readonly src: "2080:7:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly src: "2071:16:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly id: 19309;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2071:16:79";
                    }, {
                        readonly assignments: readonly [19311];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19311;
                            readonly mutability: "mutable";
                            readonly name: "salt";
                            readonly nameLocation: "2171:4:79";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19363;
                            readonly src: "2163:12:79";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                            readonly typeName: {
                                readonly id: 19310;
                                readonly name: "bytes32";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "2163:7:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes32";
                                    readonly typeString: "bytes32";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19319;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 19315;
                                    readonly name: "__token";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19294;
                                    readonly src: "2199:7:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                        readonly typeString: "contract IMultiToken";
                                    };
                                }, {
                                    readonly id: 19316;
                                    readonly name: "__tokenId";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19296;
                                    readonly src: "2208:9:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                        readonly typeString: "contract IMultiToken";
                                    }, {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    }];
                                    readonly expression: {
                                        readonly id: 19313;
                                        readonly name: "abi";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -1;
                                        readonly src: "2188:3:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_magic_abi";
                                            readonly typeString: "abi";
                                        };
                                    };
                                    readonly id: 19314;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "2192:6:79";
                                    readonly memberName: "encode";
                                    readonly nodeType: "MemberAccess";
                                    readonly src: "2188:10:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$";
                                        readonly typeString: "function () pure returns (bytes memory)";
                                    };
                                };
                                readonly id: 19317;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "2188:30:79";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                }];
                                readonly id: 19312;
                                readonly name: "keccak256";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -8;
                                readonly src: "2178:9:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                                    readonly typeString: "function (bytes memory) pure returns (bytes32)";
                                };
                            };
                            readonly id: 19318;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2178:41:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "2163:56:79";
                    }, {
                        readonly assignments: readonly [19322];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19322;
                            readonly mutability: "mutable";
                            readonly name: "deployed";
                            readonly nameLocation: "2293:8:79";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19363;
                            readonly src: "2278:23:79";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$19252";
                                readonly typeString: "contract ERC20Forwarder";
                            };
                            readonly typeName: {
                                readonly id: 19321;
                                readonly nodeType: "UserDefinedTypeName";
                                readonly pathNode: {
                                    readonly id: 19320;
                                    readonly name: "ERC20Forwarder";
                                    readonly nameLocations: readonly ["2278:14:79"];
                                    readonly nodeType: "IdentifierPath";
                                    readonly referencedDeclaration: 19252;
                                    readonly src: "2278:14:79";
                                };
                                readonly referencedDeclaration: 19252;
                                readonly src: "2278:14:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_ERC20Forwarder_$19252";
                                    readonly typeString: "contract ERC20Forwarder";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19329;
                        readonly initialValue: {
                            readonly arguments: readonly [];
                            readonly expression: {
                                readonly argumentTypes: readonly [];
                                readonly expression: {
                                    readonly argumentTypes: readonly [];
                                    readonly id: 19325;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly nodeType: "NewExpression";
                                    readonly src: "2304:18:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_creation_nonpayable$__$returns$_t_contract$_ERC20Forwarder_$19252_$";
                                        readonly typeString: "function () returns (contract ERC20Forwarder)";
                                    };
                                    readonly typeName: {
                                        readonly id: 19324;
                                        readonly nodeType: "UserDefinedTypeName";
                                        readonly pathNode: {
                                            readonly id: 19323;
                                            readonly name: "ERC20Forwarder";
                                            readonly nameLocations: readonly ["2308:14:79"];
                                            readonly nodeType: "IdentifierPath";
                                            readonly referencedDeclaration: 19252;
                                            readonly src: "2308:14:79";
                                        };
                                        readonly referencedDeclaration: 19252;
                                        readonly src: "2308:14:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_ERC20Forwarder_$19252";
                                            readonly typeString: "contract ERC20Forwarder";
                                        };
                                    };
                                };
                                readonly id: 19327;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly names: readonly ["salt"];
                                readonly nodeType: "FunctionCallOptions";
                                readonly options: readonly [{
                                    readonly id: 19326;
                                    readonly name: "salt";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19311;
                                    readonly src: "2330:4:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    };
                                }];
                                readonly src: "2304:32:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_creation_nonpayable$__$returns$_t_contract$_ERC20Forwarder_$19252_$salt";
                                    readonly typeString: "function () returns (contract ERC20Forwarder)";
                                };
                            };
                            readonly id: 19328;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2304:34:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$19252";
                                readonly typeString: "contract ERC20Forwarder";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "2278:60:79";
                    }, {
                        readonly condition: {
                            readonly id: 19340;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly nodeType: "UnaryOperation";
                            readonly operator: "!";
                            readonly prefix: true;
                            readonly src: "2431:56:79";
                            readonly subExpression: {
                                readonly components: readonly [{
                                    readonly commonType: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                    readonly id: 19338;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly leftExpression: {
                                        readonly arguments: readonly [{
                                            readonly id: 19332;
                                            readonly name: "deployed";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 19322;
                                            readonly src: "2441:8:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$19252";
                                                readonly typeString: "contract ERC20Forwarder";
                                            };
                                        }];
                                        readonly expression: {
                                            readonly argumentTypes: readonly [{
                                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$19252";
                                                readonly typeString: "contract ERC20Forwarder";
                                            }];
                                            readonly id: 19331;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: true;
                                            readonly lValueRequested: false;
                                            readonly nodeType: "ElementaryTypeNameExpression";
                                            readonly src: "2433:7:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_type$_t_address_$";
                                                readonly typeString: "type(address)";
                                            };
                                            readonly typeName: {
                                                readonly id: 19330;
                                                readonly name: "address";
                                                readonly nodeType: "ElementaryTypeName";
                                                readonly src: "2433:7:79";
                                                readonly typeDescriptions: {};
                                            };
                                        };
                                        readonly id: 19333;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly kind: "typeConversion";
                                        readonly lValueRequested: false;
                                        readonly nameLocations: readonly [];
                                        readonly names: readonly [];
                                        readonly nodeType: "FunctionCall";
                                        readonly src: "2433:17:79";
                                        readonly tryCall: false;
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        };
                                    };
                                    readonly nodeType: "BinaryOperation";
                                    readonly operator: "==";
                                    readonly rightExpression: {
                                        readonly arguments: readonly [{
                                            readonly id: 19335;
                                            readonly name: "__token";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 19294;
                                            readonly src: "2467:7:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                                readonly typeString: "contract IMultiToken";
                                            };
                                        }, {
                                            readonly id: 19336;
                                            readonly name: "__tokenId";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 19296;
                                            readonly src: "2476:9:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        }];
                                        readonly expression: {
                                            readonly argumentTypes: readonly [{
                                                readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                                readonly typeString: "contract IMultiToken";
                                            }, {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            }];
                                            readonly id: 19334;
                                            readonly name: "getForwarder";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 19429;
                                            readonly src: "2454:12:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_function_internal_view$_t_contract$_IMultiToken_$8357_$_t_uint256_$returns$_t_address_$";
                                                readonly typeString: "function (contract IMultiToken,uint256) view returns (address)";
                                            };
                                        };
                                        readonly id: 19337;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly kind: "functionCall";
                                        readonly lValueRequested: false;
                                        readonly nameLocations: readonly [];
                                        readonly names: readonly [];
                                        readonly nodeType: "FunctionCall";
                                        readonly src: "2454:32:79";
                                        readonly tryCall: false;
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        };
                                    };
                                    readonly src: "2433:53:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bool";
                                        readonly typeString: "bool";
                                    };
                                }];
                                readonly id: 19339;
                                readonly isConstant: false;
                                readonly isInlineArray: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly nodeType: "TupleExpression";
                                readonly src: "2432:55:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                            };
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly id: 19347;
                        readonly nodeType: "IfStatement";
                        readonly src: "2427:142:79";
                        readonly trueBody: {
                            readonly id: 19346;
                            readonly nodeType: "Block";
                            readonly src: "2489:80:79";
                            readonly statements: readonly [{
                                readonly errorCall: {
                                    readonly arguments: readonly [];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [];
                                        readonly expression: {
                                            readonly id: 19341;
                                            readonly name: "IERC20ForwarderFactory";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 6910;
                                            readonly src: "2510:22:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_type$_t_contract$_IERC20ForwarderFactory_$6910_$";
                                                readonly typeString: "type(contract IERC20ForwarderFactory)";
                                            };
                                        };
                                        readonly id: 19343;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly memberLocation: "2533:23:79";
                                        readonly memberName: "InvalidForwarderAddress";
                                        readonly nodeType: "MemberAccess";
                                        readonly referencedDeclaration: 6871;
                                        readonly src: "2510:46:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_function_error_pure$__$returns$__$";
                                            readonly typeString: "function () pure";
                                        };
                                    };
                                    readonly id: 19344;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "functionCall";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "2510:48:79";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_tuple$__$";
                                        readonly typeString: "tuple()";
                                    };
                                };
                                readonly id: 19345;
                                readonly nodeType: "RevertStatement";
                                readonly src: "2503:55:79";
                            }];
                        };
                    }, {
                        readonly expression: {
                            readonly id: 19355;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 19348;
                                readonly name: "_token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19277;
                                readonly src: "2617:6:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly arguments: readonly [{
                                        readonly hexValue: "31";
                                        readonly id: 19352;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly kind: "number";
                                        readonly lValueRequested: false;
                                        readonly nodeType: "Literal";
                                        readonly src: "2646:1:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_rational_1_by_1";
                                            readonly typeString: "int_const 1";
                                        };
                                        readonly value: "1";
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_rational_1_by_1";
                                            readonly typeString: "int_const 1";
                                        }];
                                        readonly id: 19351;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "2638:7:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_address_$";
                                            readonly typeString: "type(address)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19350;
                                            readonly name: "address";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "2638:7:79";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19353;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "2638:10:79";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }];
                                    readonly id: 19349;
                                    readonly name: "IMultiToken";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 8357;
                                    readonly src: "2626:11:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_type$_t_contract$_IMultiToken_$8357_$";
                                        readonly typeString: "type(contract IMultiToken)";
                                    };
                                };
                                readonly id: 19354;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "typeConversion";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "2626:23:79";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly src: "2617:32:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly id: 19356;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2617:32:79";
                    }, {
                        readonly expression: {
                            readonly id: 19359;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 19357;
                                readonly name: "_tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19281;
                                readonly src: "2659:8:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly hexValue: "31";
                                readonly id: 19358;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "2670:1:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                };
                                readonly value: "1";
                            };
                            readonly src: "2659:12:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly id: 19360;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2659:12:79";
                    }, {
                        readonly expression: {
                            readonly id: 19361;
                            readonly name: "deployed";
                            readonly nodeType: "Identifier";
                            readonly overloadedDeclarations: readonly [];
                            readonly referencedDeclaration: 19322;
                            readonly src: "2731:8:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$19252";
                                readonly typeString: "contract ERC20Forwarder";
                            };
                        };
                        readonly functionReturnParameters: 19301;
                        readonly id: 19362;
                        readonly nodeType: "Return";
                        readonly src: "2724:15:79";
                    }];
                };
                readonly baseFunctions: readonly [6883];
                readonly documentation: {
                    readonly id: 19291;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1523:330:79";
                    readonly text: "@notice Uses create2 to deploy a forwarder at a predictable address as\n         part of our ERC20 multitoken implementation.\n @param __token The MultiToken targeted by this factory.\n @param __tokenId The sub-token ID targeted by this factory.\n @return Returns the address of the deployed forwarder.";
                };
                readonly functionSelector: "0ecaea73";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "create";
                readonly nameLocation: "1867:6:79";
                readonly parameters: {
                    readonly id: 19297;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19294;
                        readonly mutability: "mutable";
                        readonly name: "__token";
                        readonly nameLocation: "1895:7:79";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19364;
                        readonly src: "1883:19:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                            readonly typeString: "contract IMultiToken";
                        };
                        readonly typeName: {
                            readonly id: 19293;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 19292;
                                readonly name: "IMultiToken";
                                readonly nameLocations: readonly ["1883:11:79"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 8357;
                                readonly src: "1883:11:79";
                            };
                            readonly referencedDeclaration: 8357;
                            readonly src: "1883:11:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 19296;
                        readonly mutability: "mutable";
                        readonly name: "__tokenId";
                        readonly nameLocation: "1920:9:79";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19364;
                        readonly src: "1912:17:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 19295;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "1912:7:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "1873:62:79";
                };
                readonly returnParameters: {
                    readonly id: 19301;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19300;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19364;
                        readonly src: "1954:15:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IERC20Forwarder_$6862";
                            readonly typeString: "contract IERC20Forwarder";
                        };
                        readonly typeName: {
                            readonly id: 19299;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 19298;
                                readonly name: "IERC20Forwarder";
                                readonly nameLocations: readonly ["1954:15:79"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 6862;
                                readonly src: "1954:15:79";
                            };
                            readonly referencedDeclaration: 6862;
                            readonly src: "1954:15:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IERC20Forwarder_$6862";
                                readonly typeString: "contract IERC20Forwarder";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "1953:17:79";
                };
                readonly scope: 19430;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "external";
            }, {
                readonly id: 19378;
                readonly nodeType: "FunctionDefinition";
                readonly src: "3066:115:79";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 19377;
                    readonly nodeType: "Block";
                    readonly src: "3139:42:79";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly components: readonly [{
                                readonly id: 19373;
                                readonly name: "_token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19277;
                                readonly src: "3157:6:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                    readonly typeString: "contract IMultiToken";
                                };
                            }, {
                                readonly id: 19374;
                                readonly name: "_tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19281;
                                readonly src: "3165:8:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }];
                            readonly id: 19375;
                            readonly isConstant: false;
                            readonly isInlineArray: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly nodeType: "TupleExpression";
                            readonly src: "3156:18:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$_t_contract$_IMultiToken_$8357_$_t_uint256_$";
                                readonly typeString: "tuple(contract IMultiToken,uint256)";
                            };
                        };
                        readonly functionReturnParameters: 19372;
                        readonly id: 19376;
                        readonly nodeType: "Return";
                        readonly src: "3149:25:79";
                    }];
                };
                readonly baseFunctions: readonly [6892];
                readonly documentation: {
                    readonly id: 19365;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "2752:309:79";
                    readonly text: "@notice Gets the MultiToken and token ID that should be targeted by the\n         calling forwarder.\n @dev The target MultiToken and token ID are transient state variables\n      that are set during deployment.\n @return The target MultiToken.\n @return The target token ID.";
                };
                readonly functionSelector: "600eb4ba";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "getDeployDetails";
                readonly nameLocation: "3075:16:79";
                readonly parameters: {
                    readonly id: 19366;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "3091:2:79";
                };
                readonly returnParameters: {
                    readonly id: 19372;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19369;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19378;
                        readonly src: "3117:11:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                            readonly typeString: "contract IMultiToken";
                        };
                        readonly typeName: {
                            readonly id: 19368;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 19367;
                                readonly name: "IMultiToken";
                                readonly nameLocations: readonly ["3117:11:79"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 8357;
                                readonly src: "3117:11:79";
                            };
                            readonly referencedDeclaration: 8357;
                            readonly src: "3117:11:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 19371;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19378;
                        readonly src: "3130:7:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 19370;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3130:7:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "3116:22:79";
                };
                readonly scope: 19430;
                readonly stateMutability: "view";
                readonly virtual: false;
                readonly visibility: "external";
            }, {
                readonly id: 19429;
                readonly nodeType: "FunctionDefinition";
                readonly src: "3443:495:79";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 19428;
                    readonly nodeType: "Block";
                    readonly src: "3557:381:79";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [19390];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19390;
                            readonly mutability: "mutable";
                            readonly name: "salt";
                            readonly nameLocation: "3632:4:79";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19428;
                            readonly src: "3624:12:79";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                            readonly typeName: {
                                readonly id: 19389;
                                readonly name: "bytes32";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "3624:7:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes32";
                                    readonly typeString: "bytes32";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19398;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 19394;
                                    readonly name: "__token";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19382;
                                    readonly src: "3660:7:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                        readonly typeString: "contract IMultiToken";
                                    };
                                }, {
                                    readonly id: 19395;
                                    readonly name: "__tokenId";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19384;
                                    readonly src: "3669:9:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                        readonly typeString: "contract IMultiToken";
                                    }, {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    }];
                                    readonly expression: {
                                        readonly id: 19392;
                                        readonly name: "abi";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -1;
                                        readonly src: "3649:3:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_magic_abi";
                                            readonly typeString: "abi";
                                        };
                                    };
                                    readonly id: 19393;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "3653:6:79";
                                    readonly memberName: "encode";
                                    readonly nodeType: "MemberAccess";
                                    readonly src: "3649:10:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$";
                                        readonly typeString: "function () pure returns (bytes memory)";
                                    };
                                };
                                readonly id: 19396;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "3649:30:79";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                }];
                                readonly id: 19391;
                                readonly name: "keccak256";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -8;
                                readonly src: "3639:9:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                                    readonly typeString: "function (bytes memory) pure returns (bytes32)";
                                };
                            };
                            readonly id: 19397;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "3639:41:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "3624:56:79";
                    }, {
                        readonly assignments: readonly [19400];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19400;
                            readonly mutability: "mutable";
                            readonly name: "addressBytes";
                            readonly nameLocation: "3698:12:79";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19428;
                            readonly src: "3690:20:79";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                            readonly typeName: {
                                readonly id: 19399;
                                readonly name: "bytes32";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "3690:7:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes32";
                                    readonly typeString: "bytes32";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19416;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly arguments: readonly [{
                                        readonly hexValue: "30786666";
                                        readonly id: 19406;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly kind: "number";
                                        readonly lValueRequested: false;
                                        readonly nodeType: "Literal";
                                        readonly src: "3760:4:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_rational_255_by_1";
                                            readonly typeString: "int_const 255";
                                        };
                                        readonly value: "0xff";
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_rational_255_by_1";
                                            readonly typeString: "int_const 255";
                                        }];
                                        readonly id: 19405;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "3753:6:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_bytes1_$";
                                            readonly typeString: "type(bytes1)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19404;
                                            readonly name: "bytes1";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "3753:6:79";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19407;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3753:12:79";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes1";
                                        readonly typeString: "bytes1";
                                    };
                                }, {
                                    readonly arguments: readonly [{
                                        readonly id: 19410;
                                        readonly name: "this";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -28;
                                        readonly src: "3775:4:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_ERC20ForwarderFactory_$19430";
                                            readonly typeString: "contract ERC20ForwarderFactory";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_contract$_ERC20ForwarderFactory_$19430";
                                            readonly typeString: "contract ERC20ForwarderFactory";
                                        }];
                                        readonly id: 19409;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "3767:7:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_address_$";
                                            readonly typeString: "type(address)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19408;
                                            readonly name: "address";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "3767:7:79";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19411;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3767:13:79";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }, {
                                    readonly id: 19412;
                                    readonly name: "salt";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19390;
                                    readonly src: "3782:4:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    };
                                }, {
                                    readonly id: 19413;
                                    readonly name: "ERC20LINK_HASH";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19290;
                                    readonly src: "3788:14:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_bytes1";
                                        readonly typeString: "bytes1";
                                    }, {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }, {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    }, {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    }];
                                    readonly expression: {
                                        readonly id: 19402;
                                        readonly name: "abi";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -1;
                                        readonly src: "3736:3:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_magic_abi";
                                            readonly typeString: "abi";
                                        };
                                    };
                                    readonly id: 19403;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "3740:12:79";
                                    readonly memberName: "encodePacked";
                                    readonly nodeType: "MemberAccess";
                                    readonly src: "3736:16:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$";
                                        readonly typeString: "function () pure returns (bytes memory)";
                                    };
                                };
                                readonly id: 19414;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "3736:67:79";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                }];
                                readonly id: 19401;
                                readonly name: "keccak256";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -8;
                                readonly src: "3713:9:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                                    readonly typeString: "function (bytes memory) pure returns (bytes32)";
                                };
                            };
                            readonly id: 19415;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "3713:100:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "3690:123:79";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly arguments: readonly [{
                                        readonly id: 19423;
                                        readonly name: "addressBytes";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 19400;
                                        readonly src: "3916:12:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_bytes32";
                                            readonly typeString: "bytes32";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_bytes32";
                                            readonly typeString: "bytes32";
                                        }];
                                        readonly id: 19422;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "3908:7:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_uint256_$";
                                            readonly typeString: "type(uint256)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19421;
                                            readonly name: "uint256";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "3908:7:79";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19424;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3908:21:79";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    }];
                                    readonly id: 19420;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly nodeType: "ElementaryTypeNameExpression";
                                    readonly src: "3900:7:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_type$_t_uint160_$";
                                        readonly typeString: "type(uint160)";
                                    };
                                    readonly typeName: {
                                        readonly id: 19419;
                                        readonly name: "uint160";
                                        readonly nodeType: "ElementaryTypeName";
                                        readonly src: "3900:7:79";
                                        readonly typeDescriptions: {};
                                    };
                                };
                                readonly id: 19425;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "typeConversion";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "3900:30:79";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint160";
                                    readonly typeString: "uint160";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint160";
                                    readonly typeString: "uint160";
                                }];
                                readonly id: 19418;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly lValueRequested: false;
                                readonly nodeType: "ElementaryTypeNameExpression";
                                readonly src: "3892:7:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_type$_t_address_$";
                                    readonly typeString: "type(address)";
                                };
                                readonly typeName: {
                                    readonly id: 19417;
                                    readonly name: "address";
                                    readonly nodeType: "ElementaryTypeName";
                                    readonly src: "3892:7:79";
                                    readonly typeDescriptions: {};
                                };
                            };
                            readonly id: 19426;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "typeConversion";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "3892:39:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly functionReturnParameters: 19388;
                        readonly id: 19427;
                        readonly nodeType: "Return";
                        readonly src: "3885:46:79";
                    }];
                };
                readonly baseFunctions: readonly [6903];
                readonly documentation: {
                    readonly id: 19379;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "3187:251:79";
                    readonly text: "@notice Helper to calculate expected forwarder contract addresses.\n @param __token The target MultiToken of the forwarder.\n @param __tokenId The target token ID of the forwarder.\n @return The expected address of the forwarder.";
                };
                readonly functionSelector: "0710fd58";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "getForwarder";
                readonly nameLocation: "3452:12:79";
                readonly parameters: {
                    readonly id: 19385;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19382;
                        readonly mutability: "mutable";
                        readonly name: "__token";
                        readonly nameLocation: "3486:7:79";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19429;
                        readonly src: "3474:19:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                            readonly typeString: "contract IMultiToken";
                        };
                        readonly typeName: {
                            readonly id: 19381;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 19380;
                                readonly name: "IMultiToken";
                                readonly nameLocations: readonly ["3474:11:79"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 8357;
                                readonly src: "3474:11:79";
                            };
                            readonly referencedDeclaration: 8357;
                            readonly src: "3474:11:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8357";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 19384;
                        readonly mutability: "mutable";
                        readonly name: "__tokenId";
                        readonly nameLocation: "3511:9:79";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19429;
                        readonly src: "3503:17:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 19383;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3503:7:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "3464:62:79";
                };
                readonly returnParameters: {
                    readonly id: 19388;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19387;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19429;
                        readonly src: "3548:7:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 19386;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3548:7:79";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "3547:9:79";
                };
                readonly scope: 19430;
                readonly stateMutability: "view";
                readonly virtual: false;
                readonly visibility: "public";
            }];
            readonly abstract: false;
            readonly baseContracts: readonly [{
                readonly baseName: {
                    readonly id: 19266;
                    readonly name: "IERC20ForwarderFactory";
                    readonly nameLocations: readonly ["1086:22:79"];
                    readonly nodeType: "IdentifierPath";
                    readonly referencedDeclaration: 6910;
                    readonly src: "1086:22:79";
                };
                readonly id: 19267;
                readonly nodeType: "InheritanceSpecifier";
                readonly src: "1086:22:79";
            }];
            readonly canonicalName: "ERC20ForwarderFactory";
            readonly contractDependencies: readonly [19252];
            readonly contractKind: "contract";
            readonly documentation: {
                readonly id: 19265;
                readonly nodeType: "StructuredDocumentation";
                readonly src: "394:658:79";
                readonly text: "@author DELV\n @title ERC20ForwarderFactory\n @notice Our MultiToken contract consists of fungible sub-tokens that\n         are similar to ERC20 tokens. In order to support ERC20 compatibility\n         we can deploy interfaces which are ERC20s.\n @dev This factory deploys them using create2 so that the multi token can do\n      cheap verification of the interfaces before they access sensitive\n      functions.\n @custom:disclaimer The language used in this code is for coding convenience\n                    only, and is not intended to, and does not, have any\n                    particular legal or regulatory significance.";
            };
            readonly fullyImplemented: true;
            readonly linearizedBaseContracts: readonly [19430, 6910];
            readonly name: "ERC20ForwarderFactory";
            readonly nameLocation: "1061:21:79";
            readonly scope: 19431;
            readonly usedErrors: readonly [6871];
            readonly usedEvents: readonly [];
        }];
        readonly license: "Apache-2.0";
    };
    readonly id: 79;
};
//# sourceMappingURL=ERC20ForwarderFactory.d.ts.map