export declare const ERC20ForwarderFactory: {
    readonly abi: readonly [{
        readonly type: "function";
        readonly name: "ERC20LINK_HASH";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "create";
        readonly inputs: readonly [{
            readonly name: "__token";
            readonly type: "address";
            readonly internalType: "contract IMultiToken";
        }, {
            readonly name: "__tokenId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "address";
            readonly internalType: "contract IERC20Forwarder";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly name: "getDeployDetails";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "address";
            readonly internalType: "contract IMultiToken";
        }, {
            readonly name: "";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "getForwarder";
        readonly inputs: readonly [{
            readonly name: "__token";
            readonly type: "address";
            readonly internalType: "contract IMultiToken";
        }, {
            readonly name: "__tokenId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "address";
            readonly internalType: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "error";
        readonly name: "InvalidForwarderAddress";
        readonly inputs: readonly [];
    }];
    readonly bytecode: {
        readonly object: "0x6080604052600080546001600160a01b0319166001908117909155805534801561002857600080fd5b506115e7806100386000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630710fd58146100515780630ecaea7314610081578063600eb4ba14610094578063d13053bb146100ca575b600080fd5b61006461005f3660046102cc565b6100e0565b6040516001600160a01b0390911681526020015b60405180910390f35b61006461008f3660046102cc565b6101b5565b6100ab6000546001546001600160a01b0390911691565b604080516001600160a01b039093168352602083019190915201610078565b6100d2610292565b604051908152602001610078565b604080516001600160a01b03841660208201529081018290526000908190606001604051602081830303815290604052805190602001209050600060ff60f81b308360405180602001610132906102bf565b6020820181038252601f19601f820116604052508051906020012060405160200161019494939291906001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60408051808303601f19018152919052805160209091012095945050505050565b6001819055600080546001600160a01b0319166001600160a01b038416908117825560408051602081019290925281018390528190606001604051602081830303815290604052805190602001209050600081604051610214906102bf565b8190604051809103906000f5905080158015610234573d6000803e3d6000fd5b50905061024185856100e0565b6001600160a01b0316816001600160a01b0316146102715760405162e0775560e61b815260040160405180910390fd5b600080546001600160a01b0319166001908117909155805591505092915050565b6040516102a1602082016102bf565b6020820181038252601f19601f820116604052508051906020012081565b6112ad8061030583390190565b600080604083850312156102df57600080fd5b82356001600160a01b03811681146102f657600080fd5b94602093909301359350505056fe60e06040523480156200001157600080fd5b50604080516330075a5d60e11b815281513392839263600eb4ba92600480830193928290030181865afa1580156200004d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200007391906200019a565b60a08190526001600160a01b039091166080819052604051622b600360e21b81527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9262ad800c91620000cd919060040190815260200190565b600060405180830381865afa158015620000eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001159190810190620001ec565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f19818403018152919052805160209091012060c05250620002c1565b60008060408385031215620001ae57600080fd5b82516001600160a01b0381168114620001c657600080fd5b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200020057600080fd5b82516001600160401b03808211156200021857600080fd5b818501915085601f8301126200022d57600080fd5b815181811115620002425762000242620001d6565b604051601f8201601f19908116603f011681019083821181831017156200026d576200026d620001d6565b8160405282815288868487010111156200028657600080fd5b600093505b82841015620002aa57848401860151818501870152928501926200028b565b600086848301015280965050505050505092915050565b60805160a05160c051610f306200037d600039600081816101c601526108fc015260008181610140015281816102ab0152818161035f0152818161045d015281816105080152818161061a015281816106cf0152818161073e01528181610a030152610bab015260008181610263015281816102d4015281816103a5015281816104860152818161055601528181610653015281816106f80152818161078e01528181610a4001528181610b210152610be90152610f306000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80633644e51511610097578063a9059cbb11610066578063a9059cbb14610223578063d505accf14610236578063dd62ed3e1461024b578063fc0c546a1461025e57600080fd5b80633644e515146101c157806370a08231146101e85780637ecebe00146101fb57806395d89b411461021b57600080fd5b806318160ddd116100d357806318160ddd1461017057806323b872dd1461017857806330adf81f1461018b578063313ce567146101b257600080fd5b806306fdde03146100fa578063095ea7b31461011857806317d70f7c1461013b575b600080fd5b61010261029d565b60405161010f9190610c7f565b60405180910390f35b61012b610126366004610cce565b610350565b604051901515815260200161010f565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161010f565b61016261044e565b61012b610186366004610cf8565b6104f9565b6101627f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6040516012815260200161010f565b6101627f000000000000000000000000000000000000000000000000000000000000000081565b6101626101f6366004610d34565b61060b565b610162610209366004610d34565b60006020819052908152604090205481565b6101026106c0565b61012b610231366004610cce565b61072f565b610249610244366004610d56565b610829565b005b610162610259366004610dc9565b610af7565b6102857f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010f565b604051622b600360e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169062ad800c906024015b600060405180830381865afa158015610323573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261034b9190810190610e12565b905090565b6040516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b038381166024830152604482018390523360648301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b1580156103eb57600080fd5b505af11580156103ff573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906020015b60405180910390a35060015b92915050565b60405163bd85b03960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bd85b03990602401602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b9190610ebf565b604051633912022f60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0384811660248301528381166044830152606482018390523360848301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105f991815260200190565b60405180910390a35060019392505050565b604051631b2b776160e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0382811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690633656eec290604401602060405180830381865afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104489190610ebf565b604051634e41a1fb60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634e41a1fb90602401610306565b604051633912022f60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015233602482018190526001600160a01b0384811660448401526064830184905260848301919091526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a401600060405180830381600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b50506040518481526001600160a01b03861692503391507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161043c565b8342111561084a5760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b0387166108715760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781166000818152602081815260408083205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e08501909152805191012061190160f01b6101008401527f0000000000000000000000000000000000000000000000000000000000000000610102840152610122830152906101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa158015610997573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b0316146109d557604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b03808b1660008181526020819052604090819020600187019055516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201528b83166024820152604481018b905260648101919091527f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac90608401600060405180830381600087803b158015610a8657600080fd5b505af1158015610a9a573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258a604051610ae391815260200190565b60405180910390a350505050505050505050565b60405163e985e9c560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e985e9c590604401602060405180830381865afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e9190610ed8565b15610b9c5750600019610448565b6040516321ff32a960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b03848116602483015283811660448301527f000000000000000000000000000000000000000000000000000000000000000016906321ff32a990606401602060405180830381865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190610ebf565b9050610448565b60005b83811015610c76578181015183820152602001610c5e565b50506000910152565b6020815260008251806020840152610c9e816040850160208701610c5b565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610cc957600080fd5b919050565b60008060408385031215610ce157600080fd5b610cea83610cb2565b946020939093013593505050565b600080600060608486031215610d0d57600080fd5b610d1684610cb2565b9250610d2460208501610cb2565b9150604084013590509250925092565b600060208284031215610d4657600080fd5b610d4f82610cb2565b9392505050565b600080600080600080600060e0888a031215610d7157600080fd5b610d7a88610cb2565b9650610d8860208901610cb2565b95506040880135945060608801359350608088013560ff81168114610dac57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610ddc57600080fd5b610de583610cb2565b9150610df360208401610cb2565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610e2457600080fd5b815167ffffffffffffffff80821115610e3c57600080fd5b818401915084601f830112610e5057600080fd5b815181811115610e6257610e62610dfc565b604051601f8201601f19908116603f01168101908382118183101715610e8a57610e8a610dfc565b81604052828152876020848701011115610ea357600080fd5b610eb4836020830160208801610c5b565b979650505050505050565b600060208284031215610ed157600080fd5b5051919050565b600060208284031215610eea57600080fd5b81518015158114610d4f57600080fdfea26469706673582212209a5e38e3707fc0ef3b7c081adf960f82f4001b061e36a80d4f094f3de909107964736f6c63430008140033a2646970667358221220a473b73cc5300f046fb9cdd8a9730c8aeaeac442112bd7884ba88e00b47b303c64736f6c63430008140033";
        readonly sourceMap: "1052:2732:79:-:0;;;1186:52;;;-1:-1:-1;;;;;;1186:52:79;1235:1;1186:52;;;;;;1314:28;;1052:2732;;;;;;;;;;;;;;;;";
        readonly linkReferences: {};
    };
    readonly deployedBytecode: {
        readonly object: "";
        readonly sourceMap: "1052:2732:79:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3287:495;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;557:32:184;;;539:51;;527:2;512:18;3287:495:79;;;;;;;;1858:888;;;;;;:::i;:::-;;:::i;2892:115::-;;2943:11;2983:6;;2991:8;-1:-1:-1;;;;;2983:6:79;;;;2892:115;;;;;-1:-1:-1;;;;;1045:32:184;;;1027:51;;1109:2;1094:18;;1087:34;;;;1000:18;2892:115:79;833:294:184;1423:93:79;;;:::i;:::-;;;1278:25:184;;;1266:2;1251:18;1423:93:79;1132:177:184;3287:495:79;3493:30;;;-1:-1:-1;;;;;1045:32:184;;3493:30:79;;;1027:51:184;1094:18;;;1087:34;;;3392:7:79;;;;1000:18:184;;3493:30:79;;;;;;;;;;;;3483:41;;;;;;3468:56;;3534:20;3604:4;3597:12;;3619:4;3626;1482:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1472:44;;;;;;3580:67;;;;;;;;;;-1:-1:-1;;;;;;1537:26:184;;;;1525:39;;1601:2;1597:15;;;;-1:-1:-1;;1593:53:184;1589:1;1580:11;;1573:74;1672:2;1663:12;;1656:28;1709:2;1700:12;;1693:28;1746:2;1737:12;;1314:441;3580:67:79;;;;;;;-1:-1:-1;;3580:67:79;;;;;;3557:100;;3580:67;3557:100;;;;;3287:495;-1:-1:-1;;;;;3287:495:79:o;1858:888::-;2041:8;:20;;;1954:15;2071:16;;-1:-1:-1;;;;;;2071:16:79;-1:-1:-1;;;;;2071:16:79;;;;;;;2188:30;;;;;;1027:51:184;;;;1094:18;;1087:34;;;1954:15:79;;1000:18:184;;2188:30:79;;;;;;;;;;;;2178:41;;;;;;2163:56;;2278:23;2330:4;2304:34;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;2278:60;;2454:32;2467:7;2476:9;2454:12;:32::i;:::-;-1:-1:-1;;;;;2433:53:79;2441:8;-1:-1:-1;;;;;2433:53:79;;2427:142;;2510:48;;-1:-1:-1;;;2510:48:79;;;;;;;;;;;2427:142;2617:6;:32;;-1:-1:-1;;;;;;2617:32:79;2646:1;2617:32;;;;;;2659:12;;2731:8;-1:-1:-1;;1858:888:79;;;;:::o;1423:93::-;1482:33;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1472:44;;;;;;1423:93;:::o;-1:-1:-1:-;;;;;;;;:::o;14:374:184:-;102:6;110;163:2;151:9;142:7;138:23;134:32;131:52;;;179:1;176;169:12;131:52;205:23;;-1:-1:-1;;;;;257:31:184;;247:42;;237:70;;303:1;300;293:12;237:70;326:5;378:2;363:18;;;;350:32;;-1:-1:-1;;;14:374:184:o";
        readonly linkReferences: {};
    };
    readonly methodIdentifiers: {
        readonly "ERC20LINK_HASH()": "d13053bb";
        readonly "create(address,uint256)": "0ecaea73";
        readonly "getDeployDetails()": "600eb4ba";
        readonly "getForwarder(address,uint256)": "0710fd58";
    };
    readonly rawMetadata: "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidForwarderAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20LINK_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMultiToken\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract IERC20Forwarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployDetails\",\"outputs\":[{\"internalType\":\"contract IMultiToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMultiToken\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"getForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"DELV\",\"custom:disclaimer\":\"The language used in this code is for coding convenience                    only, and is not intended to, and does not, have any                    particular legal or regulatory significance.\",\"details\":\"This factory deploys them using create2 so that the multi token can do      cheap verification of the interfaces before they access sensitive      functions.\",\"kind\":\"dev\",\"methods\":{\"create(address,uint256)\":{\"params\":{\"__token\":\"The MultiToken targeted by this factory.\",\"__tokenId\":\"The sub-token ID targeted by this factory.\"},\"returns\":{\"_0\":\"Returns the address of the deployed forwarder.\"}},\"getDeployDetails()\":{\"returns\":{\"_0\":\"Returns the stored multitoken address and the sub token id.\"}},\"getForwarder(address,uint256)\":{\"params\":{\"__token\":\"The multitoken which the forwarder should link to.\",\"__tokenId\":\"The id of the sub token from the multitoken.\"},\"returns\":{\"_0\":\"The expected address of the forwarder.\"}}},\"title\":\"ERC20ForwarderFactory\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidForwarderAddress()\":[{\"notice\":\"Errors ///\"}]},\"kind\":\"user\",\"methods\":{\"ERC20LINK_HASH()\":{\"notice\":\"The hash of the bytecode of the ERC20 forwarder contract.\"},\"create(address,uint256)\":{\"notice\":\"Uses create2 to deploy a forwarder at a predictable address as         part of our ERC20 multitoken implementation.\"},\"getDeployDetails()\":{\"notice\":\"Returns the transient storage of this contract.\"},\"getForwarder(address,uint256)\":{\"notice\":\"Helper to calculate expected forwarder contract addresses.\"}},\"notice\":\"Our MultiToken contract consists of fungible sub-tokens that         are similar to ERC20 tokens. In order to support ERC20 compatibility         we can deploy interfaces which are ERC20s.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/token/ERC20ForwarderFactory.sol\":\"ERC20ForwarderFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":aave-v3-core/=lib/aave-v3-core/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/src/interfaces/IERC20.sol\":{\"keccak256\":\"0xfd51b9727f00a434ea4ced64044c104ed8361fa2ed22600969d1e4ff257b14f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8780b588acc11dd906ff0897adc5b7acdab759fec4d14ce0d52bf002cb90c398\",\"dweb:/ipfs/QmTMaRGveFgN5L3k1h5oAbfp5ccmzT9d36JhChVg9PxJkD\"]},\"contracts/src/interfaces/IERC20Forwarder.sol\":{\"keccak256\":\"0x4d392c32d11b103cdb3e12261fdd78f24b145dacd32264fcefbfcf20cb24458d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b4e89e8782eaa4955a823723ed2b783c791f7045b02714282850ce23c9e488db\",\"dweb:/ipfs/QmVG8PZs2tz3JDfFs6qxCbUCB8umuXuGqQHtPb3ZLbVyMS\"]},\"contracts/src/interfaces/IERC20ForwarderFactory.sol\":{\"keccak256\":\"0x693a41720ae052ada1f3ad23a07b1e32b8d65d7c672ab9891552d88569765a7a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://037cf6e35352e54f550ab4e782ae728fc20b1286c5a779d89fd2de764ac06d30\",\"dweb:/ipfs/QmNfEFohT398Y8ZQqoQxqewk6swocZWzBrx2Z1wB9tbjaL\"]},\"contracts/src/interfaces/IHyperdrive.sol\":{\"keccak256\":\"0x81c89ca62586555b915a9609d10014ff9d1f0d82111809d566f614bd9ea2fb16\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3c4859b122480f504d1f0035ed11983b0d74ea2b16bcf26dfe19365bb4f66240\",\"dweb:/ipfs/QmQEQBxRdsH6zNx2rvzetYZRbB3pMXXWzTuwVPBGVhCHfL\"]},\"contracts/src/interfaces/IHyperdriveCore.sol\":{\"keccak256\":\"0x93cfce28869c1a082c170092b87b04204a91b7898a1e95c3e4270f06fbc76a97\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b8b24e13ff8994550685fec1405bc5d2a5ed6400db061005e72ecff056be51a1\",\"dweb:/ipfs/QmR4RZzyhjYt8xxRPaJWHKhBZdHZPVBHrtNERAZhCaaTFU\"]},\"contracts/src/interfaces/IHyperdriveEvents.sol\":{\"keccak256\":\"0x5c5d6c812fd2cf996d60632c4c8cca7b3d70f5ae4891a3f99c1e10f967f520dd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://44ef09e50cf76ebab25b90688b19966575cc07fee503ffdb189c3fbbcbfea01f\",\"dweb:/ipfs/QmZEULHXopjaeWbsfXNrEriQomY19s6LXEcae9saeZCpmt\"]},\"contracts/src/interfaces/IHyperdriveRead.sol\":{\"keccak256\":\"0x516967eaae812ff7fff81797190f48fca40838eccfb8243e3f973f2f85b51597\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://50fa3165b126976c218d27f7f276789f8cc680d3136cd631999164a64f03e477\",\"dweb:/ipfs/QmTSCjqQoys2SJNDZrhTdy2M2at8siSb3ZXHjWUoeihQjr\"]},\"contracts/src/interfaces/IMultiToken.sol\":{\"keccak256\":\"0xf5f82b8223e0c1bfcf4f73566a909ba07a9266960dfe2335c1494e06debbbe3f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://920cf3fd66132a1e98a6a5708ad9a3bb047f4df8848119ab382b51094c1290a7\",\"dweb:/ipfs/QmWL3SyG8L91Coe9DsHz3Ke9tGMvYBf2NgRRDr3Fg5xFzp\"]},\"contracts/src/interfaces/IMultiTokenCore.sol\":{\"keccak256\":\"0xda628a0f7428ad63cb04b6f341c223d7b36803d554e92cd3a793325eae6ad87a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://f7dfe92e6fb15eedbba033a96481db1343aeb48039d40d4b5053cc27d3f5e4f3\",\"dweb:/ipfs/QmNeNyjuEd7LkwZMg14fnMsunLXbJRzHYwzC2yEYKi8H3q\"]},\"contracts/src/interfaces/IMultiTokenEvents.sol\":{\"keccak256\":\"0xb5b2a1f90c4e85e1290144b1e0e393027c90f24d6030ee802d0369342d7bf002\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://f7850a790ea32726462f6dd08c87e5250c70155af558b8fdd17dc71d53c5b7f3\",\"dweb:/ipfs/QmWpshz1Ufdqmw8rmZdbdm9ZyEcKHFswLMNaBkBJ3sqNA1\"]},\"contracts/src/interfaces/IMultiTokenMetadata.sol\":{\"keccak256\":\"0xa2e1d420bcae975a3d9aa7918319da2dd047cbc50ad41e0a391048e01b980191\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://335611b957d8ca7c0cee11d6f2268372a7c937bc119c030cb8e274679604b6cd\",\"dweb:/ipfs/QmeoxLRyPVgBXrxetVFEyjsvLNfwAahcHsFdAEzy9otxuU\"]},\"contracts/src/interfaces/IMultiTokenRead.sol\":{\"keccak256\":\"0xf84c46faa4a3323835a80eae3ee969409bf3f5c48ec94a6e486b70cb59a4c868\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b1dcc1796eac62773f298b5b77fda8de424d822a7e74825028a0f83c627a5bfb\",\"dweb:/ipfs/QmRbiswdabx3uMgrgkLKe6K6JAQBLafsWqEyZCg3PQbN5Q\"]},\"contracts/src/token/ERC20Forwarder.sol\":{\"keccak256\":\"0x43358118fc67b30f7d6eeee3f67e84d280dcb9d485726ed086704800b229b442\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a7c731a584a9d8c060430cbeb294fad8836c2cd8c9bc8e4385305f8fcc6a8fe9\",\"dweb:/ipfs/QmQZS7UaCYC7PUzg5dbVCzWGJtnFaAEk4DxcGC5dZnxsi8\"]},\"contracts/src/token/ERC20ForwarderFactory.sol\":{\"keccak256\":\"0x94bc9f6649572f650f42cd719b09e2dd6efc7969b77bafda8491050a6f3e63db\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://f3702ddd19d7d114d7e1740ea7670a01acc066776df53fc54c324743eb707b9d\",\"dweb:/ipfs/QmaXcrNDrZM421RWSzwZnNsMonxETVfjZArStwM76A5caQ\"]}},\"version\":1}";
    readonly metadata: {
        readonly compiler: {
            readonly version: "0.8.20+commit.a1b79de6";
        };
        readonly language: "Solidity";
        readonly output: {
            readonly abi: readonly [{
                readonly inputs: readonly [];
                readonly type: "error";
                readonly name: "InvalidForwarderAddress";
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "ERC20LINK_HASH";
                readonly outputs: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "";
                    readonly type: "bytes32";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "contract IMultiToken";
                    readonly name: "__token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "__tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
                readonly name: "create";
                readonly outputs: readonly [{
                    readonly internalType: "contract IERC20Forwarder";
                    readonly name: "";
                    readonly type: "address";
                }];
            }, {
                readonly inputs: readonly [];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "getDeployDetails";
                readonly outputs: readonly [{
                    readonly internalType: "contract IMultiToken";
                    readonly name: "";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "";
                    readonly type: "uint256";
                }];
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "contract IMultiToken";
                    readonly name: "__token";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "__tokenId";
                    readonly type: "uint256";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
                readonly name: "getForwarder";
                readonly outputs: readonly [{
                    readonly internalType: "address";
                    readonly name: "";
                    readonly type: "address";
                }];
            }];
            readonly devdoc: {
                readonly kind: "dev";
                readonly methods: {
                    readonly "create(address,uint256)": {
                        readonly params: {
                            readonly __token: "The MultiToken targeted by this factory.";
                            readonly __tokenId: "The sub-token ID targeted by this factory.";
                        };
                        readonly returns: {
                            readonly _0: "Returns the address of the deployed forwarder.";
                        };
                    };
                    readonly "getDeployDetails()": {
                        readonly returns: {
                            readonly _0: "Returns the stored multitoken address and the sub token id.";
                        };
                    };
                    readonly "getForwarder(address,uint256)": {
                        readonly params: {
                            readonly __token: "The multitoken which the forwarder should link to.";
                            readonly __tokenId: "The id of the sub token from the multitoken.";
                        };
                        readonly returns: {
                            readonly _0: "The expected address of the forwarder.";
                        };
                    };
                };
                readonly version: 1;
            };
            readonly userdoc: {
                readonly kind: "user";
                readonly methods: {
                    readonly "ERC20LINK_HASH()": {
                        readonly notice: "The hash of the bytecode of the ERC20 forwarder contract.";
                    };
                    readonly "create(address,uint256)": {
                        readonly notice: "Uses create2 to deploy a forwarder at a predictable address as         part of our ERC20 multitoken implementation.";
                    };
                    readonly "getDeployDetails()": {
                        readonly notice: "Returns the transient storage of this contract.";
                    };
                    readonly "getForwarder(address,uint256)": {
                        readonly notice: "Helper to calculate expected forwarder contract addresses.";
                    };
                };
                readonly version: 1;
            };
        };
        readonly settings: {
            readonly remappings: readonly ["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/", "aave-v3-core/=lib/aave-v3-core/", "ds-test/=lib/forge-std/lib/ds-test/src/", "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/", "forge-std/=lib/forge-std/src/", "openzeppelin-contracts/=lib/openzeppelin-contracts/", "openzeppelin/=lib/openzeppelin-contracts/contracts/", "solmate/=lib/solmate/src/"];
            readonly optimizer: {
                readonly enabled: true;
                readonly runs: 200;
            };
            readonly metadata: {
                readonly bytecodeHash: "ipfs";
            };
            readonly compilationTarget: {
                readonly "contracts/src/token/ERC20ForwarderFactory.sol": "ERC20ForwarderFactory";
            };
            readonly libraries: {};
        };
        readonly sources: {
            readonly "contracts/src/interfaces/IERC20.sol": {
                readonly keccak256: "0xfd51b9727f00a434ea4ced64044c104ed8361fa2ed22600969d1e4ff257b14f3";
                readonly urls: readonly ["bzz-raw://8780b588acc11dd906ff0897adc5b7acdab759fec4d14ce0d52bf002cb90c398", "dweb:/ipfs/QmTMaRGveFgN5L3k1h5oAbfp5ccmzT9d36JhChVg9PxJkD"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IERC20Forwarder.sol": {
                readonly keccak256: "0x4d392c32d11b103cdb3e12261fdd78f24b145dacd32264fcefbfcf20cb24458d";
                readonly urls: readonly ["bzz-raw://b4e89e8782eaa4955a823723ed2b783c791f7045b02714282850ce23c9e488db", "dweb:/ipfs/QmVG8PZs2tz3JDfFs6qxCbUCB8umuXuGqQHtPb3ZLbVyMS"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IERC20ForwarderFactory.sol": {
                readonly keccak256: "0x693a41720ae052ada1f3ad23a07b1e32b8d65d7c672ab9891552d88569765a7a";
                readonly urls: readonly ["bzz-raw://037cf6e35352e54f550ab4e782ae728fc20b1286c5a779d89fd2de764ac06d30", "dweb:/ipfs/QmNfEFohT398Y8ZQqoQxqewk6swocZWzBrx2Z1wB9tbjaL"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdrive.sol": {
                readonly keccak256: "0x81c89ca62586555b915a9609d10014ff9d1f0d82111809d566f614bd9ea2fb16";
                readonly urls: readonly ["bzz-raw://3c4859b122480f504d1f0035ed11983b0d74ea2b16bcf26dfe19365bb4f66240", "dweb:/ipfs/QmQEQBxRdsH6zNx2rvzetYZRbB3pMXXWzTuwVPBGVhCHfL"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveCore.sol": {
                readonly keccak256: "0x93cfce28869c1a082c170092b87b04204a91b7898a1e95c3e4270f06fbc76a97";
                readonly urls: readonly ["bzz-raw://b8b24e13ff8994550685fec1405bc5d2a5ed6400db061005e72ecff056be51a1", "dweb:/ipfs/QmR4RZzyhjYt8xxRPaJWHKhBZdHZPVBHrtNERAZhCaaTFU"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveEvents.sol": {
                readonly keccak256: "0x5c5d6c812fd2cf996d60632c4c8cca7b3d70f5ae4891a3f99c1e10f967f520dd";
                readonly urls: readonly ["bzz-raw://44ef09e50cf76ebab25b90688b19966575cc07fee503ffdb189c3fbbcbfea01f", "dweb:/ipfs/QmZEULHXopjaeWbsfXNrEriQomY19s6LXEcae9saeZCpmt"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IHyperdriveRead.sol": {
                readonly keccak256: "0x516967eaae812ff7fff81797190f48fca40838eccfb8243e3f973f2f85b51597";
                readonly urls: readonly ["bzz-raw://50fa3165b126976c218d27f7f276789f8cc680d3136cd631999164a64f03e477", "dweb:/ipfs/QmTSCjqQoys2SJNDZrhTdy2M2at8siSb3ZXHjWUoeihQjr"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiToken.sol": {
                readonly keccak256: "0xf5f82b8223e0c1bfcf4f73566a909ba07a9266960dfe2335c1494e06debbbe3f";
                readonly urls: readonly ["bzz-raw://920cf3fd66132a1e98a6a5708ad9a3bb047f4df8848119ab382b51094c1290a7", "dweb:/ipfs/QmWL3SyG8L91Coe9DsHz3Ke9tGMvYBf2NgRRDr3Fg5xFzp"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenCore.sol": {
                readonly keccak256: "0xda628a0f7428ad63cb04b6f341c223d7b36803d554e92cd3a793325eae6ad87a";
                readonly urls: readonly ["bzz-raw://f7dfe92e6fb15eedbba033a96481db1343aeb48039d40d4b5053cc27d3f5e4f3", "dweb:/ipfs/QmNeNyjuEd7LkwZMg14fnMsunLXbJRzHYwzC2yEYKi8H3q"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenEvents.sol": {
                readonly keccak256: "0xb5b2a1f90c4e85e1290144b1e0e393027c90f24d6030ee802d0369342d7bf002";
                readonly urls: readonly ["bzz-raw://f7850a790ea32726462f6dd08c87e5250c70155af558b8fdd17dc71d53c5b7f3", "dweb:/ipfs/QmWpshz1Ufdqmw8rmZdbdm9ZyEcKHFswLMNaBkBJ3sqNA1"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenMetadata.sol": {
                readonly keccak256: "0xa2e1d420bcae975a3d9aa7918319da2dd047cbc50ad41e0a391048e01b980191";
                readonly urls: readonly ["bzz-raw://335611b957d8ca7c0cee11d6f2268372a7c937bc119c030cb8e274679604b6cd", "dweb:/ipfs/QmeoxLRyPVgBXrxetVFEyjsvLNfwAahcHsFdAEzy9otxuU"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/interfaces/IMultiTokenRead.sol": {
                readonly keccak256: "0xf84c46faa4a3323835a80eae3ee969409bf3f5c48ec94a6e486b70cb59a4c868";
                readonly urls: readonly ["bzz-raw://b1dcc1796eac62773f298b5b77fda8de424d822a7e74825028a0f83c627a5bfb", "dweb:/ipfs/QmRbiswdabx3uMgrgkLKe6K6JAQBLafsWqEyZCg3PQbN5Q"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/token/ERC20Forwarder.sol": {
                readonly keccak256: "0x43358118fc67b30f7d6eeee3f67e84d280dcb9d485726ed086704800b229b442";
                readonly urls: readonly ["bzz-raw://a7c731a584a9d8c060430cbeb294fad8836c2cd8c9bc8e4385305f8fcc6a8fe9", "dweb:/ipfs/QmQZS7UaCYC7PUzg5dbVCzWGJtnFaAEk4DxcGC5dZnxsi8"];
                readonly license: "Apache-2.0";
            };
            readonly "contracts/src/token/ERC20ForwarderFactory.sol": {
                readonly keccak256: "0x94bc9f6649572f650f42cd719b09e2dd6efc7969b77bafda8491050a6f3e63db";
                readonly urls: readonly ["bzz-raw://f3702ddd19d7d114d7e1740ea7670a01acc066776df53fc54c324743eb707b9d", "dweb:/ipfs/QmaXcrNDrZM421RWSzwZnNsMonxETVfjZArStwM76A5caQ"];
                readonly license: "Apache-2.0";
            };
        };
        readonly version: 1;
    };
    readonly ast: {
        readonly absolutePath: "contracts/src/token/ERC20ForwarderFactory.sol";
        readonly id: 19140;
        readonly exportedSymbols: {
            readonly ERC20Forwarder: readonly [18961];
            readonly ERC20ForwarderFactory: readonly [19139];
            readonly IERC20Forwarder: readonly [6802];
            readonly IERC20ForwarderFactory: readonly [6847];
            readonly IHyperdrive: readonly [7411];
            readonly IMultiToken: readonly [8188];
        };
        readonly nodeType: "SourceUnit";
        readonly src: "39:3746:79";
        readonly nodes: readonly [{
            readonly id: 18963;
            readonly nodeType: "PragmaDirective";
            readonly src: "39:23:79";
            readonly nodes: readonly [];
            readonly literals: readonly ["solidity", "0.8", ".20"];
        }, {
            readonly id: 18965;
            readonly nodeType: "ImportDirective";
            readonly src: "64:68:79";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IERC20Forwarder.sol";
            readonly file: "../interfaces/IERC20Forwarder.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19140;
            readonly sourceUnit: 6803;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 18964;
                    readonly name: "IERC20Forwarder";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 6802;
                    readonly src: "73:15:79";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 18967;
            readonly nodeType: "ImportDirective";
            readonly src: "133:82:79";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IERC20ForwarderFactory.sol";
            readonly file: "../interfaces/IERC20ForwarderFactory.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19140;
            readonly sourceUnit: 6848;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 18966;
                    readonly name: "IERC20ForwarderFactory";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 6847;
                    readonly src: "142:22:79";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 18969;
            readonly nodeType: "ImportDirective";
            readonly src: "216:60:79";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IHyperdrive.sol";
            readonly file: "../interfaces/IHyperdrive.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19140;
            readonly sourceUnit: 7412;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 18968;
                    readonly name: "IHyperdrive";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 7411;
                    readonly src: "225:11:79";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 18971;
            readonly nodeType: "ImportDirective";
            readonly src: "277:60:79";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/interfaces/IMultiToken.sol";
            readonly file: "../interfaces/IMultiToken.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19140;
            readonly sourceUnit: 8189;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 18970;
                    readonly name: "IMultiToken";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 8188;
                    readonly src: "286:11:79";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 18973;
            readonly nodeType: "ImportDirective";
            readonly src: "338:54:79";
            readonly nodes: readonly [];
            readonly absolutePath: "contracts/src/token/ERC20Forwarder.sol";
            readonly file: "./ERC20Forwarder.sol";
            readonly nameLocation: "-1:-1:-1";
            readonly scope: 19140;
            readonly sourceUnit: 18962;
            readonly symbolAliases: readonly [{
                readonly foreign: {
                    readonly id: 18972;
                    readonly name: "ERC20Forwarder";
                    readonly nodeType: "Identifier";
                    readonly overloadedDeclarations: readonly [];
                    readonly referencedDeclaration: 18961;
                    readonly src: "347:14:79";
                    readonly typeDescriptions: {};
                };
                readonly nameLocation: "-1:-1:-1";
            }];
            readonly unitAlias: "";
        }, {
            readonly id: 19139;
            readonly nodeType: "ContractDefinition";
            readonly src: "1052:2732:79";
            readonly nodes: readonly [{
                readonly id: 18986;
                readonly nodeType: "VariableDeclaration";
                readonly src: "1186:52:79";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly documentation: {
                    readonly id: 18977;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1115:66:79";
                    readonly text: "@notice The transient MultiToken addressed used in deployment.";
                };
                readonly mutability: "mutable";
                readonly name: "_token";
                readonly nameLocation: "1206:6:79";
                readonly scope: 19139;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                    readonly typeString: "contract IMultiToken";
                };
                readonly typeName: {
                    readonly id: 18979;
                    readonly nodeType: "UserDefinedTypeName";
                    readonly pathNode: {
                        readonly id: 18978;
                        readonly name: "IMultiToken";
                        readonly nameLocations: readonly ["1186:11:79"];
                        readonly nodeType: "IdentifierPath";
                        readonly referencedDeclaration: 8188;
                        readonly src: "1186:11:79";
                    };
                    readonly referencedDeclaration: 8188;
                    readonly src: "1186:11:79";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                        readonly typeString: "contract IMultiToken";
                    };
                };
                readonly value: {
                    readonly arguments: readonly [{
                        readonly arguments: readonly [{
                            readonly hexValue: "31";
                            readonly id: 18983;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: true;
                            readonly kind: "number";
                            readonly lValueRequested: false;
                            readonly nodeType: "Literal";
                            readonly src: "1235:1:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_rational_1_by_1";
                                readonly typeString: "int_const 1";
                            };
                            readonly value: "1";
                        }];
                        readonly expression: {
                            readonly argumentTypes: readonly [{
                                readonly typeIdentifier: "t_rational_1_by_1";
                                readonly typeString: "int_const 1";
                            }];
                            readonly id: 18982;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: true;
                            readonly lValueRequested: false;
                            readonly nodeType: "ElementaryTypeNameExpression";
                            readonly src: "1227:7:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_type$_t_address_$";
                                readonly typeString: "type(address)";
                            };
                            readonly typeName: {
                                readonly id: 18981;
                                readonly name: "address";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "1227:7:79";
                                readonly typeDescriptions: {};
                            };
                        };
                        readonly id: 18984;
                        readonly isConstant: false;
                        readonly isLValue: false;
                        readonly isPure: true;
                        readonly kind: "typeConversion";
                        readonly lValueRequested: false;
                        readonly nameLocations: readonly [];
                        readonly names: readonly [];
                        readonly nodeType: "FunctionCall";
                        readonly src: "1227:10:79";
                        readonly tryCall: false;
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                    }];
                    readonly expression: {
                        readonly argumentTypes: readonly [{
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        }];
                        readonly id: 18980;
                        readonly name: "IMultiToken";
                        readonly nodeType: "Identifier";
                        readonly overloadedDeclarations: readonly [];
                        readonly referencedDeclaration: 8188;
                        readonly src: "1215:11:79";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_type$_t_contract$_IMultiToken_$8188_$";
                            readonly typeString: "type(contract IMultiToken)";
                        };
                    };
                    readonly id: 18985;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: true;
                    readonly kind: "typeConversion";
                    readonly lValueRequested: false;
                    readonly nameLocations: readonly [];
                    readonly names: readonly [];
                    readonly nodeType: "FunctionCall";
                    readonly src: "1215:23:79";
                    readonly tryCall: false;
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                        readonly typeString: "contract IMultiToken";
                    };
                };
                readonly visibility: "private";
            }, {
                readonly id: 18990;
                readonly nodeType: "VariableDeclaration";
                readonly src: "1314:28:79";
                readonly nodes: readonly [];
                readonly constant: false;
                readonly documentation: {
                    readonly id: 18987;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1245:64:79";
                    readonly text: "@notice The transient token ID addressed used in deployment.";
                };
                readonly mutability: "mutable";
                readonly name: "_tokenId";
                readonly nameLocation: "1330:8:79";
                readonly scope: 19139;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_uint256";
                    readonly typeString: "uint256";
                };
                readonly typeName: {
                    readonly id: 18988;
                    readonly name: "uint256";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "1314:7:79";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_uint256";
                        readonly typeString: "uint256";
                    };
                };
                readonly value: {
                    readonly hexValue: "31";
                    readonly id: 18989;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: true;
                    readonly kind: "number";
                    readonly lValueRequested: false;
                    readonly nodeType: "Literal";
                    readonly src: "1341:1:79";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_rational_1_by_1";
                        readonly typeString: "int_const 1";
                    };
                    readonly value: "1";
                };
                readonly visibility: "private";
            }, {
                readonly id: 18999;
                readonly nodeType: "VariableDeclaration";
                readonly src: "1423:93:79";
                readonly nodes: readonly [];
                readonly baseFunctions: readonly [6846];
                readonly constant: true;
                readonly documentation: {
                    readonly id: 18991;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1349:69:79";
                    readonly text: "@notice The hash of the bytecode of the ERC20 forwarder contract.";
                };
                readonly functionSelector: "d13053bb";
                readonly mutability: "constant";
                readonly name: "ERC20LINK_HASH";
                readonly nameLocation: "1447:14:79";
                readonly scope: 19139;
                readonly stateVariable: true;
                readonly storageLocation: "default";
                readonly typeDescriptions: {
                    readonly typeIdentifier: "t_bytes32";
                    readonly typeString: "bytes32";
                };
                readonly typeName: {
                    readonly id: 18992;
                    readonly name: "bytes32";
                    readonly nodeType: "ElementaryTypeName";
                    readonly src: "1423:7:79";
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_bytes32";
                        readonly typeString: "bytes32";
                    };
                };
                readonly value: {
                    readonly arguments: readonly [{
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly id: 18995;
                                readonly name: "ERC20Forwarder";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18961;
                                readonly src: "1487:14:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_type$_t_contract$_ERC20Forwarder_$18961_$";
                                    readonly typeString: "type(contract ERC20Forwarder)";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_type$_t_contract$_ERC20Forwarder_$18961_$";
                                    readonly typeString: "type(contract ERC20Forwarder)";
                                }];
                                readonly id: 18994;
                                readonly name: "type";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -27;
                                readonly src: "1482:4:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_metatype_pure$__$returns$__$";
                                    readonly typeString: "function () pure";
                                };
                            };
                            readonly id: 18996;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: true;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "1482:20:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_magic_meta_type_t_contract$_ERC20Forwarder_$18961";
                                readonly typeString: "type(contract ERC20Forwarder)";
                            };
                        };
                        readonly id: 18997;
                        readonly isConstant: false;
                        readonly isLValue: false;
                        readonly isPure: true;
                        readonly lValueRequested: false;
                        readonly memberLocation: "1503:12:79";
                        readonly memberName: "creationCode";
                        readonly nodeType: "MemberAccess";
                        readonly src: "1482:33:79";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_bytes_memory_ptr";
                            readonly typeString: "bytes memory";
                        };
                    }];
                    readonly expression: {
                        readonly argumentTypes: readonly [{
                            readonly typeIdentifier: "t_bytes_memory_ptr";
                            readonly typeString: "bytes memory";
                        }];
                        readonly id: 18993;
                        readonly name: "keccak256";
                        readonly nodeType: "Identifier";
                        readonly overloadedDeclarations: readonly [];
                        readonly referencedDeclaration: -8;
                        readonly src: "1472:9:79";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                            readonly typeString: "function (bytes memory) pure returns (bytes32)";
                        };
                    };
                    readonly id: 18998;
                    readonly isConstant: false;
                    readonly isLValue: false;
                    readonly isPure: true;
                    readonly kind: "functionCall";
                    readonly lValueRequested: false;
                    readonly nameLocations: readonly [];
                    readonly names: readonly [];
                    readonly nodeType: "FunctionCall";
                    readonly src: "1472:44:79";
                    readonly tryCall: false;
                    readonly typeDescriptions: {
                        readonly typeIdentifier: "t_bytes32";
                        readonly typeString: "bytes32";
                    };
                };
                readonly visibility: "public";
            }, {
                readonly id: 19073;
                readonly nodeType: "FunctionDefinition";
                readonly src: "1858:888:79";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 19072;
                    readonly nodeType: "Block";
                    readonly src: "1971:775:79";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly id: 19013;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 19011;
                                readonly name: "_tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18990;
                                readonly src: "2041:8:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly id: 19012;
                                readonly name: "__tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19005;
                                readonly src: "2052:9:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly src: "2041:20:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly id: 19014;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2041:20:79";
                    }, {
                        readonly expression: {
                            readonly id: 19017;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 19015;
                                readonly name: "_token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18986;
                                readonly src: "2071:6:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly id: 19016;
                                readonly name: "__token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 19003;
                                readonly src: "2080:7:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly src: "2071:16:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly id: 19018;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2071:16:79";
                    }, {
                        readonly assignments: readonly [19020];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19020;
                            readonly mutability: "mutable";
                            readonly name: "salt";
                            readonly nameLocation: "2171:4:79";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19072;
                            readonly src: "2163:12:79";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                            readonly typeName: {
                                readonly id: 19019;
                                readonly name: "bytes32";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "2163:7:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes32";
                                    readonly typeString: "bytes32";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19028;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 19024;
                                    readonly name: "__token";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19003;
                                    readonly src: "2199:7:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                        readonly typeString: "contract IMultiToken";
                                    };
                                }, {
                                    readonly id: 19025;
                                    readonly name: "__tokenId";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19005;
                                    readonly src: "2208:9:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                        readonly typeString: "contract IMultiToken";
                                    }, {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    }];
                                    readonly expression: {
                                        readonly id: 19022;
                                        readonly name: "abi";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -1;
                                        readonly src: "2188:3:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_magic_abi";
                                            readonly typeString: "abi";
                                        };
                                    };
                                    readonly id: 19023;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "2192:6:79";
                                    readonly memberName: "encode";
                                    readonly nodeType: "MemberAccess";
                                    readonly src: "2188:10:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$";
                                        readonly typeString: "function () pure returns (bytes memory)";
                                    };
                                };
                                readonly id: 19026;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "2188:30:79";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                }];
                                readonly id: 19021;
                                readonly name: "keccak256";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -8;
                                readonly src: "2178:9:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                                    readonly typeString: "function (bytes memory) pure returns (bytes32)";
                                };
                            };
                            readonly id: 19027;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2178:41:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "2163:56:79";
                    }, {
                        readonly assignments: readonly [19031];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19031;
                            readonly mutability: "mutable";
                            readonly name: "deployed";
                            readonly nameLocation: "2293:8:79";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19072;
                            readonly src: "2278:23:79";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18961";
                                readonly typeString: "contract ERC20Forwarder";
                            };
                            readonly typeName: {
                                readonly id: 19030;
                                readonly nodeType: "UserDefinedTypeName";
                                readonly pathNode: {
                                    readonly id: 19029;
                                    readonly name: "ERC20Forwarder";
                                    readonly nameLocations: readonly ["2278:14:79"];
                                    readonly nodeType: "IdentifierPath";
                                    readonly referencedDeclaration: 18961;
                                    readonly src: "2278:14:79";
                                };
                                readonly referencedDeclaration: 18961;
                                readonly src: "2278:14:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18961";
                                    readonly typeString: "contract ERC20Forwarder";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19038;
                        readonly initialValue: {
                            readonly arguments: readonly [];
                            readonly expression: {
                                readonly argumentTypes: readonly [];
                                readonly expression: {
                                    readonly argumentTypes: readonly [];
                                    readonly id: 19034;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly nodeType: "NewExpression";
                                    readonly src: "2304:18:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_creation_nonpayable$__$returns$_t_contract$_ERC20Forwarder_$18961_$";
                                        readonly typeString: "function () returns (contract ERC20Forwarder)";
                                    };
                                    readonly typeName: {
                                        readonly id: 19033;
                                        readonly nodeType: "UserDefinedTypeName";
                                        readonly pathNode: {
                                            readonly id: 19032;
                                            readonly name: "ERC20Forwarder";
                                            readonly nameLocations: readonly ["2308:14:79"];
                                            readonly nodeType: "IdentifierPath";
                                            readonly referencedDeclaration: 18961;
                                            readonly src: "2308:14:79";
                                        };
                                        readonly referencedDeclaration: 18961;
                                        readonly src: "2308:14:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18961";
                                            readonly typeString: "contract ERC20Forwarder";
                                        };
                                    };
                                };
                                readonly id: 19036;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly names: readonly ["salt"];
                                readonly nodeType: "FunctionCallOptions";
                                readonly options: readonly [{
                                    readonly id: 19035;
                                    readonly name: "salt";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19020;
                                    readonly src: "2330:4:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    };
                                }];
                                readonly src: "2304:32:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_creation_nonpayable$__$returns$_t_contract$_ERC20Forwarder_$18961_$salt";
                                    readonly typeString: "function () returns (contract ERC20Forwarder)";
                                };
                            };
                            readonly id: 19037;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "2304:34:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18961";
                                readonly typeString: "contract ERC20Forwarder";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "2278:60:79";
                    }, {
                        readonly condition: {
                            readonly id: 19049;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly nodeType: "UnaryOperation";
                            readonly operator: "!";
                            readonly prefix: true;
                            readonly src: "2431:56:79";
                            readonly subExpression: {
                                readonly components: readonly [{
                                    readonly commonType: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                    readonly id: 19047;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly lValueRequested: false;
                                    readonly leftExpression: {
                                        readonly arguments: readonly [{
                                            readonly id: 19041;
                                            readonly name: "deployed";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 19031;
                                            readonly src: "2441:8:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18961";
                                                readonly typeString: "contract ERC20Forwarder";
                                            };
                                        }];
                                        readonly expression: {
                                            readonly argumentTypes: readonly [{
                                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18961";
                                                readonly typeString: "contract ERC20Forwarder";
                                            }];
                                            readonly id: 19040;
                                            readonly isConstant: false;
                                            readonly isLValue: false;
                                            readonly isPure: true;
                                            readonly lValueRequested: false;
                                            readonly nodeType: "ElementaryTypeNameExpression";
                                            readonly src: "2433:7:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_type$_t_address_$";
                                                readonly typeString: "type(address)";
                                            };
                                            readonly typeName: {
                                                readonly id: 19039;
                                                readonly name: "address";
                                                readonly nodeType: "ElementaryTypeName";
                                                readonly src: "2433:7:79";
                                                readonly typeDescriptions: {};
                                            };
                                        };
                                        readonly id: 19042;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly kind: "typeConversion";
                                        readonly lValueRequested: false;
                                        readonly nameLocations: readonly [];
                                        readonly names: readonly [];
                                        readonly nodeType: "FunctionCall";
                                        readonly src: "2433:17:79";
                                        readonly tryCall: false;
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        };
                                    };
                                    readonly nodeType: "BinaryOperation";
                                    readonly operator: "==";
                                    readonly rightExpression: {
                                        readonly arguments: readonly [{
                                            readonly id: 19044;
                                            readonly name: "__token";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 19003;
                                            readonly src: "2467:7:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                                readonly typeString: "contract IMultiToken";
                                            };
                                        }, {
                                            readonly id: 19045;
                                            readonly name: "__tokenId";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 19005;
                                            readonly src: "2476:9:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            };
                                        }];
                                        readonly expression: {
                                            readonly argumentTypes: readonly [{
                                                readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                                readonly typeString: "contract IMultiToken";
                                            }, {
                                                readonly typeIdentifier: "t_uint256";
                                                readonly typeString: "uint256";
                                            }];
                                            readonly id: 19043;
                                            readonly name: "getForwarder";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 19138;
                                            readonly src: "2454:12:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_function_internal_view$_t_contract$_IMultiToken_$8188_$_t_uint256_$returns$_t_address_$";
                                                readonly typeString: "function (contract IMultiToken,uint256) view returns (address)";
                                            };
                                        };
                                        readonly id: 19046;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly kind: "functionCall";
                                        readonly lValueRequested: false;
                                        readonly nameLocations: readonly [];
                                        readonly names: readonly [];
                                        readonly nodeType: "FunctionCall";
                                        readonly src: "2454:32:79";
                                        readonly tryCall: false;
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_address";
                                            readonly typeString: "address";
                                        };
                                    };
                                    readonly src: "2433:53:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bool";
                                        readonly typeString: "bool";
                                    };
                                }];
                                readonly id: 19048;
                                readonly isConstant: false;
                                readonly isInlineArray: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly lValueRequested: false;
                                readonly nodeType: "TupleExpression";
                                readonly src: "2432:55:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bool";
                                    readonly typeString: "bool";
                                };
                            };
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bool";
                                readonly typeString: "bool";
                            };
                        };
                        readonly id: 19056;
                        readonly nodeType: "IfStatement";
                        readonly src: "2427:142:79";
                        readonly trueBody: {
                            readonly id: 19055;
                            readonly nodeType: "Block";
                            readonly src: "2489:80:79";
                            readonly statements: readonly [{
                                readonly errorCall: {
                                    readonly arguments: readonly [];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [];
                                        readonly expression: {
                                            readonly id: 19050;
                                            readonly name: "IERC20ForwarderFactory";
                                            readonly nodeType: "Identifier";
                                            readonly overloadedDeclarations: readonly [];
                                            readonly referencedDeclaration: 6847;
                                            readonly src: "2510:22:79";
                                            readonly typeDescriptions: {
                                                readonly typeIdentifier: "t_type$_t_contract$_IERC20ForwarderFactory_$6847_$";
                                                readonly typeString: "type(contract IERC20ForwarderFactory)";
                                            };
                                        };
                                        readonly id: 19052;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: false;
                                        readonly lValueRequested: false;
                                        readonly memberLocation: "2533:23:79";
                                        readonly memberName: "InvalidForwarderAddress";
                                        readonly nodeType: "MemberAccess";
                                        readonly referencedDeclaration: 6811;
                                        readonly src: "2510:46:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_function_error_pure$__$returns$__$";
                                            readonly typeString: "function () pure";
                                        };
                                    };
                                    readonly id: 19053;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "functionCall";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "2510:48:79";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_tuple$__$";
                                        readonly typeString: "tuple()";
                                    };
                                };
                                readonly id: 19054;
                                readonly nodeType: "RevertStatement";
                                readonly src: "2503:55:79";
                            }];
                        };
                    }, {
                        readonly expression: {
                            readonly id: 19064;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 19057;
                                readonly name: "_token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18986;
                                readonly src: "2617:6:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly arguments: readonly [{
                                    readonly arguments: readonly [{
                                        readonly hexValue: "31";
                                        readonly id: 19061;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly kind: "number";
                                        readonly lValueRequested: false;
                                        readonly nodeType: "Literal";
                                        readonly src: "2646:1:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_rational_1_by_1";
                                            readonly typeString: "int_const 1";
                                        };
                                        readonly value: "1";
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_rational_1_by_1";
                                            readonly typeString: "int_const 1";
                                        }];
                                        readonly id: 19060;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "2638:7:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_address_$";
                                            readonly typeString: "type(address)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19059;
                                            readonly name: "address";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "2638:7:79";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19062;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "2638:10:79";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }];
                                    readonly id: 19058;
                                    readonly name: "IMultiToken";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 8188;
                                    readonly src: "2626:11:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_type$_t_contract$_IMultiToken_$8188_$";
                                        readonly typeString: "type(contract IMultiToken)";
                                    };
                                };
                                readonly id: 19063;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "typeConversion";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "2626:23:79";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                    readonly typeString: "contract IMultiToken";
                                };
                            };
                            readonly src: "2617:32:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly id: 19065;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2617:32:79";
                    }, {
                        readonly expression: {
                            readonly id: 19068;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly leftHandSide: {
                                readonly id: 19066;
                                readonly name: "_tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18990;
                                readonly src: "2659:8:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            };
                            readonly nodeType: "Assignment";
                            readonly operator: "=";
                            readonly rightHandSide: {
                                readonly hexValue: "31";
                                readonly id: 19067;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly kind: "number";
                                readonly lValueRequested: false;
                                readonly nodeType: "Literal";
                                readonly src: "2670:1:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_rational_1_by_1";
                                    readonly typeString: "int_const 1";
                                };
                                readonly value: "1";
                            };
                            readonly src: "2659:12:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly id: 19069;
                        readonly nodeType: "ExpressionStatement";
                        readonly src: "2659:12:79";
                    }, {
                        readonly expression: {
                            readonly id: 19070;
                            readonly name: "deployed";
                            readonly nodeType: "Identifier";
                            readonly overloadedDeclarations: readonly [];
                            readonly referencedDeclaration: 19031;
                            readonly src: "2731:8:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_ERC20Forwarder_$18961";
                                readonly typeString: "contract ERC20Forwarder";
                            };
                        };
                        readonly functionReturnParameters: 19010;
                        readonly id: 19071;
                        readonly nodeType: "Return";
                        readonly src: "2724:15:79";
                    }];
                };
                readonly baseFunctions: readonly [6823];
                readonly documentation: {
                    readonly id: 19000;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "1523:330:79";
                    readonly text: "@notice Uses create2 to deploy a forwarder at a predictable address as\n         part of our ERC20 multitoken implementation.\n @param __token The MultiToken targeted by this factory.\n @param __tokenId The sub-token ID targeted by this factory.\n @return Returns the address of the deployed forwarder.";
                };
                readonly functionSelector: "0ecaea73";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "create";
                readonly nameLocation: "1867:6:79";
                readonly parameters: {
                    readonly id: 19006;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19003;
                        readonly mutability: "mutable";
                        readonly name: "__token";
                        readonly nameLocation: "1895:7:79";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19073;
                        readonly src: "1883:19:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                            readonly typeString: "contract IMultiToken";
                        };
                        readonly typeName: {
                            readonly id: 19002;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 19001;
                                readonly name: "IMultiToken";
                                readonly nameLocations: readonly ["1883:11:79"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 8188;
                                readonly src: "1883:11:79";
                            };
                            readonly referencedDeclaration: 8188;
                            readonly src: "1883:11:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 19005;
                        readonly mutability: "mutable";
                        readonly name: "__tokenId";
                        readonly nameLocation: "1920:9:79";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19073;
                        readonly src: "1912:17:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 19004;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "1912:7:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "1873:62:79";
                };
                readonly returnParameters: {
                    readonly id: 19010;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19009;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19073;
                        readonly src: "1954:15:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IERC20Forwarder_$6802";
                            readonly typeString: "contract IERC20Forwarder";
                        };
                        readonly typeName: {
                            readonly id: 19008;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 19007;
                                readonly name: "IERC20Forwarder";
                                readonly nameLocations: readonly ["1954:15:79"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 6802;
                                readonly src: "1954:15:79";
                            };
                            readonly referencedDeclaration: 6802;
                            readonly src: "1954:15:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IERC20Forwarder_$6802";
                                readonly typeString: "contract IERC20Forwarder";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "1953:17:79";
                };
                readonly scope: 19139;
                readonly stateMutability: "nonpayable";
                readonly virtual: false;
                readonly visibility: "external";
            }, {
                readonly id: 19087;
                readonly nodeType: "FunctionDefinition";
                readonly src: "2892:115:79";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 19086;
                    readonly nodeType: "Block";
                    readonly src: "2965:42:79";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly expression: {
                            readonly components: readonly [{
                                readonly id: 19082;
                                readonly name: "_token";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18986;
                                readonly src: "2983:6:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                    readonly typeString: "contract IMultiToken";
                                };
                            }, {
                                readonly id: 19083;
                                readonly name: "_tokenId";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: 18990;
                                readonly src: "2991:8:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint256";
                                    readonly typeString: "uint256";
                                };
                            }];
                            readonly id: 19084;
                            readonly isConstant: false;
                            readonly isInlineArray: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly lValueRequested: false;
                            readonly nodeType: "TupleExpression";
                            readonly src: "2982:18:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_tuple$_t_contract$_IMultiToken_$8188_$_t_uint256_$";
                                readonly typeString: "tuple(contract IMultiToken,uint256)";
                            };
                        };
                        readonly functionReturnParameters: 19081;
                        readonly id: 19085;
                        readonly nodeType: "Return";
                        readonly src: "2975:25:79";
                    }];
                };
                readonly baseFunctions: readonly [6831];
                readonly documentation: {
                    readonly id: 19074;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "2752:135:79";
                    readonly text: "@notice Returns the transient storage of this contract.\n @return Returns the stored multitoken address and the sub token id.";
                };
                readonly functionSelector: "600eb4ba";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "getDeployDetails";
                readonly nameLocation: "2901:16:79";
                readonly parameters: {
                    readonly id: 19075;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [];
                    readonly src: "2917:2:79";
                };
                readonly returnParameters: {
                    readonly id: 19081;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19078;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19087;
                        readonly src: "2943:11:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                            readonly typeString: "contract IMultiToken";
                        };
                        readonly typeName: {
                            readonly id: 19077;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 19076;
                                readonly name: "IMultiToken";
                                readonly nameLocations: readonly ["2943:11:79"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 8188;
                                readonly src: "2943:11:79";
                            };
                            readonly referencedDeclaration: 8188;
                            readonly src: "2943:11:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 19080;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19087;
                        readonly src: "2956:7:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 19079;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "2956:7:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "2942:22:79";
                };
                readonly scope: 19139;
                readonly stateMutability: "view";
                readonly virtual: false;
                readonly visibility: "external";
            }, {
                readonly id: 19138;
                readonly nodeType: "FunctionDefinition";
                readonly src: "3287:495:79";
                readonly nodes: readonly [];
                readonly body: {
                    readonly id: 19137;
                    readonly nodeType: "Block";
                    readonly src: "3401:381:79";
                    readonly nodes: readonly [];
                    readonly statements: readonly [{
                        readonly assignments: readonly [19099];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19099;
                            readonly mutability: "mutable";
                            readonly name: "salt";
                            readonly nameLocation: "3476:4:79";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19137;
                            readonly src: "3468:12:79";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                            readonly typeName: {
                                readonly id: 19098;
                                readonly name: "bytes32";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "3468:7:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes32";
                                    readonly typeString: "bytes32";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19107;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly id: 19103;
                                    readonly name: "__token";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19091;
                                    readonly src: "3504:7:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                        readonly typeString: "contract IMultiToken";
                                    };
                                }, {
                                    readonly id: 19104;
                                    readonly name: "__tokenId";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19093;
                                    readonly src: "3513:9:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                        readonly typeString: "contract IMultiToken";
                                    }, {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    }];
                                    readonly expression: {
                                        readonly id: 19101;
                                        readonly name: "abi";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -1;
                                        readonly src: "3493:3:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_magic_abi";
                                            readonly typeString: "abi";
                                        };
                                    };
                                    readonly id: 19102;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "3497:6:79";
                                    readonly memberName: "encode";
                                    readonly nodeType: "MemberAccess";
                                    readonly src: "3493:10:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$";
                                        readonly typeString: "function () pure returns (bytes memory)";
                                    };
                                };
                                readonly id: 19105;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "3493:30:79";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                }];
                                readonly id: 19100;
                                readonly name: "keccak256";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -8;
                                readonly src: "3483:9:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                                    readonly typeString: "function (bytes memory) pure returns (bytes32)";
                                };
                            };
                            readonly id: 19106;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "3483:41:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "3468:56:79";
                    }, {
                        readonly assignments: readonly [19109];
                        readonly declarations: readonly [{
                            readonly constant: false;
                            readonly id: 19109;
                            readonly mutability: "mutable";
                            readonly name: "addressBytes";
                            readonly nameLocation: "3542:12:79";
                            readonly nodeType: "VariableDeclaration";
                            readonly scope: 19137;
                            readonly src: "3534:20:79";
                            readonly stateVariable: false;
                            readonly storageLocation: "default";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                            readonly typeName: {
                                readonly id: 19108;
                                readonly name: "bytes32";
                                readonly nodeType: "ElementaryTypeName";
                                readonly src: "3534:7:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes32";
                                    readonly typeString: "bytes32";
                                };
                            };
                            readonly visibility: "internal";
                        }];
                        readonly id: 19125;
                        readonly initialValue: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly arguments: readonly [{
                                        readonly hexValue: "30786666";
                                        readonly id: 19115;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly kind: "number";
                                        readonly lValueRequested: false;
                                        readonly nodeType: "Literal";
                                        readonly src: "3604:4:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_rational_255_by_1";
                                            readonly typeString: "int_const 255";
                                        };
                                        readonly value: "0xff";
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_rational_255_by_1";
                                            readonly typeString: "int_const 255";
                                        }];
                                        readonly id: 19114;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "3597:6:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_bytes1_$";
                                            readonly typeString: "type(bytes1)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19113;
                                            readonly name: "bytes1";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "3597:6:79";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19116;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3597:12:79";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes1";
                                        readonly typeString: "bytes1";
                                    };
                                }, {
                                    readonly arguments: readonly [{
                                        readonly id: 19119;
                                        readonly name: "this";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -28;
                                        readonly src: "3619:4:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_contract$_ERC20ForwarderFactory_$19139";
                                            readonly typeString: "contract ERC20ForwarderFactory";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_contract$_ERC20ForwarderFactory_$19139";
                                            readonly typeString: "contract ERC20ForwarderFactory";
                                        }];
                                        readonly id: 19118;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "3611:7:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_address_$";
                                            readonly typeString: "type(address)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19117;
                                            readonly name: "address";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "3611:7:79";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19120;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3611:13:79";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    };
                                }, {
                                    readonly id: 19121;
                                    readonly name: "salt";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 19099;
                                    readonly src: "3626:4:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    };
                                }, {
                                    readonly id: 19122;
                                    readonly name: "ERC20LINK_HASH";
                                    readonly nodeType: "Identifier";
                                    readonly overloadedDeclarations: readonly [];
                                    readonly referencedDeclaration: 18999;
                                    readonly src: "3632:14:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_bytes1";
                                        readonly typeString: "bytes1";
                                    }, {
                                        readonly typeIdentifier: "t_address";
                                        readonly typeString: "address";
                                    }, {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    }, {
                                        readonly typeIdentifier: "t_bytes32";
                                        readonly typeString: "bytes32";
                                    }];
                                    readonly expression: {
                                        readonly id: 19111;
                                        readonly name: "abi";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: -1;
                                        readonly src: "3580:3:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_magic_abi";
                                            readonly typeString: "abi";
                                        };
                                    };
                                    readonly id: 19112;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly memberLocation: "3584:12:79";
                                    readonly memberName: "encodePacked";
                                    readonly nodeType: "MemberAccess";
                                    readonly src: "3580:16:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$";
                                        readonly typeString: "function () pure returns (bytes memory)";
                                    };
                                };
                                readonly id: 19123;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "functionCall";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "3580:67:79";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_bytes_memory_ptr";
                                    readonly typeString: "bytes memory";
                                }];
                                readonly id: 19110;
                                readonly name: "keccak256";
                                readonly nodeType: "Identifier";
                                readonly overloadedDeclarations: readonly [];
                                readonly referencedDeclaration: -8;
                                readonly src: "3557:9:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$";
                                    readonly typeString: "function (bytes memory) pure returns (bytes32)";
                                };
                            };
                            readonly id: 19124;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "functionCall";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "3557:100:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_bytes32";
                                readonly typeString: "bytes32";
                            };
                        };
                        readonly nodeType: "VariableDeclarationStatement";
                        readonly src: "3534:123:79";
                    }, {
                        readonly expression: {
                            readonly arguments: readonly [{
                                readonly arguments: readonly [{
                                    readonly arguments: readonly [{
                                        readonly id: 19132;
                                        readonly name: "addressBytes";
                                        readonly nodeType: "Identifier";
                                        readonly overloadedDeclarations: readonly [];
                                        readonly referencedDeclaration: 19109;
                                        readonly src: "3760:12:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_bytes32";
                                            readonly typeString: "bytes32";
                                        };
                                    }];
                                    readonly expression: {
                                        readonly argumentTypes: readonly [{
                                            readonly typeIdentifier: "t_bytes32";
                                            readonly typeString: "bytes32";
                                        }];
                                        readonly id: 19131;
                                        readonly isConstant: false;
                                        readonly isLValue: false;
                                        readonly isPure: true;
                                        readonly lValueRequested: false;
                                        readonly nodeType: "ElementaryTypeNameExpression";
                                        readonly src: "3752:7:79";
                                        readonly typeDescriptions: {
                                            readonly typeIdentifier: "t_type$_t_uint256_$";
                                            readonly typeString: "type(uint256)";
                                        };
                                        readonly typeName: {
                                            readonly id: 19130;
                                            readonly name: "uint256";
                                            readonly nodeType: "ElementaryTypeName";
                                            readonly src: "3752:7:79";
                                            readonly typeDescriptions: {};
                                        };
                                    };
                                    readonly id: 19133;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: false;
                                    readonly kind: "typeConversion";
                                    readonly lValueRequested: false;
                                    readonly nameLocations: readonly [];
                                    readonly names: readonly [];
                                    readonly nodeType: "FunctionCall";
                                    readonly src: "3752:21:79";
                                    readonly tryCall: false;
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    };
                                }];
                                readonly expression: {
                                    readonly argumentTypes: readonly [{
                                        readonly typeIdentifier: "t_uint256";
                                        readonly typeString: "uint256";
                                    }];
                                    readonly id: 19129;
                                    readonly isConstant: false;
                                    readonly isLValue: false;
                                    readonly isPure: true;
                                    readonly lValueRequested: false;
                                    readonly nodeType: "ElementaryTypeNameExpression";
                                    readonly src: "3744:7:79";
                                    readonly typeDescriptions: {
                                        readonly typeIdentifier: "t_type$_t_uint160_$";
                                        readonly typeString: "type(uint160)";
                                    };
                                    readonly typeName: {
                                        readonly id: 19128;
                                        readonly name: "uint160";
                                        readonly nodeType: "ElementaryTypeName";
                                        readonly src: "3744:7:79";
                                        readonly typeDescriptions: {};
                                    };
                                };
                                readonly id: 19134;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: false;
                                readonly kind: "typeConversion";
                                readonly lValueRequested: false;
                                readonly nameLocations: readonly [];
                                readonly names: readonly [];
                                readonly nodeType: "FunctionCall";
                                readonly src: "3744:30:79";
                                readonly tryCall: false;
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_uint160";
                                    readonly typeString: "uint160";
                                };
                            }];
                            readonly expression: {
                                readonly argumentTypes: readonly [{
                                    readonly typeIdentifier: "t_uint160";
                                    readonly typeString: "uint160";
                                }];
                                readonly id: 19127;
                                readonly isConstant: false;
                                readonly isLValue: false;
                                readonly isPure: true;
                                readonly lValueRequested: false;
                                readonly nodeType: "ElementaryTypeNameExpression";
                                readonly src: "3736:7:79";
                                readonly typeDescriptions: {
                                    readonly typeIdentifier: "t_type$_t_address_$";
                                    readonly typeString: "type(address)";
                                };
                                readonly typeName: {
                                    readonly id: 19126;
                                    readonly name: "address";
                                    readonly nodeType: "ElementaryTypeName";
                                    readonly src: "3736:7:79";
                                    readonly typeDescriptions: {};
                                };
                            };
                            readonly id: 19135;
                            readonly isConstant: false;
                            readonly isLValue: false;
                            readonly isPure: false;
                            readonly kind: "typeConversion";
                            readonly lValueRequested: false;
                            readonly nameLocations: readonly [];
                            readonly names: readonly [];
                            readonly nodeType: "FunctionCall";
                            readonly src: "3736:39:79";
                            readonly tryCall: false;
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly functionReturnParameters: 19097;
                        readonly id: 19136;
                        readonly nodeType: "Return";
                        readonly src: "3729:46:79";
                    }];
                };
                readonly baseFunctions: readonly [6841];
                readonly documentation: {
                    readonly id: 19088;
                    readonly nodeType: "StructuredDocumentation";
                    readonly src: "3013:269:79";
                    readonly text: "@notice Helper to calculate expected forwarder contract addresses.\n @param __token The multitoken which the forwarder should link to.\n @param __tokenId The id of the sub token from the multitoken.\n @return The expected address of the forwarder.";
                };
                readonly functionSelector: "0710fd58";
                readonly implemented: true;
                readonly kind: "function";
                readonly modifiers: readonly [];
                readonly name: "getForwarder";
                readonly nameLocation: "3296:12:79";
                readonly parameters: {
                    readonly id: 19094;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19091;
                        readonly mutability: "mutable";
                        readonly name: "__token";
                        readonly nameLocation: "3330:7:79";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19138;
                        readonly src: "3318:19:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                            readonly typeString: "contract IMultiToken";
                        };
                        readonly typeName: {
                            readonly id: 19090;
                            readonly nodeType: "UserDefinedTypeName";
                            readonly pathNode: {
                                readonly id: 19089;
                                readonly name: "IMultiToken";
                                readonly nameLocations: readonly ["3318:11:79"];
                                readonly nodeType: "IdentifierPath";
                                readonly referencedDeclaration: 8188;
                                readonly src: "3318:11:79";
                            };
                            readonly referencedDeclaration: 8188;
                            readonly src: "3318:11:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_contract$_IMultiToken_$8188";
                                readonly typeString: "contract IMultiToken";
                            };
                        };
                        readonly visibility: "internal";
                    }, {
                        readonly constant: false;
                        readonly id: 19093;
                        readonly mutability: "mutable";
                        readonly name: "__tokenId";
                        readonly nameLocation: "3355:9:79";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19138;
                        readonly src: "3347:17:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_uint256";
                            readonly typeString: "uint256";
                        };
                        readonly typeName: {
                            readonly id: 19092;
                            readonly name: "uint256";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3347:7:79";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_uint256";
                                readonly typeString: "uint256";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "3308:62:79";
                };
                readonly returnParameters: {
                    readonly id: 19097;
                    readonly nodeType: "ParameterList";
                    readonly parameters: readonly [{
                        readonly constant: false;
                        readonly id: 19096;
                        readonly mutability: "mutable";
                        readonly name: "";
                        readonly nameLocation: "-1:-1:-1";
                        readonly nodeType: "VariableDeclaration";
                        readonly scope: 19138;
                        readonly src: "3392:7:79";
                        readonly stateVariable: false;
                        readonly storageLocation: "default";
                        readonly typeDescriptions: {
                            readonly typeIdentifier: "t_address";
                            readonly typeString: "address";
                        };
                        readonly typeName: {
                            readonly id: 19095;
                            readonly name: "address";
                            readonly nodeType: "ElementaryTypeName";
                            readonly src: "3392:7:79";
                            readonly stateMutability: "nonpayable";
                            readonly typeDescriptions: {
                                readonly typeIdentifier: "t_address";
                                readonly typeString: "address";
                            };
                        };
                        readonly visibility: "internal";
                    }];
                    readonly src: "3391:9:79";
                };
                readonly scope: 19139;
                readonly stateMutability: "view";
                readonly virtual: false;
                readonly visibility: "public";
            }];
            readonly abstract: false;
            readonly baseContracts: readonly [{
                readonly baseName: {
                    readonly id: 18975;
                    readonly name: "IERC20ForwarderFactory";
                    readonly nameLocations: readonly ["1086:22:79"];
                    readonly nodeType: "IdentifierPath";
                    readonly referencedDeclaration: 6847;
                    readonly src: "1086:22:79";
                };
                readonly id: 18976;
                readonly nodeType: "InheritanceSpecifier";
                readonly src: "1086:22:79";
            }];
            readonly canonicalName: "ERC20ForwarderFactory";
            readonly contractDependencies: readonly [18961];
            readonly contractKind: "contract";
            readonly documentation: {
                readonly id: 18974;
                readonly nodeType: "StructuredDocumentation";
                readonly src: "394:658:79";
                readonly text: "@author DELV\n @title ERC20ForwarderFactory\n @notice Our MultiToken contract consists of fungible sub-tokens that\n         are similar to ERC20 tokens. In order to support ERC20 compatibility\n         we can deploy interfaces which are ERC20s.\n @dev This factory deploys them using create2 so that the multi token can do\n      cheap verification of the interfaces before they access sensitive\n      functions.\n @custom:disclaimer The language used in this code is for coding convenience\n                    only, and is not intended to, and does not, have any\n                    particular legal or regulatory significance.";
            };
            readonly fullyImplemented: true;
            readonly linearizedBaseContracts: readonly [19139, 6847];
            readonly name: "ERC20ForwarderFactory";
            readonly nameLocation: "1061:21:79";
            readonly scope: 19140;
            readonly usedErrors: readonly [6811];
            readonly usedEvents: readonly [];
        }];
        readonly license: "Apache-2.0";
    };
    readonly id: 79;
};
//# sourceMappingURL=ERC20ForwarderFactory.d.ts.map