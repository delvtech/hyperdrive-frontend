/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IHyperdriveInterface extends utils.Interface {
  functions: {
    "addLiquidity(uint256,uint256,address,bool)": FunctionFragment;
    "balanceOf(uint256,address)": FunctionFragment;
    "closeLong(uint256,uint256,uint256,address,bool)": FunctionFragment;
    "closeShort(uint256,uint256,uint256,address,bool)": FunctionFragment;
    "initialize(uint256,uint256,address,bool)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name(uint256)": FunctionFragment;
    "openLong(uint256,uint256,address,bool)": FunctionFragment;
    "openShort(uint256,uint256,address,bool)": FunctionFragment;
    "perTokenApprovals(uint256,address,address)": FunctionFragment;
    "removeLiquidity(uint256,uint256,address,bool)": FunctionFragment;
    "setApproval(uint256,address,uint256)": FunctionFragment;
    "setApprovalBridge(uint256,address,uint256,address)": FunctionFragment;
    "symbol(uint256)": FunctionFragment;
    "transferFrom(uint256,address,address,uint256)": FunctionFragment;
    "transferFromBridge(uint256,address,address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "addLiquidity(uint256,uint256,address,bool)"
      | "balanceOf"
      | "balanceOf(uint256,address)"
      | "closeLong"
      | "closeLong(uint256,uint256,uint256,address,bool)"
      | "closeShort"
      | "closeShort(uint256,uint256,uint256,address,bool)"
      | "initialize"
      | "initialize(uint256,uint256,address,bool)"
      | "isApprovedForAll"
      | "isApprovedForAll(address,address)"
      | "name"
      | "name(uint256)"
      | "openLong"
      | "openLong(uint256,uint256,address,bool)"
      | "openShort"
      | "openShort(uint256,uint256,address,bool)"
      | "perTokenApprovals"
      | "perTokenApprovals(uint256,address,address)"
      | "removeLiquidity"
      | "removeLiquidity(uint256,uint256,address,bool)"
      | "setApproval"
      | "setApproval(uint256,address,uint256)"
      | "setApprovalBridge"
      | "setApprovalBridge(uint256,address,uint256,address)"
      | "symbol"
      | "symbol(uint256)"
      | "transferFrom"
      | "transferFrom(uint256,address,address,uint256)"
      | "transferFromBridge"
      | "transferFromBridge(uint256,address,address,uint256,address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity(uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLong",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeLong(uint256,uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeShort",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeShort(uint256,uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "name",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "name(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openLong",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openLong(uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openShort",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openShort(uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "perTokenApprovals",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "perTokenApprovals(uint256,address,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity(uint256,uint256,address,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalBridge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalBridge(uint256,address,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "symbol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "symbol(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(uint256,address,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromBridge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromBridge(uint256,address,address,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity(uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeLong", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeLong(uint256,uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeShort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeShort(uint256,uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "name(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openLong", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openLong(uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openShort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openShort(uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perTokenApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perTokenApprovals(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity(uint256,uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalBridge(uint256,address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "symbol(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(uint256,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromBridge(uint256,address,address,uint256,address)",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferSingle(address,address,address,uint256,uint256)"
  ): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface IHyperdrive extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHyperdriveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addLiquidity(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(uint256,address)"(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closeLong(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "closeLong(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeShort(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "closeShort(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "name(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    openLong(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "openLong(uint256,uint256,address,bool)"(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openShort(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "openShort(uint256,uint256,address,bool)"(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    perTokenApprovals(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "perTokenApprovals(uint256,address,address)"(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeLiquidity(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeLiquidity(uint256,uint256,address,bool)"(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApproval(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setApproval(uint256,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setApprovalBridge(uint256,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "symbol(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(uint256,address,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFromBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFromBridge(uint256,address,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    _contribution: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addLiquidity(uint256,uint256,address,bool)"(
    _contribution: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    tokenId: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(uint256,address)"(
    tokenId: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closeLong(
    _maturityTime: PromiseOrValue<BigNumberish>,
    _bondAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "closeLong(uint256,uint256,uint256,address,bool)"(
    _maturityTime: PromiseOrValue<BigNumberish>,
    _bondAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeShort(
    _maturityTime: PromiseOrValue<BigNumberish>,
    _bondAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "closeShort(uint256,uint256,uint256,address,bool)"(
    _maturityTime: PromiseOrValue<BigNumberish>,
    _bondAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _contribution: PromiseOrValue<BigNumberish>,
    _apr: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(uint256,uint256,address,bool)"(
    _contribution: PromiseOrValue<BigNumberish>,
    _apr: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "name(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  openLong(
    _baseAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "openLong(uint256,uint256,address,bool)"(
    _baseAmount: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openShort(
    _bondAmount: PromiseOrValue<BigNumberish>,
    _maxDeposit: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "openShort(uint256,uint256,address,bool)"(
    _bondAmount: PromiseOrValue<BigNumberish>,
    _maxDeposit: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  perTokenApprovals(
    tokenId: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "perTokenApprovals(uint256,address,address)"(
    tokenId: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    _shares: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeLiquidity(uint256,uint256,address,bool)"(
    _shares: PromiseOrValue<BigNumberish>,
    _minOutput: PromiseOrValue<BigNumberish>,
    _destination: PromiseOrValue<string>,
    _asUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApproval(
    tokenID: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setApproval(uint256,address,uint256)"(
    tokenID: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalBridge(
    tokenID: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setApprovalBridge(uint256,address,uint256,address)"(
    tokenID: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "symbol(uint256)"(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    tokenID: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(uint256,address,address,uint256)"(
    tokenID: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFromBridge(
    tokenID: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFromBridge(uint256,address,address,uint256,address)"(
    tokenID: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(uint256,address)"(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeLong(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "closeLong(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeShort(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "closeShort(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "name(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    openLong(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openLong(uint256,uint256,address,bool)"(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openShort(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openShort(uint256,uint256,address,bool)"(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    perTokenApprovals(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "perTokenApprovals(uint256,address,address)"(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "removeLiquidity(uint256,uint256,address,bool)"(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    setApproval(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApproval(uint256,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalBridge(uint256,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "symbol(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(uint256,address,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFromBridge(uint256,address,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
  };

  estimateGas: {
    addLiquidity(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addLiquidity(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(uint256,address)"(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeLong(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "closeLong(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeShort(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "closeShort(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "name(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLong(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "openLong(uint256,uint256,address,bool)"(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openShort(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "openShort(uint256,uint256,address,bool)"(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    perTokenApprovals(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "perTokenApprovals(uint256,address,address)"(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeLiquidity(uint256,uint256,address,bool)"(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApproval(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setApproval(uint256,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setApprovalBridge(uint256,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "symbol(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFrom(uint256,address,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFromBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFromBridge(uint256,address,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidity(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(uint256,address)"(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeLong(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "closeLong(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeShort(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "closeShort(uint256,uint256,uint256,address,bool)"(
      _maturityTime: PromiseOrValue<BigNumberish>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,uint256,address,bool)"(
      _contribution: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "name(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLong(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "openLong(uint256,uint256,address,bool)"(
      _baseAmount: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openShort(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "openShort(uint256,uint256,address,bool)"(
      _bondAmount: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    perTokenApprovals(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "perTokenApprovals(uint256,address,address)"(
      tokenId: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(uint256,uint256,address,bool)"(
      _shares: PromiseOrValue<BigNumberish>,
      _minOutput: PromiseOrValue<BigNumberish>,
      _destination: PromiseOrValue<string>,
      _asUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApproval(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setApproval(uint256,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalBridge(uint256,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "symbol(uint256)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(uint256,address,address,uint256)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFromBridge(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFromBridge(uint256,address,address,uint256,address)"(
      tokenID: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
