// Generated by @wagmi/cli@0.1.6 on 2/23/2023 at 1:49:36 PM
import {
  useContract,
  UseContractConfig,
  useContractEvent,
  UseContractEventConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
} from "wagmi";
import { PrepareWriteContractResult, WriteContractMode } from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AaveYieldSource
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const aaveYieldSourceABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_linkerCodeHash", internalType: "bytes32", type: "bytes32" },
      { name: "_linkerFactory", internalType: "address", type: "address" },
      { name: "_baseToken", internalType: "contract IERC20", type: "address" },
      { name: "_checkpointDuration", internalType: "uint256", type: "uint256" },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
      { name: "_aToken", internalType: "contract IERC20", type: "address" },
      { name: "_pool", internalType: "contract Pool", type: "address" },
      { name: "_curveFee", internalType: "uint256", type: "uint256" },
      { name: "_flatFee", internalType: "uint256", type: "uint256" },
    ],
  },
  { type: "error", inputs: [], name: "BaseBufferExceedsShareReserves" },
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  { type: "error", inputs: [], name: "InvalidCheckpointTime" },
  { type: "error", inputs: [], name: "InvalidCheckpointsPerTerm" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidTimestamp" },
  { type: "error", inputs: [], name: "OutputLimit" },
  { type: "error", inputs: [], name: "PoolAlreadyInitialized" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  { type: "error", inputs: [], name: "TransferFailed" },
  { type: "error", inputs: [], name: "ZeroAmount" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "aToken",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "addLiquidity",
    outputs: [{ name: "lpShares", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseToken",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "batchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "bondReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_checkpointTime", internalType: "uint256", type: "uint256" },
    ],
    name: "checkpoint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "checkpointDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "checkpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "curveFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "flatFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolConfiguration",
    outputs: [
      { name: "initialSharePrice_", internalType: "uint256", type: "uint256" },
      { name: "positionDuration_", internalType: "uint256", type: "uint256" },
      { name: "checkpointDuration_", internalType: "uint256", type: "uint256" },
      { name: "timeStretch_", internalType: "uint256", type: "uint256" },
      { name: "flatFee_", internalType: "uint256", type: "uint256" },
      { name: "curveFee_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolInfo",
    outputs: [
      { name: "shareReserves_", internalType: "uint256", type: "uint256" },
      { name: "bondReserves_", internalType: "uint256", type: "uint256" },
      { name: "lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "sharePrice", internalType: "uint256", type: "uint256" },
      { name: "longsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "longAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "longBaseVolume_", internalType: "uint256", type: "uint256" },
      { name: "shortsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "shortAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "shortBaseVolume_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "initialSharePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_apr", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "linkerCodeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "longBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_baseAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_maxDeposit", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "_approved", internalType: "bool", type: "bool" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permitForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pool",
    outputs: [{ name: "", internalType: "contract Pool", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "positionDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_longWithdrawalShares",
        internalType: "uint256",
        type: "uint256",
      },
      {
        name: "_shortWithdrawalShares",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "redeemWithdrawalShares",
    outputs: [{ name: "_proceeds", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_shares", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "removeLiquidity",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shareReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "shortBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "timeStretch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalShares",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poolABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "onBehalfOf", internalType: "address", type: "address" },
      { name: "referralCode", internalType: "uint16", type: "uint16" },
    ],
    name: "supply",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "asset", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
    ],
    name: "withdraw",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControlEnumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlEnumerableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BondWrapper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bondWrapperABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_hyperdrive",
        internalType: "contract IHyperdrive",
        type: "address",
      },
      { name: "_token", internalType: "contract IERC20", type: "address" },
      { name: "_mintPercent", internalType: "uint256", type: "uint256" },
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
    ],
  },
  { type: "error", inputs: [], name: "BondMatured" },
  { type: "error", inputs: [], name: "BondNotMatured" },
  { type: "error", inputs: [], name: "InsufficientPrice" },
  { type: "error", inputs: [], name: "InvalidTimestamp" },
  { type: "error", inputs: [], name: "TransferFailed" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "maturityTime", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "andBurn", internalType: "bool", type: "bool" },
      { name: "destination", internalType: "address", type: "address" },
    ],
    name: "close",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "deposits",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "hyperdrive",
    outputs: [
      { name: "", internalType: "contract IHyperdrive", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "maturityTime", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "destination", internalType: "address", type: "address" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "mintPercent",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "redeem",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "maturityTime", internalType: "uint256", type: "uint256" },
    ],
    name: "sweep",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "maturityTimes", internalType: "uint256[]", type: "uint256[]" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "sweepAndRedeem",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "token",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burnFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Forwarder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ForwarderABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "who", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "token",
    outputs: [
      { name: "", internalType: "contract IMultiToken", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tokenId",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "source", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Mintable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20MintableABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Pausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PausableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "Paused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "Unpaused",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "paused",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20PresetFixedSupply
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PresetFixedSupplyABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "initialSupply", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burnFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20PresetMinterPauser
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PresetMinterPauserABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "Paused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "Unpaused",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MINTER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PAUSER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burnFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "pause",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "paused",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "unpause",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Errors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const errorsABI = [
  { type: "error", inputs: [], name: "AlreadyClosed" },
  { type: "error", inputs: [], name: "BaseBufferExceedsShareReserves" },
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "BondMatured" },
  { type: "error", inputs: [], name: "BondNotMatured" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeOrZeroInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  { type: "error", inputs: [], name: "InsufficientPrice" },
  { type: "error", inputs: [], name: "InvalidCheckpointDuration" },
  { type: "error", inputs: [], name: "InvalidCheckpointTime" },
  { type: "error", inputs: [], name: "InvalidCheckpointsPerTerm" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidMaturityTime" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidTimestamp" },
  { type: "error", inputs: [], name: "OutputLimit" },
  { type: "error", inputs: [], name: "PoolAlreadyInitialized" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  { type: "error", inputs: [], name: "TransferFailed" },
  { type: "error", inputs: [], name: "UnexpectedAssetId" },
  { type: "error", inputs: [], name: "ZeroAmount" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FixedPointMath
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fixedPointMathABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ONE_18",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ForwarderFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const forwarderFactoryABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ERC20LINK_HASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IMultiToken", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "create",
    outputs: [
      { name: "", internalType: "contract ERC20Forwarder", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getDeployDetails",
    outputs: [
      { name: "", internalType: "contract IMultiToken", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "token", internalType: "contract IMultiToken", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "getForwarder",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hyperdrive
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const hyperdriveABI = [
  { type: "error", inputs: [], name: "BaseBufferExceedsShareReserves" },
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  { type: "error", inputs: [], name: "InvalidCheckpointTime" },
  { type: "error", inputs: [], name: "InvalidCheckpointsPerTerm" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidTimestamp" },
  { type: "error", inputs: [], name: "OutputLimit" },
  { type: "error", inputs: [], name: "PoolAlreadyInitialized" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  { type: "error", inputs: [], name: "ZeroAmount" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "addLiquidity",
    outputs: [{ name: "lpShares", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseToken",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "batchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "bondReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_checkpointTime", internalType: "uint256", type: "uint256" },
    ],
    name: "checkpoint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "checkpointDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "checkpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "curveFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "flatFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolConfiguration",
    outputs: [
      { name: "initialSharePrice_", internalType: "uint256", type: "uint256" },
      { name: "positionDuration_", internalType: "uint256", type: "uint256" },
      { name: "checkpointDuration_", internalType: "uint256", type: "uint256" },
      { name: "timeStretch_", internalType: "uint256", type: "uint256" },
      { name: "flatFee_", internalType: "uint256", type: "uint256" },
      { name: "curveFee_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolInfo",
    outputs: [
      { name: "shareReserves_", internalType: "uint256", type: "uint256" },
      { name: "bondReserves_", internalType: "uint256", type: "uint256" },
      { name: "lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "sharePrice", internalType: "uint256", type: "uint256" },
      { name: "longsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "longAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "longBaseVolume_", internalType: "uint256", type: "uint256" },
      { name: "shortsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "shortAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "shortBaseVolume_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "initialSharePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_apr", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "linkerCodeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "longBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_baseAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_maxDeposit", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "_approved", internalType: "bool", type: "bool" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permitForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "positionDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_longWithdrawalShares",
        internalType: "uint256",
        type: "uint256",
      },
      {
        name: "_shortWithdrawalShares",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "redeemWithdrawalShares",
    outputs: [{ name: "_proceeds", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_shares", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "removeLiquidity",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shareReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "shortBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "timeStretch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HyperdriveBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const hyperdriveBaseABI = [
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "InvalidCheckpointsPerTerm" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseToken",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "batchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "bondReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_checkpointTime", internalType: "uint256", type: "uint256" },
    ],
    name: "checkpoint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "checkpointDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "checkpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "curveFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "flatFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolConfiguration",
    outputs: [
      { name: "initialSharePrice_", internalType: "uint256", type: "uint256" },
      { name: "positionDuration_", internalType: "uint256", type: "uint256" },
      { name: "checkpointDuration_", internalType: "uint256", type: "uint256" },
      { name: "timeStretch_", internalType: "uint256", type: "uint256" },
      { name: "flatFee_", internalType: "uint256", type: "uint256" },
      { name: "curveFee_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolInfo",
    outputs: [
      { name: "shareReserves_", internalType: "uint256", type: "uint256" },
      { name: "bondReserves_", internalType: "uint256", type: "uint256" },
      { name: "lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "sharePrice", internalType: "uint256", type: "uint256" },
      { name: "longsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "longAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "longBaseVolume_", internalType: "uint256", type: "uint256" },
      { name: "shortsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "shortAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "shortBaseVolume_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "initialSharePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "linkerCodeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "longBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "_approved", internalType: "bool", type: "bool" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permitForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "positionDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shareReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "shortBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "timeStretch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HyperdriveLP
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const hyperdriveLpABI = [
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  { type: "error", inputs: [], name: "InvalidCheckpointsPerTerm" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidTimestamp" },
  { type: "error", inputs: [], name: "OutputLimit" },
  { type: "error", inputs: [], name: "PoolAlreadyInitialized" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  { type: "error", inputs: [], name: "ZeroAmount" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "addLiquidity",
    outputs: [{ name: "lpShares", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseToken",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "batchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "bondReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_checkpointTime", internalType: "uint256", type: "uint256" },
    ],
    name: "checkpoint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "checkpointDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "checkpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "curveFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "flatFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolConfiguration",
    outputs: [
      { name: "initialSharePrice_", internalType: "uint256", type: "uint256" },
      { name: "positionDuration_", internalType: "uint256", type: "uint256" },
      { name: "checkpointDuration_", internalType: "uint256", type: "uint256" },
      { name: "timeStretch_", internalType: "uint256", type: "uint256" },
      { name: "flatFee_", internalType: "uint256", type: "uint256" },
      { name: "curveFee_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolInfo",
    outputs: [
      { name: "shareReserves_", internalType: "uint256", type: "uint256" },
      { name: "bondReserves_", internalType: "uint256", type: "uint256" },
      { name: "lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "sharePrice", internalType: "uint256", type: "uint256" },
      { name: "longsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "longAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "longBaseVolume_", internalType: "uint256", type: "uint256" },
      { name: "shortsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "shortAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "shortBaseVolume_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "initialSharePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_apr", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "linkerCodeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "longBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "_approved", internalType: "bool", type: "bool" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permitForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "positionDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_longWithdrawalShares",
        internalType: "uint256",
        type: "uint256",
      },
      {
        name: "_shortWithdrawalShares",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "redeemWithdrawalShares",
    outputs: [{ name: "_proceeds", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_shares", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "removeLiquidity",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shareReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "shortBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "timeStretch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HyperdriveLong
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const hyperdriveLongABI = [
  { type: "error", inputs: [], name: "BaseBufferExceedsShareReserves" },
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  { type: "error", inputs: [], name: "InvalidCheckpointsPerTerm" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidTimestamp" },
  { type: "error", inputs: [], name: "OutputLimit" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  { type: "error", inputs: [], name: "ZeroAmount" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseToken",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "batchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "bondReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_checkpointTime", internalType: "uint256", type: "uint256" },
    ],
    name: "checkpoint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "checkpointDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "checkpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "curveFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "flatFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolConfiguration",
    outputs: [
      { name: "initialSharePrice_", internalType: "uint256", type: "uint256" },
      { name: "positionDuration_", internalType: "uint256", type: "uint256" },
      { name: "checkpointDuration_", internalType: "uint256", type: "uint256" },
      { name: "timeStretch_", internalType: "uint256", type: "uint256" },
      { name: "flatFee_", internalType: "uint256", type: "uint256" },
      { name: "curveFee_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolInfo",
    outputs: [
      { name: "shareReserves_", internalType: "uint256", type: "uint256" },
      { name: "bondReserves_", internalType: "uint256", type: "uint256" },
      { name: "lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "sharePrice", internalType: "uint256", type: "uint256" },
      { name: "longsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "longAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "longBaseVolume_", internalType: "uint256", type: "uint256" },
      { name: "shortsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "shortAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "shortBaseVolume_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "initialSharePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "linkerCodeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "longBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_baseAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "_approved", internalType: "bool", type: "bool" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permitForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "positionDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shareReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "shortBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "timeStretch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HyperdriveShort
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const hyperdriveShortABI = [
  { type: "error", inputs: [], name: "BaseBufferExceedsShareReserves" },
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  { type: "error", inputs: [], name: "InvalidCheckpointsPerTerm" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidTimestamp" },
  { type: "error", inputs: [], name: "OutputLimit" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  { type: "error", inputs: [], name: "ZeroAmount" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseToken",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "batchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "bondReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_checkpointTime", internalType: "uint256", type: "uint256" },
    ],
    name: "checkpoint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "checkpointDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "checkpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "curveFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "flatFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolConfiguration",
    outputs: [
      { name: "initialSharePrice_", internalType: "uint256", type: "uint256" },
      { name: "positionDuration_", internalType: "uint256", type: "uint256" },
      { name: "checkpointDuration_", internalType: "uint256", type: "uint256" },
      { name: "timeStretch_", internalType: "uint256", type: "uint256" },
      { name: "flatFee_", internalType: "uint256", type: "uint256" },
      { name: "curveFee_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolInfo",
    outputs: [
      { name: "shareReserves_", internalType: "uint256", type: "uint256" },
      { name: "bondReserves_", internalType: "uint256", type: "uint256" },
      { name: "lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "sharePrice", internalType: "uint256", type: "uint256" },
      { name: "longsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "longAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "longBaseVolume_", internalType: "uint256", type: "uint256" },
      { name: "shortsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "shortAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "shortBaseVolume_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "initialSharePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "linkerCodeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "longBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_maxDeposit", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "_approved", internalType: "bool", type: "bool" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permitForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "positionDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shareReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "shortBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "timeStretch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HyperdriveTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const hyperdriveTestABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "", internalType: "string", type: "string", indexed: false },
    ],
    name: "log",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "", internalType: "address", type: "address", indexed: false },
    ],
    name: "log_address",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "val",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false,
      },
    ],
    name: "log_array",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "val",
        internalType: "int256[]",
        type: "int256[]",
        indexed: false,
      },
    ],
    name: "log_array",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "val",
        internalType: "address[]",
        type: "address[]",
        indexed: false,
      },
    ],
    name: "log_array",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "log_bytes",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "", internalType: "bytes32", type: "bytes32", indexed: false },
    ],
    name: "log_bytes32",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "", internalType: "int256", type: "int256", indexed: false },
    ],
    name: "log_int",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "val", internalType: "address", type: "address", indexed: false },
    ],
    name: "log_named_address",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "val",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false,
      },
    ],
    name: "log_named_array",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "val",
        internalType: "int256[]",
        type: "int256[]",
        indexed: false,
      },
    ],
    name: "log_named_array",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "val",
        internalType: "address[]",
        type: "address[]",
        indexed: false,
      },
    ],
    name: "log_named_array",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "val", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "log_named_bytes",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "val", internalType: "bytes32", type: "bytes32", indexed: false },
    ],
    name: "log_named_bytes32",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "val", internalType: "int256", type: "int256", indexed: false },
      {
        name: "decimals",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "log_named_decimal_int",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "val", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "decimals",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "log_named_decimal_uint",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "val", internalType: "int256", type: "int256", indexed: false },
    ],
    name: "log_named_int",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "val", internalType: "string", type: "string", indexed: false },
    ],
    name: "log_named_string",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "val", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "log_named_uint",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "", internalType: "string", type: "string", indexed: false },
    ],
    name: "log_string",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "log_uint",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "logs",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "IS_TEST",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "failed",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "setUp",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControlEnumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlEnumerableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "getRoleMember",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Mint
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MintABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IForwarderFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iForwarderFactoryABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "getDeployDetails",
    outputs: [
      { name: "", internalType: "contract IMultiToken", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IHyperdrive
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iHyperdriveABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "addLiquidity",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_apr", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_baseAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_maxDeposit", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_shares", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "removeLiquidity",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMultiToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMultiTokenABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "aggregate",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
      { name: "returnData", internalType: "bytes[]", type: "bytes[]" },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call3[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "allowFailure", internalType: "bool", type: "bool" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call3Value[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "allowFailure", internalType: "bool", type: "bool" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
      { name: "blockHash", internalType: "bytes32", type: "bytes32" },
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getBasefee",
    outputs: [{ name: "basefee", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "blockNumber", internalType: "uint256", type: "uint256" }],
    name: "getBlockHash",
    outputs: [{ name: "blockHash", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getChainId",
    outputs: [{ name: "chainid", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [{ name: "coinbase", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [{ name: "difficulty", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [{ name: "gaslimit", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [{ name: "timestamp", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "addr", internalType: "address", type: "address" }],
    name: "getEthBalance",
    outputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLastBlockHash",
    outputs: [{ name: "blockHash", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "requireSuccess", internalType: "bool", type: "bool" },
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "requireSuccess", internalType: "bool", type: "bool" },
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
      { name: "blockHash", internalType: "bytes32", type: "bytes32" },
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockFixedPointMath
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockFixedPointMathABI = [
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeOrZeroInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "a", internalType: "uint256", type: "uint256" },
      { name: "b", internalType: "uint256", type: "uint256" },
    ],
    name: "add",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "a", internalType: "uint256", type: "uint256" },
      { name: "b", internalType: "uint256", type: "uint256" },
    ],
    name: "divDown",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "a", internalType: "uint256", type: "uint256" },
      { name: "b", internalType: "uint256", type: "uint256" },
    ],
    name: "divUp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "x", internalType: "int256", type: "int256" }],
    name: "exp",
    outputs: [{ name: "r", internalType: "int256", type: "int256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "x", internalType: "int256", type: "int256" }],
    name: "ln",
    outputs: [{ name: "", internalType: "int256", type: "int256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "x", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
      { name: "d", internalType: "uint256", type: "uint256" },
    ],
    name: "mulDivDown",
    outputs: [{ name: "z", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "x", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
      { name: "d", internalType: "uint256", type: "uint256" },
    ],
    name: "mulDivUp",
    outputs: [{ name: "z", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "a", internalType: "uint256", type: "uint256" },
      { name: "b", internalType: "uint256", type: "uint256" },
    ],
    name: "mulDown",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "a", internalType: "uint256", type: "uint256" },
      { name: "b", internalType: "uint256", type: "uint256" },
    ],
    name: "mulUp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "x", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
    ],
    name: "pow",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "a", internalType: "uint256", type: "uint256" },
      { name: "b", internalType: "uint256", type: "uint256" },
    ],
    name: "sub",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_average", internalType: "uint256", type: "uint256" },
      { name: "_totalWeight", internalType: "uint256", type: "uint256" },
      { name: "_delta", internalType: "uint256", type: "uint256" },
      { name: "_deltaWeight", internalType: "uint256", type: "uint256" },
      { name: "_isAdding", internalType: "bool", type: "bool" },
    ],
    name: "updateWeightedAverage",
    outputs: [{ name: "average", internalType: "uint256", type: "uint256" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockHyperdrive
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockHyperdriveABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "baseToken",
        internalType: "contract ERC20Mintable",
        type: "address",
      },
      { name: "_initialSharePrice", internalType: "uint256", type: "uint256" },
      { name: "_checkpointsPerTerm", internalType: "uint256", type: "uint256" },
      { name: "_checkpointDuration", internalType: "uint256", type: "uint256" },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
      { name: "_curveFee", internalType: "uint256", type: "uint256" },
      { name: "_flatFee", internalType: "uint256", type: "uint256" },
    ],
  },
  { type: "error", inputs: [], name: "BaseBufferExceedsShareReserves" },
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  { type: "error", inputs: [], name: "InvalidCheckpointTime" },
  { type: "error", inputs: [], name: "InvalidCheckpointsPerTerm" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidSharePrice" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidTimestamp" },
  { type: "error", inputs: [], name: "OutputLimit" },
  { type: "error", inputs: [], name: "PoolAlreadyInitialized" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  { type: "error", inputs: [], name: "TransferFailed" },
  { type: "error", inputs: [], name: "ZeroAmount" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "addLiquidity",
    outputs: [{ name: "lpShares", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseToken",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "batchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "bondReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_checkpointTime", internalType: "uint256", type: "uint256" },
    ],
    name: "checkpoint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "checkpointDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "checkpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "curveFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "flatFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolConfiguration",
    outputs: [
      { name: "initialSharePrice_", internalType: "uint256", type: "uint256" },
      { name: "positionDuration_", internalType: "uint256", type: "uint256" },
      { name: "checkpointDuration_", internalType: "uint256", type: "uint256" },
      { name: "timeStretch_", internalType: "uint256", type: "uint256" },
      { name: "flatFee_", internalType: "uint256", type: "uint256" },
      { name: "curveFee_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolInfo",
    outputs: [
      { name: "shareReserves_", internalType: "uint256", type: "uint256" },
      { name: "bondReserves_", internalType: "uint256", type: "uint256" },
      { name: "lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "sharePrice", internalType: "uint256", type: "uint256" },
      { name: "longsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "longAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "longBaseVolume_", internalType: "uint256", type: "uint256" },
      { name: "shortsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "shortAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "shortBaseVolume_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getSharePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "initialSharePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_apr", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "linkerCodeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "longBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_baseAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_maxDeposit", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "_approved", internalType: "bool", type: "bool" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permitForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "positionDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_longWithdrawalShares",
        internalType: "uint256",
        type: "uint256",
      },
      {
        name: "_shortWithdrawalShares",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "redeemWithdrawalShares",
    outputs: [{ name: "_proceeds", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_shares", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "removeLiquidity",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_curveFee", internalType: "uint256", type: "uint256" },
      { name: "_flatFee", internalType: "uint256", type: "uint256" },
    ],
    name: "setFees",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "sharePrice", internalType: "uint256", type: "uint256" }],
    name: "setSharePrice",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shareReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "shortBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "timeStretch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockHyperdriveMath
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockHyperdriveMathABI = [
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_shareReserves", internalType: "uint256", type: "uint256" },
      { name: "_bondReserves", internalType: "uint256", type: "uint256" },
      { name: "_lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "_initialSharePrice", internalType: "uint256", type: "uint256" },
      { name: "_positionDuration", internalType: "uint256", type: "uint256" },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateAPRFromReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_baseAmount", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_timeRemaining", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_shareReserves", internalType: "uint256", type: "uint256" },
      { name: "_lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "_initialSharePrice", internalType: "uint256", type: "uint256" },
      { name: "_apr", internalType: "uint256", type: "uint256" },
      { name: "_positionDuration", internalType: "uint256", type: "uint256" },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateBondReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_shareReserves", internalType: "uint256", type: "uint256" },
      { name: "_bondReserves", internalType: "uint256", type: "uint256" },
      {
        name: "_bondReserveAdjustment",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      {
        name: "_normalizedTimeRemaining",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
      { name: "_sharePrice", internalType: "uint256", type: "uint256" },
      { name: "_initialSharePrice", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateCloseLong",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_shareReserves", internalType: "uint256", type: "uint256" },
      { name: "_bondReserves", internalType: "uint256", type: "uint256" },
      {
        name: "_bondReserveAdjustment",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_amountOut", internalType: "uint256", type: "uint256" },
      {
        name: "_normalizedTimeRemaining",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
      { name: "_sharePrice", internalType: "uint256", type: "uint256" },
      { name: "_initialSharePrice", internalType: "uint256", type: "uint256" },
      { name: "_curveFee", internalType: "uint256", type: "uint256" },
      { name: "_flatFee", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateCloseShort",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_amountOut", internalType: "uint256", type: "uint256" },
      {
        name: "_normalizedTimeRemaining",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_spotPrice", internalType: "uint256", type: "uint256" },
      { name: "_sharePrice", internalType: "uint256", type: "uint256" },
      { name: "_curveFeePercent", internalType: "uint256", type: "uint256" },
      { name: "_flatFeePercent", internalType: "uint256", type: "uint256" },
      { name: "_isBaseOut", internalType: "bool", type: "bool" },
    ],
    name: "calculateFeesInGivenOut",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      {
        name: "_normalizedTimeRemaining",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_spotPrice", internalType: "uint256", type: "uint256" },
      { name: "_sharePrice", internalType: "uint256", type: "uint256" },
      { name: "_curveFeePercent", internalType: "uint256", type: "uint256" },
      { name: "_flatFeePercent", internalType: "uint256", type: "uint256" },
      { name: "_isBaseIn", internalType: "bool", type: "bool" },
    ],
    name: "calculateFeesOutGivenIn",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_shareReserves", internalType: "uint256", type: "uint256" },
      { name: "_sharePrice", internalType: "uint256", type: "uint256" },
      { name: "_initialSharePrice", internalType: "uint256", type: "uint256" },
      { name: "_apr", internalType: "uint256", type: "uint256" },
      { name: "_positionDuration", internalType: "uint256", type: "uint256" },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateInitialBondReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      {
        name: "_positionsOutstanding",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_baseVolume", internalType: "uint256", type: "uint256" },
      {
        name: "_averageTimeRemaining",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_sharePrice", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateLpAllocationAdjustment",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_shareReserves", internalType: "uint256", type: "uint256" },
      { name: "_bondReserves", internalType: "uint256", type: "uint256" },
      {
        name: "_bondReserveAdjustment",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      {
        name: "_normalizedTimeRemaining",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
      { name: "_sharePrice", internalType: "uint256", type: "uint256" },
      { name: "_initialSharePrice", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateOpenLong",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_shareReserves", internalType: "uint256", type: "uint256" },
      { name: "_bondReserves", internalType: "uint256", type: "uint256" },
      {
        name: "_bondReserveAdjustment",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      {
        name: "_normalizedTimeRemaining",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
      { name: "_sharePrice", internalType: "uint256", type: "uint256" },
      { name: "_initialSharePrice", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateOpenShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_shares", internalType: "uint256", type: "uint256" },
      { name: "_shareReserves", internalType: "uint256", type: "uint256" },
      { name: "_lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "_longsOutstanding", internalType: "uint256", type: "uint256" },
      { name: "_shortsOutstanding", internalType: "uint256", type: "uint256" },
      { name: "_sharePrice", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateOutForLpSharesIn",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_shareReserves", internalType: "uint256", type: "uint256" },
      { name: "_bondReserves", internalType: "uint256", type: "uint256" },
      { name: "_lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "_initialSharePrice", internalType: "uint256", type: "uint256" },
      {
        name: "_normalizedTimeRemaining",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateSpotPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockHyperdriveTestnet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockHyperdriveTestnetABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "baseToken",
        internalType: "contract ERC20Mintable",
        type: "address",
      },
      { name: "_initialRate", internalType: "uint256", type: "uint256" },
      { name: "_initialSharePrice", internalType: "uint256", type: "uint256" },
      { name: "_checkpointsPerTerm", internalType: "uint256", type: "uint256" },
      { name: "_checkpointDuration", internalType: "uint256", type: "uint256" },
      { name: "_timeStretch", internalType: "uint256", type: "uint256" },
      { name: "_curveFee", internalType: "uint256", type: "uint256" },
      { name: "_flatFee", internalType: "uint256", type: "uint256" },
    ],
  },
  { type: "error", inputs: [], name: "BaseBufferExceedsShareReserves" },
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  { type: "error", inputs: [], name: "InvalidCheckpointTime" },
  { type: "error", inputs: [], name: "InvalidCheckpointsPerTerm" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidTimestamp" },
  { type: "error", inputs: [], name: "OutputLimit" },
  { type: "error", inputs: [], name: "PoolAlreadyInitialized" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  { type: "error", inputs: [], name: "TransferFailed" },
  { type: "error", inputs: [], name: "UnsupportedOption" },
  { type: "error", inputs: [], name: "ZeroAmount" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "addLiquidity",
    outputs: [{ name: "lpShares", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseToken",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "batchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "bondReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_checkpointTime", internalType: "uint256", type: "uint256" },
    ],
    name: "checkpoint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "checkpointDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "checkpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_maturityTime", internalType: "uint256", type: "uint256" },
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "closeShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "curveFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "flatFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolConfiguration",
    outputs: [
      { name: "initialSharePrice_", internalType: "uint256", type: "uint256" },
      { name: "positionDuration_", internalType: "uint256", type: "uint256" },
      { name: "checkpointDuration_", internalType: "uint256", type: "uint256" },
      { name: "timeStretch_", internalType: "uint256", type: "uint256" },
      { name: "flatFee_", internalType: "uint256", type: "uint256" },
      { name: "curveFee_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPoolInfo",
    outputs: [
      { name: "shareReserves_", internalType: "uint256", type: "uint256" },
      { name: "bondReserves_", internalType: "uint256", type: "uint256" },
      { name: "lpTotalSupply", internalType: "uint256", type: "uint256" },
      { name: "sharePrice", internalType: "uint256", type: "uint256" },
      { name: "longsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "longAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "longBaseVolume_", internalType: "uint256", type: "uint256" },
      { name: "shortsOutstanding_", internalType: "uint256", type: "uint256" },
      {
        name: "shortAverageMaturityTime_",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "shortBaseVolume_", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "initialSharePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contribution", internalType: "uint256", type: "uint256" },
      { name: "_apr", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "linkerCodeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "longBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "longsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_baseAmount", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openLong",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_bondAmount", internalType: "uint256", type: "uint256" },
      { name: "_maxDeposit", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "openShort",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "_approved", internalType: "bool", type: "bool" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permitForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "positionDuration",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_longWithdrawalShares",
        internalType: "uint256",
        type: "uint256",
      },
      {
        name: "_shortWithdrawalShares",
        internalType: "uint256",
        type: "uint256",
      },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "redeemWithdrawalShares",
    outputs: [{ name: "_proceeds", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_shares", internalType: "uint256", type: "uint256" },
      { name: "_minOutput", internalType: "uint256", type: "uint256" },
      { name: "_destination", internalType: "address", type: "address" },
      { name: "_asUnderlying", internalType: "bool", type: "bool" },
    ],
    name: "removeLiquidity",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_rate", internalType: "uint256", type: "uint256" }],
    name: "setRate",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shareReserves",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortAverageMaturityTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortBaseVolume",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "shortBaseVolumeCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalShareProceeds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortWithdrawalSharesOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "shortsOutstanding",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "timeStretch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockMultiToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockMultiTokenABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_linkerCodeHash", internalType: "bytes32", type: "bytes32" },
      { name: "_factory", internalType: "address", type: "address" },
    ],
  },
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "__external_transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_who", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "__setBalanceOf",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "__name", internalType: "string", type: "string" },
      { name: "__symbol", internalType: "string", type: "string" },
    ],
    name: "__setNameAndSymbol",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "batchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "linkerCodeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "_approved", internalType: "bool", type: "bool" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permitForAll",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockYieldSpaceMath
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockYieldSpaceMathABI = [
  { type: "error", inputs: [], name: "FixedPointMath_AddOverflow" },
  { type: "error", inputs: [], name: "FixedPointMath_InvalidExponent" },
  { type: "error", inputs: [], name: "FixedPointMath_NegativeInput" },
  { type: "error", inputs: [], name: "FixedPointMath_SubOverflow" },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "z", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
      { name: "s", internalType: "uint256", type: "uint256" },
      { name: "dz", internalType: "uint256", type: "uint256" },
      { name: "t", internalType: "uint256", type: "uint256" },
      { name: "c", internalType: "uint256", type: "uint256" },
      { name: "mu", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateBondsInGivenSharesOut",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "z", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
      { name: "s", internalType: "uint256", type: "uint256" },
      { name: "dz", internalType: "uint256", type: "uint256" },
      { name: "t", internalType: "uint256", type: "uint256" },
      { name: "c", internalType: "uint256", type: "uint256" },
      { name: "mu", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateBondsOutGivenSharesIn",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "z", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
      { name: "s", internalType: "uint256", type: "uint256" },
      { name: "dy", internalType: "uint256", type: "uint256" },
      { name: "t", internalType: "uint256", type: "uint256" },
      { name: "c", internalType: "uint256", type: "uint256" },
      { name: "mu", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateSharesInGivenBondsOut",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "z", internalType: "uint256", type: "uint256" },
      { name: "y", internalType: "uint256", type: "uint256" },
      { name: "s", internalType: "uint256", type: "uint256" },
      { name: "dy", internalType: "uint256", type: "uint256" },
      { name: "t", internalType: "uint256", type: "uint256" },
      { name: "c", internalType: "uint256", type: "uint256" },
      { name: "mu", internalType: "uint256", type: "uint256" },
    ],
    name: "calculateSharesOutGivenBondsIn",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MultiToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multiTokenABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_linkerCodeHash", internalType: "bytes32", type: "bytes32" },
      { name: "_factory", internalType: "address", type: "address" },
    ],
  },
  { type: "error", inputs: [], name: "BatchInputLengthMismatch" },
  { type: "error", inputs: [], name: "ExpiredDeadline" },
  { type: "error", inputs: [], name: "InvalidERC20Bridge" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "RestrictedZeroAddress" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "batchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "linkerCodeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "perTokenApprovals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "_approved", internalType: "bool", type: "bool" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permitForAll",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "setApproval",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "setApprovalBridge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "caller", internalType: "address", type: "address" },
    ],
    name: "transferFromBridge",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "Paused",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "Unpaused",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "paused",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link aaveYieldSourceABI}__.
 */
export function useAaveYieldSource(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: aaveYieldSourceABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__.
 */
export function useAaveYieldSourceRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useAaveYieldSourceDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useAaveYieldSourcePermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"aToken"`.
 */
export function useAaveYieldSourceAToken(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "aToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "aToken",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "aToken">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useAaveYieldSourceBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"baseToken"`.
 */
export function useAaveYieldSourceBaseToken(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "baseToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "baseToken",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "baseToken">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"bondReserves"`.
 */
export function useAaveYieldSourceBondReserves(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "bondReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "bondReserves",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "bondReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"checkpointDuration"`.
 */
export function useAaveYieldSourceCheckpointDuration(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "checkpointDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "checkpointDuration",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "checkpointDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useAaveYieldSourceCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "checkpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "checkpoints",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "checkpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"curveFee"`.
 */
export function useAaveYieldSourceCurveFee(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "curveFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "curveFee",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "curveFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"factory"`.
 */
export function useAaveYieldSourceFactory(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "factory">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "factory">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"flatFee"`.
 */
export function useAaveYieldSourceFlatFee(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "flatFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "flatFee",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "flatFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"getPoolConfiguration"`.
 */
export function useAaveYieldSourceGetPoolConfiguration(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "getPoolConfiguration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "getPoolConfiguration",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "getPoolConfiguration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"getPoolInfo"`.
 */
export function useAaveYieldSourceGetPoolInfo(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "getPoolInfo">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "getPoolInfo",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "getPoolInfo">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"initialSharePrice"`.
 */
export function useAaveYieldSourceInitialSharePrice(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "initialSharePrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "initialSharePrice",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "initialSharePrice">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useAaveYieldSourceIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"linkerCodeHash"`.
 */
export function useAaveYieldSourceLinkerCodeHash(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "linkerCodeHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "linkerCodeHash",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "linkerCodeHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"longAverageMaturityTime"`.
 */
export function useAaveYieldSourceLongAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "longAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "longAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "longAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"longBaseVolume"`.
 */
export function useAaveYieldSourceLongBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "longBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "longBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "longBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"longBaseVolumeCheckpoints"`.
 */
export function useAaveYieldSourceLongBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof aaveYieldSourceABI,
      "longBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "longBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "longBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"longWithdrawalShareProceeds"`.
 */
export function useAaveYieldSourceLongWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof aaveYieldSourceABI,
      "longWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "longWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "longWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"longWithdrawalSharesOutstanding"`.
 */
export function useAaveYieldSourceLongWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof aaveYieldSourceABI,
      "longWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "longWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "longWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"longsOutstanding"`.
 */
export function useAaveYieldSourceLongsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "longsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "longsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "longsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"name"`.
 */
export function useAaveYieldSourceName(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"nonces"`.
 */
export function useAaveYieldSourceNonces(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useAaveYieldSourcePerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"pool"`.
 */
export function useAaveYieldSourcePool(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "pool">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "pool",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "pool">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"positionDuration"`.
 */
export function useAaveYieldSourcePositionDuration(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "positionDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "positionDuration",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "positionDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"shareReserves"`.
 */
export function useAaveYieldSourceShareReserves(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "shareReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "shareReserves",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "shareReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"shortAverageMaturityTime"`.
 */
export function useAaveYieldSourceShortAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<
      typeof aaveYieldSourceABI,
      "shortAverageMaturityTime"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "shortAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "shortAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"shortBaseVolume"`.
 */
export function useAaveYieldSourceShortBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "shortBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "shortBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "shortBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"shortBaseVolumeCheckpoints"`.
 */
export function useAaveYieldSourceShortBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof aaveYieldSourceABI,
      "shortBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "shortBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "shortBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"shortWithdrawalShareProceeds"`.
 */
export function useAaveYieldSourceShortWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof aaveYieldSourceABI,
      "shortWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "shortWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "shortWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"shortWithdrawalSharesOutstanding"`.
 */
export function useAaveYieldSourceShortWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof aaveYieldSourceABI,
      "shortWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "shortWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "shortWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"shortsOutstanding"`.
 */
export function useAaveYieldSourceShortsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "shortsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "shortsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "shortsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"symbol"`.
 */
export function useAaveYieldSourceSymbol(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"timeStretch"`.
 */
export function useAaveYieldSourceTimeStretch(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "timeStretch">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "timeStretch",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "timeStretch">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"totalShares"`.
 */
export function useAaveYieldSourceTotalShares(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "totalShares">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "totalShares",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "totalShares">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useAaveYieldSourceTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof aaveYieldSourceABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: aaveYieldSourceABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof aaveYieldSourceABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__.
 */
export function useAaveYieldSourceWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof aaveYieldSourceABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, TFunctionName>({
    abi: aaveYieldSourceABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function useAaveYieldSourceAddLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "addLiquidity"
        >["abi"],
        "addLiquidity"
      > & { functionName?: "addLiquidity" }
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        "addLiquidity"
      > & {
        abi?: never;
        functionName?: "addLiquidity";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "addLiquidity">({
    abi: aaveYieldSourceABI,
    functionName: "addLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function useAaveYieldSourceBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "batchTransferFrom"
        >["abi"],
        "batchTransferFrom"
      > & { functionName?: "batchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        "batchTransferFrom"
      > & {
        abi?: never;
        functionName?: "batchTransferFrom";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof aaveYieldSourceABI,
    "batchTransferFrom"
  >({
    abi: aaveYieldSourceABI,
    functionName: "batchTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"checkpoint"`.
 */
export function useAaveYieldSourceCheckpoint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "checkpoint"
        >["abi"],
        "checkpoint"
      > & { functionName?: "checkpoint" }
    : UseContractWriteConfig<TMode, typeof aaveYieldSourceABI, "checkpoint"> & {
        abi?: never;
        functionName?: "checkpoint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "checkpoint">({
    abi: aaveYieldSourceABI,
    functionName: "checkpoint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"closeLong"`.
 */
export function useAaveYieldSourceCloseLong<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "closeLong"
        >["abi"],
        "closeLong"
      > & { functionName?: "closeLong" }
    : UseContractWriteConfig<TMode, typeof aaveYieldSourceABI, "closeLong"> & {
        abi?: never;
        functionName?: "closeLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "closeLong">({
    abi: aaveYieldSourceABI,
    functionName: "closeLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"closeShort"`.
 */
export function useAaveYieldSourceCloseShort<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "closeShort"
        >["abi"],
        "closeShort"
      > & { functionName?: "closeShort" }
    : UseContractWriteConfig<TMode, typeof aaveYieldSourceABI, "closeShort"> & {
        abi?: never;
        functionName?: "closeShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "closeShort">({
    abi: aaveYieldSourceABI,
    functionName: "closeShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"initialize"`.
 */
export function useAaveYieldSourceInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "initialize"
        >["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof aaveYieldSourceABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "initialize">({
    abi: aaveYieldSourceABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"openLong"`.
 */
export function useAaveYieldSourceOpenLong<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "openLong"
        >["abi"],
        "openLong"
      > & { functionName?: "openLong" }
    : UseContractWriteConfig<TMode, typeof aaveYieldSourceABI, "openLong"> & {
        abi?: never;
        functionName?: "openLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "openLong">({
    abi: aaveYieldSourceABI,
    functionName: "openLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"openShort"`.
 */
export function useAaveYieldSourceOpenShort<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "openShort"
        >["abi"],
        "openShort"
      > & { functionName?: "openShort" }
    : UseContractWriteConfig<TMode, typeof aaveYieldSourceABI, "openShort"> & {
        abi?: never;
        functionName?: "openShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "openShort">({
    abi: aaveYieldSourceABI,
    functionName: "openShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"permitForAll"`.
 */
export function useAaveYieldSourcePermitForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "permitForAll"
        >["abi"],
        "permitForAll"
      > & { functionName?: "permitForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        "permitForAll"
      > & {
        abi?: never;
        functionName?: "permitForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "permitForAll">({
    abi: aaveYieldSourceABI,
    functionName: "permitForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"redeemWithdrawalShares"`.
 */
export function useAaveYieldSourceRedeemWithdrawalShares<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "redeemWithdrawalShares"
        >["abi"],
        "redeemWithdrawalShares"
      > & { functionName?: "redeemWithdrawalShares" }
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        "redeemWithdrawalShares"
      > & {
        abi?: never;
        functionName?: "redeemWithdrawalShares";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof aaveYieldSourceABI,
    "redeemWithdrawalShares"
  >({
    abi: aaveYieldSourceABI,
    functionName: "redeemWithdrawalShares",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function useAaveYieldSourceRemoveLiquidity<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "removeLiquidity"
        >["abi"],
        "removeLiquidity"
      > & { functionName?: "removeLiquidity" }
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        "removeLiquidity"
      > & {
        abi?: never;
        functionName?: "removeLiquidity";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "removeLiquidity">({
    abi: aaveYieldSourceABI,
    functionName: "removeLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"setApproval"`.
 */
export function useAaveYieldSourceSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "setApproval"
        >["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        "setApproval"
      > & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "setApproval">({
    abi: aaveYieldSourceABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useAaveYieldSourceSetApprovalBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof aaveYieldSourceABI,
    "setApprovalBridge"
  >({
    abi: aaveYieldSourceABI,
    functionName: "setApprovalBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useAaveYieldSourceSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof aaveYieldSourceABI,
    "setApprovalForAll"
  >({
    abi: aaveYieldSourceABI,
    functionName: "setApprovalForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useAaveYieldSourceTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aaveYieldSourceABI, "transferFrom">({
    abi: aaveYieldSourceABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useAaveYieldSourceTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aaveYieldSourceABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof aaveYieldSourceABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof aaveYieldSourceABI,
    "transferFromBridge"
  >({
    abi: aaveYieldSourceABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__.
 */
export function usePrepareAaveYieldSourceWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function usePrepareAaveYieldSourceAddLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "addLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "addLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "addLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function usePrepareAaveYieldSourceBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof aaveYieldSourceABI,
      "batchTransferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "batchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "batchTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"checkpoint"`.
 */
export function usePrepareAaveYieldSourceCheckpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "checkpoint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "checkpoint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "checkpoint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"closeLong"`.
 */
export function usePrepareAaveYieldSourceCloseLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "closeLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "closeLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "closeLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"closeShort"`.
 */
export function usePrepareAaveYieldSourceCloseShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "closeShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "closeShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "closeShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareAaveYieldSourceInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"openLong"`.
 */
export function usePrepareAaveYieldSourceOpenLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "openLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "openLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "openLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"openShort"`.
 */
export function usePrepareAaveYieldSourceOpenShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "openShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "openShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "openShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"permitForAll"`.
 */
export function usePrepareAaveYieldSourcePermitForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "permitForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "permitForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "permitForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"redeemWithdrawalShares"`.
 */
export function usePrepareAaveYieldSourceRedeemWithdrawalShares(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof aaveYieldSourceABI,
      "redeemWithdrawalShares"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "redeemWithdrawalShares",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "redeemWithdrawalShares">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function usePrepareAaveYieldSourceRemoveLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "removeLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "removeLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "removeLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareAaveYieldSourceSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareAaveYieldSourceSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof aaveYieldSourceABI,
      "setApprovalBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareAaveYieldSourceSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof aaveYieldSourceABI,
      "setApprovalForAll"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareAaveYieldSourceTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareAaveYieldSourceTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof aaveYieldSourceABI,
      "transferFromBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aaveYieldSourceABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aaveYieldSourceABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aaveYieldSourceABI}__.
 */
export function useAaveYieldSourceEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof aaveYieldSourceABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: aaveYieldSourceABI,
    ...config,
  } as UseContractEventConfig<typeof aaveYieldSourceABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `eventName` set to `"Approval"`.
 */
export function useAaveYieldSourceApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof aaveYieldSourceABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: aaveYieldSourceABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof aaveYieldSourceABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useAaveYieldSourceApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof aaveYieldSourceABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: aaveYieldSourceABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof aaveYieldSourceABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aaveYieldSourceABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useAaveYieldSourceTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof aaveYieldSourceABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: aaveYieldSourceABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof aaveYieldSourceABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link poolABI}__.
 */
export function usePool(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: poolABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__.
 */
export function usePoolWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof poolABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolABI, TFunctionName>({
    abi: poolABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"supply"`.
 */
export function usePoolSupply<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolABI, "supply">["abi"],
        "supply"
      > & { functionName?: "supply" }
    : UseContractWriteConfig<TMode, typeof poolABI, "supply"> & {
        abi?: never;
        functionName?: "supply";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolABI, "supply">({
    abi: poolABI,
    functionName: "supply",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePoolWithdraw<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolABI, "withdraw">["abi"],
        "withdraw"
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<TMode, typeof poolABI, "withdraw"> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof poolABI, "withdraw">({
    abi: poolABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__.
 */
export function usePreparePoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"supply"`.
 */
export function usePreparePoolSupply(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "supply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "supply",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "supply">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePreparePoolWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof poolABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: poolABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof poolABI, "withdraw">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControl(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: accessControlABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlDefaultAdminRole(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, "DEFAULT_ADMIN_ROLE">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, "DEFAULT_ADMIN_ROLE">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlGetRoleAdmin(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, "getRoleAdmin">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, "getRoleAdmin">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, "hasRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, "hasRole">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, "supportsInterface">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, "supportsInterface">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof accessControlABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, TFunctionName>({
    abi: accessControlABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, "grantRole">["abi"],
        "grantRole"
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<TMode, typeof accessControlABI, "grantRole"> & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, "grantRole">({
    abi: accessControlABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          "renounceRole"
        >["abi"],
        "renounceRole"
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<TMode, typeof accessControlABI, "renounceRole"> & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, "renounceRole">({
    abi: accessControlABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          "revokeRole"
        >["abi"],
        "revokeRole"
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<TMode, typeof accessControlABI, "revokeRole"> & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, "revokeRole">({
    abi: accessControlABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, "grantRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, "grantRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, "renounceRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, "renounceRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, "revokeRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, "revokeRole">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, "RoleAdminChanged">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, "RoleAdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerable(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: accessControlEnumerableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof accessControlEnumerableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    ...config,
  } as UseContractReadConfig<typeof accessControlEnumerableABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlEnumerableDefaultAdminRole(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      "DEFAULT_ADMIN_ROLE"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<typeof accessControlEnumerableABI, "DEFAULT_ADMIN_ROLE">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlEnumerableGetRoleAdmin(
  config: Omit<
    UseContractReadConfig<typeof accessControlEnumerableABI, "getRoleAdmin">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<typeof accessControlEnumerableABI, "getRoleAdmin">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useAccessControlEnumerableGetRoleMember(
  config: Omit<
    UseContractReadConfig<typeof accessControlEnumerableABI, "getRoleMember">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<typeof accessControlEnumerableABI, "getRoleMember">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useAccessControlEnumerableGetRoleMemberCount(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      "getRoleMemberCount"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<typeof accessControlEnumerableABI, "getRoleMemberCount">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlEnumerableHasRole(
  config: Omit<
    UseContractReadConfig<typeof accessControlEnumerableABI, "hasRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<typeof accessControlEnumerableABI, "hasRole">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlEnumerableSupportsInterface(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlEnumerableABI,
      "supportsInterface"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlEnumerableABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof accessControlEnumerableABI, "supportsInterface">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          string
        >["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof accessControlEnumerableABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlEnumerableABI,
    TFunctionName
  >({ abi: accessControlEnumerableABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlEnumerableGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          "grantRole"
        >["abi"],
        "grantRole"
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlEnumerableABI,
        "grantRole"
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlEnumerableABI,
    "grantRole"
  >({
    abi: accessControlEnumerableABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlEnumerableRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          "renounceRole"
        >["abi"],
        "renounceRole"
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlEnumerableABI,
        "renounceRole"
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlEnumerableABI,
    "renounceRole"
  >({
    abi: accessControlEnumerableABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlEnumerableRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlEnumerableABI,
          "revokeRole"
        >["abi"],
        "revokeRole"
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlEnumerableABI,
        "revokeRole"
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlEnumerableABI,
    "revokeRole"
  >({
    abi: accessControlEnumerableABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function usePrepareAccessControlEnumerableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlEnumerableABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlEnumerableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      "grantRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlEnumerableABI, "grantRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlEnumerableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlEnumerableABI, "renounceRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlEnumerableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlEnumerableABI,
      "revokeRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlEnumerableABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlEnumerableABI, "revokeRole">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__.
 */
export function useAccessControlEnumerableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlEnumerableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlEnumerableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlEnumerableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof accessControlEnumerableABI,
      "RoleAdminChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof accessControlEnumerableABI, "RoleAdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlEnumerableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlEnumerableABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof accessControlEnumerableABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlEnumerableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlEnumerableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlEnumerableABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlEnumerableABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof accessControlEnumerableABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bondWrapperABI}__.
 */
export function useBondWrapper(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: bondWrapperABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__.
 */
export function useBondWrapperRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useBondWrapperDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useBondWrapperPermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"allowance"`.
 */
export function useBondWrapperAllowance(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBondWrapperBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"decimals"`.
 */
export function useBondWrapperDecimals(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"deposits"`.
 */
export function useBondWrapperDeposits(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "deposits">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "deposits",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "deposits">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"hyperdrive"`.
 */
export function useBondWrapperHyperdrive(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "hyperdrive">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "hyperdrive",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "hyperdrive">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"mintPercent"`.
 */
export function useBondWrapperMintPercent(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "mintPercent">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "mintPercent",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "mintPercent">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"name"`.
 */
export function useBondWrapperName(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"nonces"`.
 */
export function useBondWrapperNonces(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"symbol"`.
 */
export function useBondWrapperSymbol(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"token"`.
 */
export function useBondWrapperToken(
  config: Omit<
    UseContractReadConfig<typeof bondWrapperABI, "token">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: bondWrapperABI,
    functionName: "token",
    ...config,
  } as UseContractReadConfig<typeof bondWrapperABI, "token">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bondWrapperABI}__.
 */
export function useBondWrapperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bondWrapperABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof bondWrapperABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bondWrapperABI, TFunctionName>({
    abi: bondWrapperABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"approve"`.
 */
export function useBondWrapperApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bondWrapperABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof bondWrapperABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bondWrapperABI, "approve">({
    abi: bondWrapperABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"close"`.
 */
export function useBondWrapperClose<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bondWrapperABI, "close">["abi"],
        "close"
      > & { functionName?: "close" }
    : UseContractWriteConfig<TMode, typeof bondWrapperABI, "close"> & {
        abi?: never;
        functionName?: "close";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bondWrapperABI, "close">({
    abi: bondWrapperABI,
    functionName: "close",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"mint"`.
 */
export function useBondWrapperMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bondWrapperABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof bondWrapperABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bondWrapperABI, "mint">({
    abi: bondWrapperABI,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"permit"`.
 */
export function useBondWrapperPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bondWrapperABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof bondWrapperABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bondWrapperABI, "permit">({
    abi: bondWrapperABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"redeem"`.
 */
export function useBondWrapperRedeem<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bondWrapperABI, "redeem">["abi"],
        "redeem"
      > & { functionName?: "redeem" }
    : UseContractWriteConfig<TMode, typeof bondWrapperABI, "redeem"> & {
        abi?: never;
        functionName?: "redeem";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bondWrapperABI, "redeem">({
    abi: bondWrapperABI,
    functionName: "redeem",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"sweep"`.
 */
export function useBondWrapperSweep<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bondWrapperABI, "sweep">["abi"],
        "sweep"
      > & { functionName?: "sweep" }
    : UseContractWriteConfig<TMode, typeof bondWrapperABI, "sweep"> & {
        abi?: never;
        functionName?: "sweep";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bondWrapperABI, "sweep">({
    abi: bondWrapperABI,
    functionName: "sweep",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"sweepAndRedeem"`.
 */
export function useBondWrapperSweepAndRedeem<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bondWrapperABI,
          "sweepAndRedeem"
        >["abi"],
        "sweepAndRedeem"
      > & { functionName?: "sweepAndRedeem" }
    : UseContractWriteConfig<TMode, typeof bondWrapperABI, "sweepAndRedeem"> & {
        abi?: never;
        functionName?: "sweepAndRedeem";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bondWrapperABI, "sweepAndRedeem">({
    abi: bondWrapperABI,
    functionName: "sweepAndRedeem",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"transfer"`.
 */
export function useBondWrapperTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bondWrapperABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof bondWrapperABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bondWrapperABI, "transfer">({
    abi: bondWrapperABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBondWrapperTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof bondWrapperABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof bondWrapperABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof bondWrapperABI, "transferFrom">({
    abi: bondWrapperABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bondWrapperABI}__.
 */
export function usePrepareBondWrapperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bondWrapperABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bondWrapperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof bondWrapperABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBondWrapperApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bondWrapperABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bondWrapperABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bondWrapperABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"close"`.
 */
export function usePrepareBondWrapperClose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bondWrapperABI, "close">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bondWrapperABI,
    functionName: "close",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bondWrapperABI, "close">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareBondWrapperMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bondWrapperABI, "mint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bondWrapperABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bondWrapperABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareBondWrapperPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bondWrapperABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bondWrapperABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bondWrapperABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"redeem"`.
 */
export function usePrepareBondWrapperRedeem(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bondWrapperABI, "redeem">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bondWrapperABI,
    functionName: "redeem",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bondWrapperABI, "redeem">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"sweep"`.
 */
export function usePrepareBondWrapperSweep(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bondWrapperABI, "sweep">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bondWrapperABI,
    functionName: "sweep",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bondWrapperABI, "sweep">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"sweepAndRedeem"`.
 */
export function usePrepareBondWrapperSweepAndRedeem(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bondWrapperABI, "sweepAndRedeem">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bondWrapperABI,
    functionName: "sweepAndRedeem",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bondWrapperABI, "sweepAndRedeem">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareBondWrapperTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bondWrapperABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bondWrapperABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bondWrapperABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bondWrapperABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBondWrapperTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bondWrapperABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: bondWrapperABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof bondWrapperABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bondWrapperABI}__.
 */
export function useBondWrapperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bondWrapperABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: bondWrapperABI,
    ...config,
  } as UseContractEventConfig<typeof bondWrapperABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bondWrapperABI}__ and `eventName` set to `"Approval"`.
 */
export function useBondWrapperApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof bondWrapperABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: bondWrapperABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof bondWrapperABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bondWrapperABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBondWrapperTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof bondWrapperABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: bondWrapperABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof bondWrapperABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: erc165ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, "supportsInterface">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, "supportsInterface">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, "approve">({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "decreaseAllowance">["abi"],
        "decreaseAllowance"
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "decreaseAllowance"> & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, "decreaseAllowance">({
    abi: erc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "increaseAllowance">["abi"],
        "increaseAllowance"
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "increaseAllowance"> & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, "increaseAllowance">({
    abi: erc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, "transfer">({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, "transferFrom">({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20Burnable(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: erc20BurnableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableAllowance(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableDecimals(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableName(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, TFunctionName>({
    abi: erc20BurnableABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, "approve">({
    abi: erc20BurnableABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableBurn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, "burn">["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, "burn"> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, "burn">({
    abi: erc20BurnableABI,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableBurnFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, "burnFrom">["abi"],
        "burnFrom"
      > & { functionName?: "burnFrom" }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, "burnFrom"> & {
        abi?: never;
        functionName?: "burnFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, "burnFrom">({
    abi: erc20BurnableABI,
    functionName: "burnFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "decreaseAllowance"
        >["abi"],
        "decreaseAllowance"
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20BurnableABI,
        "decreaseAllowance"
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, "decreaseAllowance">({
    abi: erc20BurnableABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "increaseAllowance"
        >["abi"],
        "increaseAllowance"
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20BurnableABI,
        "increaseAllowance"
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, "increaseAllowance">({
    abi: erc20BurnableABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20BurnableABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, "transfer">({
    abi: erc20BurnableABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof erc20BurnableABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20BurnableABI, "transferFrom">({
    abi: erc20BurnableABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function usePrepareErc20BurnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burn">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burnFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "burnFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burnFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ForwarderABI}__.
 */
export function useErc20Forwarder(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: erc20ForwarderABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__.
 */
export function useErc20ForwarderRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20ForwarderDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useErc20ForwarderPermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20ForwarderAllowance(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20ForwarderBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20ForwarderDecimals(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"name"`.
 */
export function useErc20ForwarderName(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20ForwarderNonces(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20ForwarderSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"token"`.
 */
export function useErc20ForwarderToken(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, "token">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    functionName: "token",
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, "token">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"tokenId"`.
 */
export function useErc20ForwarderTokenId(
  config: Omit<
    UseContractReadConfig<typeof erc20ForwarderABI, "tokenId">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ForwarderABI,
    functionName: "tokenId",
    ...config,
  } as UseContractReadConfig<typeof erc20ForwarderABI, "tokenId">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ForwarderABI}__.
 */
export function useErc20ForwarderWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ForwarderABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ForwarderABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ForwarderABI, TFunctionName>({
    abi: erc20ForwarderABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20ForwarderApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ForwarderABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc20ForwarderABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ForwarderABI, "approve">({
    abi: erc20ForwarderABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20ForwarderPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ForwarderABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof erc20ForwarderABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ForwarderABI, "permit">({
    abi: erc20ForwarderABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20ForwarderTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ForwarderABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof erc20ForwarderABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ForwarderABI, "transfer">({
    abi: erc20ForwarderABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20ForwarderTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20ForwarderABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20ForwarderABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ForwarderABI, "transferFrom">({
    abi: erc20ForwarderABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ForwarderABI}__.
 */
export function usePrepareErc20ForwarderWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ForwarderABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ForwarderABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ForwarderABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20ForwarderApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ForwarderABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ForwarderABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ForwarderABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20ForwarderPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ForwarderABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ForwarderABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ForwarderABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20ForwarderTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ForwarderABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ForwarderABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ForwarderABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ForwarderABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20ForwarderTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ForwarderABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ForwarderABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ForwarderABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ForwarderABI}__.
 */
export function useErc20ForwarderEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ForwarderABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ForwarderABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ForwarderABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ForwarderABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ForwarderApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ForwarderABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ForwarderABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20ForwarderABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ForwarderABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20ForwarderTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ForwarderABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ForwarderABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20ForwarderABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20MintableABI}__.
 */
export function useErc20Mintable(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: erc20MintableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MintableABI}__.
 */
export function useErc20MintableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20MintableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MintableABI,
    ...config,
  } as UseContractReadConfig<typeof erc20MintableABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20MintableAllowance(
  config: Omit<
    UseContractReadConfig<typeof erc20MintableABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MintableABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20MintableABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20MintableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20MintableABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MintableABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20MintableABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20MintableDecimals(
  config: Omit<
    UseContractReadConfig<typeof erc20MintableABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MintableABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20MintableABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20MintableName(
  config: Omit<
    UseContractReadConfig<typeof erc20MintableABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MintableABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20MintableABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20MintableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc20MintableABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MintableABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20MintableABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20MintableTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20MintableABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MintableABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20MintableABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MintableABI}__.
 */
export function useErc20MintableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20MintableABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20MintableABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20MintableABI, TFunctionName>({
    abi: erc20MintableABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20MintableApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20MintableABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc20MintableABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20MintableABI, "approve">({
    abi: erc20MintableABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20MintableBurn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20MintableABI, "burn">["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<TMode, typeof erc20MintableABI, "burn"> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20MintableABI, "burn">({
    abi: erc20MintableABI,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20MintableDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20MintableABI,
          "decreaseAllowance"
        >["abi"],
        "decreaseAllowance"
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20MintableABI,
        "decreaseAllowance"
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20MintableABI, "decreaseAllowance">({
    abi: erc20MintableABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20MintableIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20MintableABI,
          "increaseAllowance"
        >["abi"],
        "increaseAllowance"
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20MintableABI,
        "increaseAllowance"
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20MintableABI, "increaseAllowance">({
    abi: erc20MintableABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"mint"`.
 */
export function useErc20MintableMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20MintableABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof erc20MintableABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20MintableABI, "mint">({
    abi: erc20MintableABI,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20MintableTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20MintableABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof erc20MintableABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20MintableABI, "transfer">({
    abi: erc20MintableABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20MintableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20MintableABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof erc20MintableABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20MintableABI, "transferFrom">({
    abi: erc20MintableABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MintableABI}__.
 */
export function usePrepareErc20MintableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MintableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MintableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MintableABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20MintableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MintableABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MintableABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MintableABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20MintableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MintableABI, "burn">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MintableABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MintableABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20MintableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MintableABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MintableABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MintableABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20MintableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MintableABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MintableABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MintableABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareErc20MintableMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MintableABI, "mint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MintableABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MintableABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20MintableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MintableABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MintableABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MintableABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MintableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20MintableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MintableABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MintableABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MintableABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MintableABI}__.
 */
export function useErc20MintableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20MintableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MintableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20MintableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MintableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20MintableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20MintableABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MintableABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20MintableABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MintableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20MintableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20MintableABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MintableABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20MintableABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PausableABI}__.
 */
export function useErc20Pausable(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: erc20PausableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__.
 */
export function useErc20PausableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PausableAllowance(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PausableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PausableDecimals(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PausableName(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"paused"`.
 */
export function useErc20PausablePaused(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, "paused">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: "paused",
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, "paused">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PausableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PausableTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20PausableABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PausableABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20PausableABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__.
 */
export function useErc20PausableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PausableABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20PausableABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, TFunctionName>({
    abi: erc20PausableABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PausableApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PausableABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc20PausableABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, "approve">({
    abi: erc20PausableABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PausableDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PausableABI,
          "decreaseAllowance"
        >["abi"],
        "decreaseAllowance"
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PausableABI,
        "decreaseAllowance"
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, "decreaseAllowance">({
    abi: erc20PausableABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PausableIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PausableABI,
          "increaseAllowance"
        >["abi"],
        "increaseAllowance"
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PausableABI,
        "increaseAllowance"
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, "increaseAllowance">({
    abi: erc20PausableABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PausableTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PausableABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof erc20PausableABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, "transfer">({
    abi: erc20PausableABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PausableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PausableABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof erc20PausableABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PausableABI, "transferFrom">({
    abi: erc20PausableABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__.
 */
export function usePrepareErc20PausableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PausableABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PausableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PausableABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PausableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PausableABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PausableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PausableABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PausableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PausableABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PausableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PausableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PausableABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PausableABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PausableABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PausableABI}__.
 */
export function useErc20PausableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PausableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PausableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PausableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PausableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PausableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PausableABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PausableABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20PausableABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PausableABI}__ and `eventName` set to `"Paused"`.
 */
export function useErc20PausablePausedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PausableABI, "Paused">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PausableABI,
    eventName: "Paused",
    ...config,
  } as UseContractEventConfig<typeof erc20PausableABI, "Paused">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PausableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PausableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PausableABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PausableABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20PausableABI, "Transfer">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PausableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useErc20PausableUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PausableABI, "Unpaused">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PausableABI,
    eventName: "Unpaused",
    ...config,
  } as UseContractEventConfig<typeof erc20PausableABI, "Unpaused">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20Permit(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: erc20PermitABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useErc20PermitPermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitAllowance(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitDecimals(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitName(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitNonces(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc20PermitABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20PermitABI, "symbol">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, TFunctionName>({
    abi: erc20PermitABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, "approve">({
    abi: erc20PermitABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, "permit">({
    abi: erc20PermitABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20PermitABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, "transfer">({
    abi: erc20PermitABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof erc20PermitABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitABI, "transferFrom">({
    abi: erc20PermitABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function usePrepareErc20PermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PermitABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__.
 */
export function useErc20PermitEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PermitABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20PermitABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20PermitABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__.
 */
export function useErc20PresetFixedSupply(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: erc20PresetFixedSupplyABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__.
 */
export function useErc20PresetFixedSupplyRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetFixedSupplyABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PresetFixedSupplyAllowance(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PresetFixedSupplyBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PresetFixedSupplyDecimals(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PresetFixedSupplyName(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PresetFixedSupplySymbol(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PresetFixedSupplyTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__.
 */
export function useErc20PresetFixedSupplyWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          string
        >["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetFixedSupplyABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetFixedSupplyABI,
    TFunctionName
  >({ abi: erc20PresetFixedSupplyABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PresetFixedSupplyApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "approve"
        >["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetFixedSupplyABI,
        "approve"
      > & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetFixedSupplyABI, "approve">({
    abi: erc20PresetFixedSupplyABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20PresetFixedSupplyBurn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "burn"
        >["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetFixedSupplyABI,
        "burn"
      > & {
        abi?: never;
        functionName?: "burn";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetFixedSupplyABI, "burn">({
    abi: erc20PresetFixedSupplyABI,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20PresetFixedSupplyBurnFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "burnFrom"
        >["abi"],
        "burnFrom"
      > & { functionName?: "burnFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetFixedSupplyABI,
        "burnFrom"
      > & {
        abi?: never;
        functionName?: "burnFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetFixedSupplyABI, "burnFrom">({
    abi: erc20PresetFixedSupplyABI,
    functionName: "burnFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PresetFixedSupplyDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "decreaseAllowance"
        >["abi"],
        "decreaseAllowance"
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetFixedSupplyABI,
        "decreaseAllowance"
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetFixedSupplyABI,
    "decreaseAllowance"
  >({
    abi: erc20PresetFixedSupplyABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PresetFixedSupplyIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "increaseAllowance"
        >["abi"],
        "increaseAllowance"
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetFixedSupplyABI,
        "increaseAllowance"
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetFixedSupplyABI,
    "increaseAllowance"
  >({
    abi: erc20PresetFixedSupplyABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PresetFixedSupplyTransfer<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "transfer"
        >["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetFixedSupplyABI,
        "transfer"
      > & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetFixedSupplyABI, "transfer">({
    abi: erc20PresetFixedSupplyABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PresetFixedSupplyTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetFixedSupplyABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetFixedSupplyABI,
    "transferFrom"
  >({
    abi: erc20PresetFixedSupplyABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__.
 */
export function usePrepareErc20PresetFixedSupplyWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetFixedSupplyABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PresetFixedSupplyApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20PresetFixedSupplyBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "burn">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20PresetFixedSupplyBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "burnFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "burnFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "burnFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PresetFixedSupplyDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetFixedSupplyABI,
      "decreaseAllowance"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PresetFixedSupplyIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetFixedSupplyABI,
      "increaseAllowance"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PresetFixedSupplyTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PresetFixedSupplyTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetFixedSupplyABI,
      "transferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__.
 */
export function useErc20PresetFixedSupplyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetFixedSupplyABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetFixedSupplyABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PresetFixedSupplyABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PresetFixedSupplyApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetFixedSupplyABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetFixedSupplyABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetFixedSupplyABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PresetFixedSupplyTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetFixedSupplyABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetFixedSupplyABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetFixedSupplyABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__.
 */
export function useErc20PresetMinterPauser(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: erc20PresetMinterPauserABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__.
 */
export function useErc20PresetMinterPauserRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useErc20PresetMinterPauserDefaultAdminRole(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      "DEFAULT_ADMIN_ROLE"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "DEFAULT_ADMIN_ROLE">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useErc20PresetMinterPauserMinterRole(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "MINTER_ROLE">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "MINTER_ROLE",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "MINTER_ROLE">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"PAUSER_ROLE"`.
 */
export function useErc20PresetMinterPauserPauserRole(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "PAUSER_ROLE">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "PAUSER_ROLE",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "PAUSER_ROLE">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PresetMinterPauserAllowance(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PresetMinterPauserBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PresetMinterPauserDecimals(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useErc20PresetMinterPauserGetRoleAdmin(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "getRoleAdmin">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "getRoleAdmin">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useErc20PresetMinterPauserGetRoleMember(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "getRoleMember">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "getRoleMember">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useErc20PresetMinterPauserGetRoleMemberCount(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      "getRoleMemberCount"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "getRoleMemberCount">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"hasRole"`.
 */
export function useErc20PresetMinterPauserHasRole(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "hasRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "hasRole">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PresetMinterPauserName(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"paused"`.
 */
export function useErc20PresetMinterPauserPaused(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "paused">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "paused",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "paused">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc20PresetMinterPauserSupportsInterface(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetMinterPauserABI,
      "supportsInterface"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "supportsInterface">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PresetMinterPauserSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PresetMinterPauserTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20PresetMinterPauserABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetMinterPauserABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetMinterPauserABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__.
 */
export function useErc20PresetMinterPauserWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          string
        >["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    TFunctionName
  >({ abi: erc20PresetMinterPauserABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PresetMinterPauserApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "approve"
        >["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "approve"
      > & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, "approve">({
    abi: erc20PresetMinterPauserABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20PresetMinterPauserBurn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "burn"
        >["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "burn"
      > & {
        abi?: never;
        functionName?: "burn";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, "burn">({
    abi: erc20PresetMinterPauserABI,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20PresetMinterPauserBurnFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "burnFrom"
        >["abi"],
        "burnFrom"
      > & { functionName?: "burnFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "burnFrom"
      > & {
        abi?: never;
        functionName?: "burnFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, "burnFrom">(
    {
      abi: erc20PresetMinterPauserABI,
      functionName: "burnFrom",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PresetMinterPauserDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "decreaseAllowance"
        >["abi"],
        "decreaseAllowance"
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "decreaseAllowance"
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    "decreaseAllowance"
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"grantRole"`.
 */
export function useErc20PresetMinterPauserGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "grantRole"
        >["abi"],
        "grantRole"
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "grantRole"
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    "grantRole"
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PresetMinterPauserIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "increaseAllowance"
        >["abi"],
        "increaseAllowance"
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "increaseAllowance"
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    "increaseAllowance"
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"mint"`.
 */
export function useErc20PresetMinterPauserMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "mint"
        >["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "mint"
      > & {
        abi?: never;
        functionName?: "mint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, "mint">({
    abi: erc20PresetMinterPauserABI,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"pause"`.
 */
export function useErc20PresetMinterPauserPause<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "pause"
        >["abi"],
        "pause"
      > & { functionName?: "pause" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "pause"
      > & {
        abi?: never;
        functionName?: "pause";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, "pause">({
    abi: erc20PresetMinterPauserABI,
    functionName: "pause",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useErc20PresetMinterPauserRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "renounceRole"
        >["abi"],
        "renounceRole"
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "renounceRole"
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    "renounceRole"
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useErc20PresetMinterPauserRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "revokeRole"
        >["abi"],
        "revokeRole"
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "revokeRole"
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    "revokeRole"
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PresetMinterPauserTransfer<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "transfer"
        >["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "transfer"
      > & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, "transfer">(
    {
      abi: erc20PresetMinterPauserABI,
      functionName: "transfer",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PresetMinterPauserTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PresetMinterPauserABI,
    "transferFrom"
  >({
    abi: erc20PresetMinterPauserABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"unpause"`.
 */
export function useErc20PresetMinterPauserUnpause<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PresetMinterPauserABI,
          "unpause"
        >["abi"],
        "unpause"
      > & { functionName?: "unpause" }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PresetMinterPauserABI,
        "unpause"
      > & {
        abi?: never;
        functionName?: "unpause";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PresetMinterPauserABI, "unpause">({
    abi: erc20PresetMinterPauserABI,
    functionName: "unpause",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__.
 */
export function usePrepareErc20PresetMinterPauserWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PresetMinterPauserApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20PresetMinterPauserBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "burn">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20PresetMinterPauserBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      "burnFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "burnFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "burnFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PresetMinterPauserDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      "decreaseAllowance"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareErc20PresetMinterPauserGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      "grantRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "grantRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PresetMinterPauserIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      "increaseAllowance"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareErc20PresetMinterPauserMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "mint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareErc20PresetMinterPauserPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "pause">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "pause",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "pause">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareErc20PresetMinterPauserRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "renounceRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareErc20PresetMinterPauserRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      "revokeRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "revokeRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PresetMinterPauserTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      "transfer"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PresetMinterPauserTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetMinterPauserABI,
      "transferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareErc20PresetMinterPauserUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "unpause">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetMinterPauserABI,
    functionName: "unpause",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetMinterPauserABI, "unpause">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__.
 */
export function useErc20PresetMinterPauserEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PresetMinterPauserApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"Paused"`.
 */
export function useErc20PresetMinterPauserPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, "Paused">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: "Paused",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, "Paused">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useErc20PresetMinterPauserRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20PresetMinterPauserABI,
      "RoleAdminChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, "RoleAdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useErc20PresetMinterPauserRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useErc20PresetMinterPauserRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PresetMinterPauserTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, "Transfer">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetMinterPauserABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useErc20PresetMinterPauserUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetMinterPauserABI, "Unpaused">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetMinterPauserABI,
    eventName: "Unpaused",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetMinterPauserABI, "Unpaused">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link errorsABI}__.
 */
export function useErrors(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: errorsABI, ...config });
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link fixedPointMathABI}__.
 */
export function useFixedPointMath(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: fixedPointMathABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fixedPointMathABI}__.
 */
export function useFixedPointMathRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof fixedPointMathABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: fixedPointMathABI,
    ...config,
  } as UseContractReadConfig<typeof fixedPointMathABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fixedPointMathABI}__ and `functionName` set to `"ONE_18"`.
 */
export function useFixedPointMathOne_18(
  config: Omit<
    UseContractReadConfig<typeof fixedPointMathABI, "ONE_18">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: fixedPointMathABI,
    functionName: "ONE_18",
    ...config,
  } as UseContractReadConfig<typeof fixedPointMathABI, "ONE_18">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link forwarderFactoryABI}__.
 */
export function useForwarderFactory(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: forwarderFactoryABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link forwarderFactoryABI}__.
 */
export function useForwarderFactoryRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof forwarderFactoryABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: forwarderFactoryABI,
    ...config,
  } as UseContractReadConfig<typeof forwarderFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link forwarderFactoryABI}__ and `functionName` set to `"ERC20LINK_HASH"`.
 */
export function useForwarderFactoryErc20LinkHash(
  config: Omit<
    UseContractReadConfig<typeof forwarderFactoryABI, "ERC20LINK_HASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: forwarderFactoryABI,
    functionName: "ERC20LINK_HASH",
    ...config,
  } as UseContractReadConfig<typeof forwarderFactoryABI, "ERC20LINK_HASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link forwarderFactoryABI}__ and `functionName` set to `"getDeployDetails"`.
 */
export function useForwarderFactoryGetDeployDetails(
  config: Omit<
    UseContractReadConfig<typeof forwarderFactoryABI, "getDeployDetails">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: forwarderFactoryABI,
    functionName: "getDeployDetails",
    ...config,
  } as UseContractReadConfig<typeof forwarderFactoryABI, "getDeployDetails">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link forwarderFactoryABI}__ and `functionName` set to `"getForwarder"`.
 */
export function useForwarderFactoryGetForwarder(
  config: Omit<
    UseContractReadConfig<typeof forwarderFactoryABI, "getForwarder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: forwarderFactoryABI,
    functionName: "getForwarder",
    ...config,
  } as UseContractReadConfig<typeof forwarderFactoryABI, "getForwarder">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link forwarderFactoryABI}__.
 */
export function useForwarderFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof forwarderFactoryABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof forwarderFactoryABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof forwarderFactoryABI, TFunctionName>({
    abi: forwarderFactoryABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link forwarderFactoryABI}__ and `functionName` set to `"create"`.
 */
export function useForwarderFactoryCreate<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof forwarderFactoryABI, "create">["abi"],
        "create"
      > & { functionName?: "create" }
    : UseContractWriteConfig<TMode, typeof forwarderFactoryABI, "create"> & {
        abi?: never;
        functionName?: "create";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof forwarderFactoryABI, "create">({
    abi: forwarderFactoryABI,
    functionName: "create",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link forwarderFactoryABI}__.
 */
export function usePrepareForwarderFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof forwarderFactoryABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: forwarderFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof forwarderFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link forwarderFactoryABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareForwarderFactoryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof forwarderFactoryABI, "create">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: forwarderFactoryABI,
    functionName: "create",
    ...config,
  } as UsePrepareContractWriteConfig<typeof forwarderFactoryABI, "create">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link hyperdriveABI}__.
 */
export function useHyperdrive(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: hyperdriveABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__.
 */
export function useHyperdriveRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useHyperdriveDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useHyperdrivePermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useHyperdriveBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"baseToken"`.
 */
export function useHyperdriveBaseToken(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "baseToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "baseToken",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "baseToken">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"bondReserves"`.
 */
export function useHyperdriveBondReserves(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "bondReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "bondReserves",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "bondReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"checkpointDuration"`.
 */
export function useHyperdriveCheckpointDuration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "checkpointDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "checkpointDuration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "checkpointDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useHyperdriveCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "checkpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "checkpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "checkpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"curveFee"`.
 */
export function useHyperdriveCurveFee(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "curveFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "curveFee",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "curveFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"factory"`.
 */
export function useHyperdriveFactory(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "factory">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "factory">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"flatFee"`.
 */
export function useHyperdriveFlatFee(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "flatFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "flatFee",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "flatFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"getPoolConfiguration"`.
 */
export function useHyperdriveGetPoolConfiguration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "getPoolConfiguration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "getPoolConfiguration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "getPoolConfiguration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"getPoolInfo"`.
 */
export function useHyperdriveGetPoolInfo(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "getPoolInfo">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "getPoolInfo",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "getPoolInfo">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"initialSharePrice"`.
 */
export function useHyperdriveInitialSharePrice(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "initialSharePrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "initialSharePrice",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "initialSharePrice">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useHyperdriveIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"linkerCodeHash"`.
 */
export function useHyperdriveLinkerCodeHash(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "linkerCodeHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "linkerCodeHash",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "linkerCodeHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"longAverageMaturityTime"`.
 */
export function useHyperdriveLongAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "longAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "longAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "longAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"longBaseVolume"`.
 */
export function useHyperdriveLongBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "longBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "longBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "longBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"longBaseVolumeCheckpoints"`.
 */
export function useHyperdriveLongBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "longBaseVolumeCheckpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "longBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "longBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"longWithdrawalShareProceeds"`.
 */
export function useHyperdriveLongWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "longWithdrawalShareProceeds">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "longWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "longWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"longWithdrawalSharesOutstanding"`.
 */
export function useHyperdriveLongWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveABI,
      "longWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "longWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "longWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"longsOutstanding"`.
 */
export function useHyperdriveLongsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "longsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "longsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "longsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"name"`.
 */
export function useHyperdriveName(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"nonces"`.
 */
export function useHyperdriveNonces(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useHyperdrivePerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"positionDuration"`.
 */
export function useHyperdrivePositionDuration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "positionDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "positionDuration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "positionDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"shareReserves"`.
 */
export function useHyperdriveShareReserves(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "shareReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "shareReserves",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "shareReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"shortAverageMaturityTime"`.
 */
export function useHyperdriveShortAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "shortAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "shortAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "shortAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"shortBaseVolume"`.
 */
export function useHyperdriveShortBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "shortBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "shortBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "shortBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"shortBaseVolumeCheckpoints"`.
 */
export function useHyperdriveShortBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "shortBaseVolumeCheckpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "shortBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "shortBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"shortWithdrawalShareProceeds"`.
 */
export function useHyperdriveShortWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "shortWithdrawalShareProceeds">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "shortWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "shortWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"shortWithdrawalSharesOutstanding"`.
 */
export function useHyperdriveShortWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveABI,
      "shortWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "shortWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "shortWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"shortsOutstanding"`.
 */
export function useHyperdriveShortsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "shortsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "shortsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "shortsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"symbol"`.
 */
export function useHyperdriveSymbol(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"timeStretch"`.
 */
export function useHyperdriveTimeStretch(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "timeStretch">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "timeStretch",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "timeStretch">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useHyperdriveTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__.
 */
export function useHyperdriveWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, TFunctionName>({
    abi: hyperdriveABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function useHyperdriveAddLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, "addLiquidity">["abi"],
        "addLiquidity"
      > & { functionName?: "addLiquidity" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "addLiquidity"> & {
        abi?: never;
        functionName?: "addLiquidity";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "addLiquidity">({
    abi: hyperdriveABI,
    functionName: "addLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function useHyperdriveBatchTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveABI,
          "batchTransferFrom"
        >["abi"],
        "batchTransferFrom"
      > & { functionName?: "batchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveABI,
        "batchTransferFrom"
      > & {
        abi?: never;
        functionName?: "batchTransferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "batchTransferFrom">({
    abi: hyperdriveABI,
    functionName: "batchTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"checkpoint"`.
 */
export function useHyperdriveCheckpoint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, "checkpoint">["abi"],
        "checkpoint"
      > & { functionName?: "checkpoint" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "checkpoint"> & {
        abi?: never;
        functionName?: "checkpoint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "checkpoint">({
    abi: hyperdriveABI,
    functionName: "checkpoint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"closeLong"`.
 */
export function useHyperdriveCloseLong<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, "closeLong">["abi"],
        "closeLong"
      > & { functionName?: "closeLong" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "closeLong"> & {
        abi?: never;
        functionName?: "closeLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "closeLong">({
    abi: hyperdriveABI,
    functionName: "closeLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"closeShort"`.
 */
export function useHyperdriveCloseShort<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, "closeShort">["abi"],
        "closeShort"
      > & { functionName?: "closeShort" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "closeShort"> & {
        abi?: never;
        functionName?: "closeShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "closeShort">({
    abi: hyperdriveABI,
    functionName: "closeShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"initialize"`.
 */
export function useHyperdriveInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "initialize">({
    abi: hyperdriveABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"openLong"`.
 */
export function useHyperdriveOpenLong<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, "openLong">["abi"],
        "openLong"
      > & { functionName?: "openLong" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "openLong"> & {
        abi?: never;
        functionName?: "openLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "openLong">({
    abi: hyperdriveABI,
    functionName: "openLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"openShort"`.
 */
export function useHyperdriveOpenShort<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, "openShort">["abi"],
        "openShort"
      > & { functionName?: "openShort" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "openShort"> & {
        abi?: never;
        functionName?: "openShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "openShort">({
    abi: hyperdriveABI,
    functionName: "openShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"permitForAll"`.
 */
export function useHyperdrivePermitForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, "permitForAll">["abi"],
        "permitForAll"
      > & { functionName?: "permitForAll" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "permitForAll"> & {
        abi?: never;
        functionName?: "permitForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "permitForAll">({
    abi: hyperdriveABI,
    functionName: "permitForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"redeemWithdrawalShares"`.
 */
export function useHyperdriveRedeemWithdrawalShares<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveABI,
          "redeemWithdrawalShares"
        >["abi"],
        "redeemWithdrawalShares"
      > & { functionName?: "redeemWithdrawalShares" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveABI,
        "redeemWithdrawalShares"
      > & {
        abi?: never;
        functionName?: "redeemWithdrawalShares";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof hyperdriveABI,
    "redeemWithdrawalShares"
  >({
    abi: hyperdriveABI,
    functionName: "redeemWithdrawalShares",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function useHyperdriveRemoveLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveABI,
          "removeLiquidity"
        >["abi"],
        "removeLiquidity"
      > & { functionName?: "removeLiquidity" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "removeLiquidity"> & {
        abi?: never;
        functionName?: "removeLiquidity";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "removeLiquidity">({
    abi: hyperdriveABI,
    functionName: "removeLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"setApproval"`.
 */
export function useHyperdriveSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, "setApproval">["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "setApproval"> & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "setApproval">({
    abi: hyperdriveABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useHyperdriveSetApprovalBridge<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "setApprovalBridge">({
    abi: hyperdriveABI,
    functionName: "setApprovalBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useHyperdriveSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "setApprovalForAll">({
    abi: hyperdriveABI,
    functionName: "setApprovalForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useHyperdriveTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof hyperdriveABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "transferFrom">({
    abi: hyperdriveABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useHyperdriveTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveABI, "transferFromBridge">({
    abi: hyperdriveABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__.
 */
export function usePrepareHyperdriveWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function usePrepareHyperdriveAddLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "addLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "addLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "addLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function usePrepareHyperdriveBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "batchTransferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "batchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "batchTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"checkpoint"`.
 */
export function usePrepareHyperdriveCheckpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "checkpoint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "checkpoint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "checkpoint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"closeLong"`.
 */
export function usePrepareHyperdriveCloseLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "closeLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "closeLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "closeLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"closeShort"`.
 */
export function usePrepareHyperdriveCloseShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "closeShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "closeShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "closeShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareHyperdriveInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"openLong"`.
 */
export function usePrepareHyperdriveOpenLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "openLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "openLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "openLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"openShort"`.
 */
export function usePrepareHyperdriveOpenShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "openShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "openShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "openShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"permitForAll"`.
 */
export function usePrepareHyperdrivePermitForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "permitForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "permitForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "permitForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"redeemWithdrawalShares"`.
 */
export function usePrepareHyperdriveRedeemWithdrawalShares(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveABI,
      "redeemWithdrawalShares"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "redeemWithdrawalShares",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "redeemWithdrawalShares">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function usePrepareHyperdriveRemoveLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "removeLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "removeLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "removeLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareHyperdriveSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareHyperdriveSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "setApprovalBridge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareHyperdriveSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "setApprovalForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareHyperdriveTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareHyperdriveTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveABI, "transferFromBridge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveABI}__.
 */
export function useHyperdriveEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveABI,
    ...config,
  } as UseContractEventConfig<typeof hyperdriveABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveABI}__ and `eventName` set to `"Approval"`.
 */
export function useHyperdriveApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useHyperdriveApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useHyperdriveTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link hyperdriveBaseABI}__.
 */
export function useHyperdriveBase(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: hyperdriveBaseABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__.
 */
export function useHyperdriveBaseRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useHyperdriveBaseDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useHyperdriveBasePermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useHyperdriveBaseBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"baseToken"`.
 */
export function useHyperdriveBaseBaseToken(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "baseToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "baseToken",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "baseToken">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"bondReserves"`.
 */
export function useHyperdriveBaseBondReserves(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "bondReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "bondReserves",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "bondReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"checkpointDuration"`.
 */
export function useHyperdriveBaseCheckpointDuration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "checkpointDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "checkpointDuration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "checkpointDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useHyperdriveBaseCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "checkpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "checkpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "checkpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"curveFee"`.
 */
export function useHyperdriveBaseCurveFee(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "curveFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "curveFee",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "curveFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"factory"`.
 */
export function useHyperdriveBaseFactory(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "factory">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "factory">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"flatFee"`.
 */
export function useHyperdriveBaseFlatFee(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "flatFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "flatFee",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "flatFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"getPoolConfiguration"`.
 */
export function useHyperdriveBaseGetPoolConfiguration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "getPoolConfiguration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "getPoolConfiguration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "getPoolConfiguration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"getPoolInfo"`.
 */
export function useHyperdriveBaseGetPoolInfo(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "getPoolInfo">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "getPoolInfo",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "getPoolInfo">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"initialSharePrice"`.
 */
export function useHyperdriveBaseInitialSharePrice(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "initialSharePrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "initialSharePrice",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "initialSharePrice">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useHyperdriveBaseIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"linkerCodeHash"`.
 */
export function useHyperdriveBaseLinkerCodeHash(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "linkerCodeHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "linkerCodeHash",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "linkerCodeHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"longAverageMaturityTime"`.
 */
export function useHyperdriveBaseLongAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "longAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "longAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "longAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"longBaseVolume"`.
 */
export function useHyperdriveBaseLongBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "longBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "longBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "longBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"longBaseVolumeCheckpoints"`.
 */
export function useHyperdriveBaseLongBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveBaseABI,
      "longBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "longBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "longBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"longWithdrawalShareProceeds"`.
 */
export function useHyperdriveBaseLongWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveBaseABI,
      "longWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "longWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "longWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"longWithdrawalSharesOutstanding"`.
 */
export function useHyperdriveBaseLongWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveBaseABI,
      "longWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "longWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "longWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"longsOutstanding"`.
 */
export function useHyperdriveBaseLongsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "longsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "longsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "longsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"name"`.
 */
export function useHyperdriveBaseName(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"nonces"`.
 */
export function useHyperdriveBaseNonces(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useHyperdriveBasePerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"positionDuration"`.
 */
export function useHyperdriveBasePositionDuration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "positionDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "positionDuration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "positionDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"shareReserves"`.
 */
export function useHyperdriveBaseShareReserves(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "shareReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "shareReserves",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "shareReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"shortAverageMaturityTime"`.
 */
export function useHyperdriveBaseShortAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "shortAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "shortAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "shortAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"shortBaseVolume"`.
 */
export function useHyperdriveBaseShortBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "shortBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "shortBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "shortBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"shortBaseVolumeCheckpoints"`.
 */
export function useHyperdriveBaseShortBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveBaseABI,
      "shortBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "shortBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "shortBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"shortWithdrawalShareProceeds"`.
 */
export function useHyperdriveBaseShortWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveBaseABI,
      "shortWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "shortWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "shortWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"shortWithdrawalSharesOutstanding"`.
 */
export function useHyperdriveBaseShortWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveBaseABI,
      "shortWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "shortWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "shortWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"shortsOutstanding"`.
 */
export function useHyperdriveBaseShortsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "shortsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "shortsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "shortsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"symbol"`.
 */
export function useHyperdriveBaseSymbol(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"timeStretch"`.
 */
export function useHyperdriveBaseTimeStretch(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "timeStretch">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "timeStretch",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "timeStretch">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useHyperdriveBaseTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveBaseABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveBaseABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveBaseABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__.
 */
export function useHyperdriveBaseWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveBaseABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof hyperdriveBaseABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveBaseABI, TFunctionName>({
    abi: hyperdriveBaseABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function useHyperdriveBaseBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveBaseABI,
          "batchTransferFrom"
        >["abi"],
        "batchTransferFrom"
      > & { functionName?: "batchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveBaseABI,
        "batchTransferFrom"
      > & {
        abi?: never;
        functionName?: "batchTransferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveBaseABI, "batchTransferFrom">(
    {
      abi: hyperdriveBaseABI,
      functionName: "batchTransferFrom",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"checkpoint"`.
 */
export function useHyperdriveBaseCheckpoint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveBaseABI,
          "checkpoint"
        >["abi"],
        "checkpoint"
      > & { functionName?: "checkpoint" }
    : UseContractWriteConfig<TMode, typeof hyperdriveBaseABI, "checkpoint"> & {
        abi?: never;
        functionName?: "checkpoint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveBaseABI, "checkpoint">({
    abi: hyperdriveBaseABI,
    functionName: "checkpoint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"permitForAll"`.
 */
export function useHyperdriveBasePermitForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveBaseABI,
          "permitForAll"
        >["abi"],
        "permitForAll"
      > & { functionName?: "permitForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveBaseABI,
        "permitForAll"
      > & {
        abi?: never;
        functionName?: "permitForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveBaseABI, "permitForAll">({
    abi: hyperdriveBaseABI,
    functionName: "permitForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"setApproval"`.
 */
export function useHyperdriveBaseSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveBaseABI,
          "setApproval"
        >["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<TMode, typeof hyperdriveBaseABI, "setApproval"> & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveBaseABI, "setApproval">({
    abi: hyperdriveBaseABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useHyperdriveBaseSetApprovalBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveBaseABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveBaseABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveBaseABI, "setApprovalBridge">(
    {
      abi: hyperdriveBaseABI,
      functionName: "setApprovalBridge",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useHyperdriveBaseSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveBaseABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveBaseABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveBaseABI, "setApprovalForAll">(
    {
      abi: hyperdriveBaseABI,
      functionName: "setApprovalForAll",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useHyperdriveBaseTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveBaseABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveBaseABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveBaseABI, "transferFrom">({
    abi: hyperdriveBaseABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useHyperdriveBaseTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveBaseABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveBaseABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof hyperdriveBaseABI,
    "transferFromBridge"
  >({
    abi: hyperdriveBaseABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__.
 */
export function usePrepareHyperdriveBaseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveBaseABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function usePrepareHyperdriveBaseBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveBaseABI,
      "batchTransferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveBaseABI,
    functionName: "batchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "batchTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"checkpoint"`.
 */
export function usePrepareHyperdriveBaseCheckpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "checkpoint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveBaseABI,
    functionName: "checkpoint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "checkpoint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"permitForAll"`.
 */
export function usePrepareHyperdriveBasePermitForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "permitForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveBaseABI,
    functionName: "permitForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "permitForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareHyperdriveBaseSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveBaseABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareHyperdriveBaseSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveBaseABI,
      "setApprovalBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveBaseABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareHyperdriveBaseSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveBaseABI,
      "setApprovalForAll"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveBaseABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareHyperdriveBaseTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveBaseABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareHyperdriveBaseTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveBaseABI,
      "transferFromBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveBaseABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveBaseABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveBaseABI}__.
 */
export function useHyperdriveBaseEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveBaseABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveBaseABI,
    ...config,
  } as UseContractEventConfig<typeof hyperdriveBaseABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `eventName` set to `"Approval"`.
 */
export function useHyperdriveBaseApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveBaseABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveBaseABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveBaseABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useHyperdriveBaseApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveBaseABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveBaseABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveBaseABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveBaseABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useHyperdriveBaseTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveBaseABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveBaseABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveBaseABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link hyperdriveLpABI}__.
 */
export function useHyperdriveLp(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: hyperdriveLpABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__.
 */
export function useHyperdriveLpRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useHyperdriveLpDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useHyperdriveLpPermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useHyperdriveLpBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"baseToken"`.
 */
export function useHyperdriveLpBaseToken(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "baseToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "baseToken",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "baseToken">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"bondReserves"`.
 */
export function useHyperdriveLpBondReserves(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "bondReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "bondReserves",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "bondReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"checkpointDuration"`.
 */
export function useHyperdriveLpCheckpointDuration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "checkpointDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "checkpointDuration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "checkpointDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useHyperdriveLpCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "checkpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "checkpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "checkpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"curveFee"`.
 */
export function useHyperdriveLpCurveFee(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "curveFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "curveFee",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "curveFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"factory"`.
 */
export function useHyperdriveLpFactory(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "factory">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "factory">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"flatFee"`.
 */
export function useHyperdriveLpFlatFee(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "flatFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "flatFee",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "flatFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"getPoolConfiguration"`.
 */
export function useHyperdriveLpGetPoolConfiguration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "getPoolConfiguration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "getPoolConfiguration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "getPoolConfiguration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"getPoolInfo"`.
 */
export function useHyperdriveLpGetPoolInfo(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "getPoolInfo">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "getPoolInfo",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "getPoolInfo">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"initialSharePrice"`.
 */
export function useHyperdriveLpInitialSharePrice(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "initialSharePrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "initialSharePrice",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "initialSharePrice">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useHyperdriveLpIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"linkerCodeHash"`.
 */
export function useHyperdriveLpLinkerCodeHash(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "linkerCodeHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "linkerCodeHash",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "linkerCodeHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"longAverageMaturityTime"`.
 */
export function useHyperdriveLpLongAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "longAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "longAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "longAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"longBaseVolume"`.
 */
export function useHyperdriveLpLongBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "longBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "longBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "longBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"longBaseVolumeCheckpoints"`.
 */
export function useHyperdriveLpLongBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "longBaseVolumeCheckpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "longBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "longBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"longWithdrawalShareProceeds"`.
 */
export function useHyperdriveLpLongWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveLpABI,
      "longWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "longWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "longWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"longWithdrawalSharesOutstanding"`.
 */
export function useHyperdriveLpLongWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveLpABI,
      "longWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "longWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "longWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"longsOutstanding"`.
 */
export function useHyperdriveLpLongsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "longsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "longsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "longsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"name"`.
 */
export function useHyperdriveLpName(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"nonces"`.
 */
export function useHyperdriveLpNonces(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useHyperdriveLpPerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"positionDuration"`.
 */
export function useHyperdriveLpPositionDuration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "positionDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "positionDuration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "positionDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"shareReserves"`.
 */
export function useHyperdriveLpShareReserves(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "shareReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "shareReserves",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "shareReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"shortAverageMaturityTime"`.
 */
export function useHyperdriveLpShortAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "shortAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "shortAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "shortAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"shortBaseVolume"`.
 */
export function useHyperdriveLpShortBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "shortBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "shortBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "shortBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"shortBaseVolumeCheckpoints"`.
 */
export function useHyperdriveLpShortBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "shortBaseVolumeCheckpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "shortBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "shortBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"shortWithdrawalShareProceeds"`.
 */
export function useHyperdriveLpShortWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveLpABI,
      "shortWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "shortWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "shortWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"shortWithdrawalSharesOutstanding"`.
 */
export function useHyperdriveLpShortWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveLpABI,
      "shortWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "shortWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "shortWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"shortsOutstanding"`.
 */
export function useHyperdriveLpShortsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "shortsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "shortsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "shortsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"symbol"`.
 */
export function useHyperdriveLpSymbol(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"timeStretch"`.
 */
export function useHyperdriveLpTimeStretch(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "timeStretch">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "timeStretch",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "timeStretch">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useHyperdriveLpTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLpABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLpABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLpABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__.
 */
export function useHyperdriveLpWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveLpABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof hyperdriveLpABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, TFunctionName>({
    abi: hyperdriveLpABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function useHyperdriveLpAddLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLpABI,
          "addLiquidity"
        >["abi"],
        "addLiquidity"
      > & { functionName?: "addLiquidity" }
    : UseContractWriteConfig<TMode, typeof hyperdriveLpABI, "addLiquidity"> & {
        abi?: never;
        functionName?: "addLiquidity";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "addLiquidity">({
    abi: hyperdriveLpABI,
    functionName: "addLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function useHyperdriveLpBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLpABI,
          "batchTransferFrom"
        >["abi"],
        "batchTransferFrom"
      > & { functionName?: "batchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLpABI,
        "batchTransferFrom"
      > & {
        abi?: never;
        functionName?: "batchTransferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "batchTransferFrom">({
    abi: hyperdriveLpABI,
    functionName: "batchTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"checkpoint"`.
 */
export function useHyperdriveLpCheckpoint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveLpABI, "checkpoint">["abi"],
        "checkpoint"
      > & { functionName?: "checkpoint" }
    : UseContractWriteConfig<TMode, typeof hyperdriveLpABI, "checkpoint"> & {
        abi?: never;
        functionName?: "checkpoint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "checkpoint">({
    abi: hyperdriveLpABI,
    functionName: "checkpoint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"initialize"`.
 */
export function useHyperdriveLpInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveLpABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof hyperdriveLpABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "initialize">({
    abi: hyperdriveLpABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"permitForAll"`.
 */
export function useHyperdriveLpPermitForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLpABI,
          "permitForAll"
        >["abi"],
        "permitForAll"
      > & { functionName?: "permitForAll" }
    : UseContractWriteConfig<TMode, typeof hyperdriveLpABI, "permitForAll"> & {
        abi?: never;
        functionName?: "permitForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "permitForAll">({
    abi: hyperdriveLpABI,
    functionName: "permitForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"redeemWithdrawalShares"`.
 */
export function useHyperdriveLpRedeemWithdrawalShares<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLpABI,
          "redeemWithdrawalShares"
        >["abi"],
        "redeemWithdrawalShares"
      > & { functionName?: "redeemWithdrawalShares" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLpABI,
        "redeemWithdrawalShares"
      > & {
        abi?: never;
        functionName?: "redeemWithdrawalShares";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof hyperdriveLpABI,
    "redeemWithdrawalShares"
  >({
    abi: hyperdriveLpABI,
    functionName: "redeemWithdrawalShares",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function useHyperdriveLpRemoveLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLpABI,
          "removeLiquidity"
        >["abi"],
        "removeLiquidity"
      > & { functionName?: "removeLiquidity" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLpABI,
        "removeLiquidity"
      > & {
        abi?: never;
        functionName?: "removeLiquidity";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "removeLiquidity">({
    abi: hyperdriveLpABI,
    functionName: "removeLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"setApproval"`.
 */
export function useHyperdriveLpSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLpABI,
          "setApproval"
        >["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<TMode, typeof hyperdriveLpABI, "setApproval"> & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "setApproval">({
    abi: hyperdriveLpABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useHyperdriveLpSetApprovalBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLpABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLpABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "setApprovalBridge">({
    abi: hyperdriveLpABI,
    functionName: "setApprovalBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useHyperdriveLpSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLpABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLpABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "setApprovalForAll">({
    abi: hyperdriveLpABI,
    functionName: "setApprovalForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useHyperdriveLpTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLpABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof hyperdriveLpABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "transferFrom">({
    abi: hyperdriveLpABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useHyperdriveLpTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLpABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLpABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLpABI, "transferFromBridge">({
    abi: hyperdriveLpABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__.
 */
export function usePrepareHyperdriveLpWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function usePrepareHyperdriveLpAddLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "addLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "addLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "addLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function usePrepareHyperdriveLpBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "batchTransferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "batchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "batchTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"checkpoint"`.
 */
export function usePrepareHyperdriveLpCheckpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "checkpoint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "checkpoint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "checkpoint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareHyperdriveLpInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"permitForAll"`.
 */
export function usePrepareHyperdriveLpPermitForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "permitForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "permitForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "permitForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"redeemWithdrawalShares"`.
 */
export function usePrepareHyperdriveLpRedeemWithdrawalShares(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveLpABI,
      "redeemWithdrawalShares"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "redeemWithdrawalShares",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "redeemWithdrawalShares">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function usePrepareHyperdriveLpRemoveLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "removeLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "removeLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "removeLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareHyperdriveLpSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareHyperdriveLpSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "setApprovalBridge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareHyperdriveLpSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "setApprovalForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareHyperdriveLpTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLpABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareHyperdriveLpTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "transferFromBridge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLpABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLpABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveLpABI}__.
 */
export function useHyperdriveLpEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveLpABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveLpABI,
    ...config,
  } as UseContractEventConfig<typeof hyperdriveLpABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveLpABI}__ and `eventName` set to `"Approval"`.
 */
export function useHyperdriveLpApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveLpABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveLpABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveLpABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveLpABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useHyperdriveLpApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveLpABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveLpABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveLpABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveLpABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useHyperdriveLpTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveLpABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveLpABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveLpABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link hyperdriveLongABI}__.
 */
export function useHyperdriveLong(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: hyperdriveLongABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__.
 */
export function useHyperdriveLongRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useHyperdriveLongDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useHyperdriveLongPermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useHyperdriveLongBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"baseToken"`.
 */
export function useHyperdriveLongBaseToken(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "baseToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "baseToken",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "baseToken">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"bondReserves"`.
 */
export function useHyperdriveLongBondReserves(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "bondReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "bondReserves",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "bondReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"checkpointDuration"`.
 */
export function useHyperdriveLongCheckpointDuration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "checkpointDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "checkpointDuration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "checkpointDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useHyperdriveLongCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "checkpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "checkpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "checkpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"curveFee"`.
 */
export function useHyperdriveLongCurveFee(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "curveFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "curveFee",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "curveFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"factory"`.
 */
export function useHyperdriveLongFactory(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "factory">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "factory">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"flatFee"`.
 */
export function useHyperdriveLongFlatFee(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "flatFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "flatFee",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "flatFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"getPoolConfiguration"`.
 */
export function useHyperdriveLongGetPoolConfiguration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "getPoolConfiguration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "getPoolConfiguration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "getPoolConfiguration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"getPoolInfo"`.
 */
export function useHyperdriveLongGetPoolInfo(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "getPoolInfo">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "getPoolInfo",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "getPoolInfo">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"initialSharePrice"`.
 */
export function useHyperdriveLongInitialSharePrice(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "initialSharePrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "initialSharePrice",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "initialSharePrice">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useHyperdriveLongIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"linkerCodeHash"`.
 */
export function useHyperdriveLongLinkerCodeHash(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "linkerCodeHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "linkerCodeHash",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "linkerCodeHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"longAverageMaturityTime"`.
 */
export function useHyperdriveLongLongAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "longAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "longAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "longAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"longBaseVolume"`.
 */
export function useHyperdriveLongLongBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "longBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "longBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "longBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"longBaseVolumeCheckpoints"`.
 */
export function useHyperdriveLongLongBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveLongABI,
      "longBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "longBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "longBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"longWithdrawalShareProceeds"`.
 */
export function useHyperdriveLongLongWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveLongABI,
      "longWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "longWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "longWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"longWithdrawalSharesOutstanding"`.
 */
export function useHyperdriveLongLongWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveLongABI,
      "longWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "longWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "longWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"longsOutstanding"`.
 */
export function useHyperdriveLongLongsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "longsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "longsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "longsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"name"`.
 */
export function useHyperdriveLongName(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"nonces"`.
 */
export function useHyperdriveLongNonces(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useHyperdriveLongPerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"positionDuration"`.
 */
export function useHyperdriveLongPositionDuration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "positionDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "positionDuration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "positionDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"shareReserves"`.
 */
export function useHyperdriveLongShareReserves(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "shareReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "shareReserves",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "shareReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"shortAverageMaturityTime"`.
 */
export function useHyperdriveLongShortAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "shortAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "shortAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "shortAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"shortBaseVolume"`.
 */
export function useHyperdriveLongShortBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "shortBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "shortBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "shortBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"shortBaseVolumeCheckpoints"`.
 */
export function useHyperdriveLongShortBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveLongABI,
      "shortBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "shortBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "shortBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"shortWithdrawalShareProceeds"`.
 */
export function useHyperdriveLongShortWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveLongABI,
      "shortWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "shortWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "shortWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"shortWithdrawalSharesOutstanding"`.
 */
export function useHyperdriveLongShortWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveLongABI,
      "shortWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "shortWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "shortWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"shortsOutstanding"`.
 */
export function useHyperdriveLongShortsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "shortsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "shortsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "shortsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"symbol"`.
 */
export function useHyperdriveLongSymbol(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"timeStretch"`.
 */
export function useHyperdriveLongTimeStretch(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "timeStretch">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "timeStretch",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "timeStretch">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useHyperdriveLongTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveLongABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveLongABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveLongABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__.
 */
export function useHyperdriveLongWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveLongABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof hyperdriveLongABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLongABI, TFunctionName>({
    abi: hyperdriveLongABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function useHyperdriveLongBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLongABI,
          "batchTransferFrom"
        >["abi"],
        "batchTransferFrom"
      > & { functionName?: "batchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLongABI,
        "batchTransferFrom"
      > & {
        abi?: never;
        functionName?: "batchTransferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLongABI, "batchTransferFrom">(
    {
      abi: hyperdriveLongABI,
      functionName: "batchTransferFrom",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"checkpoint"`.
 */
export function useHyperdriveLongCheckpoint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLongABI,
          "checkpoint"
        >["abi"],
        "checkpoint"
      > & { functionName?: "checkpoint" }
    : UseContractWriteConfig<TMode, typeof hyperdriveLongABI, "checkpoint"> & {
        abi?: never;
        functionName?: "checkpoint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLongABI, "checkpoint">({
    abi: hyperdriveLongABI,
    functionName: "checkpoint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"closeLong"`.
 */
export function useHyperdriveLongCloseLong<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLongABI,
          "closeLong"
        >["abi"],
        "closeLong"
      > & { functionName?: "closeLong" }
    : UseContractWriteConfig<TMode, typeof hyperdriveLongABI, "closeLong"> & {
        abi?: never;
        functionName?: "closeLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLongABI, "closeLong">({
    abi: hyperdriveLongABI,
    functionName: "closeLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"openLong"`.
 */
export function useHyperdriveLongOpenLong<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveLongABI, "openLong">["abi"],
        "openLong"
      > & { functionName?: "openLong" }
    : UseContractWriteConfig<TMode, typeof hyperdriveLongABI, "openLong"> & {
        abi?: never;
        functionName?: "openLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLongABI, "openLong">({
    abi: hyperdriveLongABI,
    functionName: "openLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"permitForAll"`.
 */
export function useHyperdriveLongPermitForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLongABI,
          "permitForAll"
        >["abi"],
        "permitForAll"
      > & { functionName?: "permitForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLongABI,
        "permitForAll"
      > & {
        abi?: never;
        functionName?: "permitForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLongABI, "permitForAll">({
    abi: hyperdriveLongABI,
    functionName: "permitForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"setApproval"`.
 */
export function useHyperdriveLongSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLongABI,
          "setApproval"
        >["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<TMode, typeof hyperdriveLongABI, "setApproval"> & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLongABI, "setApproval">({
    abi: hyperdriveLongABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useHyperdriveLongSetApprovalBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLongABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLongABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLongABI, "setApprovalBridge">(
    {
      abi: hyperdriveLongABI,
      functionName: "setApprovalBridge",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useHyperdriveLongSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLongABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLongABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLongABI, "setApprovalForAll">(
    {
      abi: hyperdriveLongABI,
      functionName: "setApprovalForAll",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useHyperdriveLongTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLongABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLongABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveLongABI, "transferFrom">({
    abi: hyperdriveLongABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useHyperdriveLongTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveLongABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveLongABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof hyperdriveLongABI,
    "transferFromBridge"
  >({
    abi: hyperdriveLongABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__.
 */
export function usePrepareHyperdriveLongWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLongABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function usePrepareHyperdriveLongBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveLongABI,
      "batchTransferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    functionName: "batchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "batchTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"checkpoint"`.
 */
export function usePrepareHyperdriveLongCheckpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "checkpoint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    functionName: "checkpoint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "checkpoint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"closeLong"`.
 */
export function usePrepareHyperdriveLongCloseLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "closeLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    functionName: "closeLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "closeLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"openLong"`.
 */
export function usePrepareHyperdriveLongOpenLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "openLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    functionName: "openLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "openLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"permitForAll"`.
 */
export function usePrepareHyperdriveLongPermitForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "permitForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    functionName: "permitForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "permitForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareHyperdriveLongSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareHyperdriveLongSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveLongABI,
      "setApprovalBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareHyperdriveLongSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveLongABI,
      "setApprovalForAll"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareHyperdriveLongTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveLongABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareHyperdriveLongTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveLongABI,
      "transferFromBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveLongABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveLongABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveLongABI}__.
 */
export function useHyperdriveLongEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveLongABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveLongABI,
    ...config,
  } as UseContractEventConfig<typeof hyperdriveLongABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveLongABI}__ and `eventName` set to `"Approval"`.
 */
export function useHyperdriveLongApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveLongABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveLongABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveLongABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveLongABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useHyperdriveLongApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveLongABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveLongABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveLongABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveLongABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useHyperdriveLongTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveLongABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveLongABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveLongABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link hyperdriveShortABI}__.
 */
export function useHyperdriveShort(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: hyperdriveShortABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__.
 */
export function useHyperdriveShortRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useHyperdriveShortDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useHyperdriveShortPermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useHyperdriveShortBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"baseToken"`.
 */
export function useHyperdriveShortBaseToken(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "baseToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "baseToken",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "baseToken">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"bondReserves"`.
 */
export function useHyperdriveShortBondReserves(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "bondReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "bondReserves",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "bondReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"checkpointDuration"`.
 */
export function useHyperdriveShortCheckpointDuration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "checkpointDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "checkpointDuration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "checkpointDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useHyperdriveShortCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "checkpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "checkpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "checkpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"curveFee"`.
 */
export function useHyperdriveShortCurveFee(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "curveFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "curveFee",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "curveFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"factory"`.
 */
export function useHyperdriveShortFactory(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "factory">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "factory">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"flatFee"`.
 */
export function useHyperdriveShortFlatFee(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "flatFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "flatFee",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "flatFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"getPoolConfiguration"`.
 */
export function useHyperdriveShortGetPoolConfiguration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "getPoolConfiguration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "getPoolConfiguration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "getPoolConfiguration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"getPoolInfo"`.
 */
export function useHyperdriveShortGetPoolInfo(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "getPoolInfo">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "getPoolInfo",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "getPoolInfo">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"initialSharePrice"`.
 */
export function useHyperdriveShortInitialSharePrice(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "initialSharePrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "initialSharePrice",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "initialSharePrice">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useHyperdriveShortIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"linkerCodeHash"`.
 */
export function useHyperdriveShortLinkerCodeHash(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "linkerCodeHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "linkerCodeHash",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "linkerCodeHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"longAverageMaturityTime"`.
 */
export function useHyperdriveShortLongAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "longAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "longAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "longAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"longBaseVolume"`.
 */
export function useHyperdriveShortLongBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "longBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "longBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "longBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"longBaseVolumeCheckpoints"`.
 */
export function useHyperdriveShortLongBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveShortABI,
      "longBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "longBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "longBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"longWithdrawalShareProceeds"`.
 */
export function useHyperdriveShortLongWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveShortABI,
      "longWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "longWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "longWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"longWithdrawalSharesOutstanding"`.
 */
export function useHyperdriveShortLongWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveShortABI,
      "longWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "longWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "longWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"longsOutstanding"`.
 */
export function useHyperdriveShortLongsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "longsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "longsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "longsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"name"`.
 */
export function useHyperdriveShortName(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"nonces"`.
 */
export function useHyperdriveShortNonces(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useHyperdriveShortPerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"positionDuration"`.
 */
export function useHyperdriveShortPositionDuration(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "positionDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "positionDuration",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "positionDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"shareReserves"`.
 */
export function useHyperdriveShortShareReserves(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "shareReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "shareReserves",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "shareReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"shortAverageMaturityTime"`.
 */
export function useHyperdriveShortShortAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveShortABI,
      "shortAverageMaturityTime"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "shortAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "shortAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"shortBaseVolume"`.
 */
export function useHyperdriveShortShortBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "shortBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "shortBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "shortBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"shortBaseVolumeCheckpoints"`.
 */
export function useHyperdriveShortShortBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveShortABI,
      "shortBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "shortBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "shortBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"shortWithdrawalShareProceeds"`.
 */
export function useHyperdriveShortShortWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveShortABI,
      "shortWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "shortWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "shortWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"shortWithdrawalSharesOutstanding"`.
 */
export function useHyperdriveShortShortWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof hyperdriveShortABI,
      "shortWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "shortWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "shortWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"shortsOutstanding"`.
 */
export function useHyperdriveShortShortsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "shortsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "shortsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "shortsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"symbol"`.
 */
export function useHyperdriveShortSymbol(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"timeStretch"`.
 */
export function useHyperdriveShortTimeStretch(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "timeStretch">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "timeStretch",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "timeStretch">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useHyperdriveShortTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveShortABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveShortABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveShortABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__.
 */
export function useHyperdriveShortWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveShortABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveShortABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveShortABI, TFunctionName>({
    abi: hyperdriveShortABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function useHyperdriveShortBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveShortABI,
          "batchTransferFrom"
        >["abi"],
        "batchTransferFrom"
      > & { functionName?: "batchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveShortABI,
        "batchTransferFrom"
      > & {
        abi?: never;
        functionName?: "batchTransferFrom";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof hyperdriveShortABI,
    "batchTransferFrom"
  >({
    abi: hyperdriveShortABI,
    functionName: "batchTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"checkpoint"`.
 */
export function useHyperdriveShortCheckpoint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveShortABI,
          "checkpoint"
        >["abi"],
        "checkpoint"
      > & { functionName?: "checkpoint" }
    : UseContractWriteConfig<TMode, typeof hyperdriveShortABI, "checkpoint"> & {
        abi?: never;
        functionName?: "checkpoint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveShortABI, "checkpoint">({
    abi: hyperdriveShortABI,
    functionName: "checkpoint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"closeShort"`.
 */
export function useHyperdriveShortCloseShort<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveShortABI,
          "closeShort"
        >["abi"],
        "closeShort"
      > & { functionName?: "closeShort" }
    : UseContractWriteConfig<TMode, typeof hyperdriveShortABI, "closeShort"> & {
        abi?: never;
        functionName?: "closeShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveShortABI, "closeShort">({
    abi: hyperdriveShortABI,
    functionName: "closeShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"openShort"`.
 */
export function useHyperdriveShortOpenShort<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveShortABI,
          "openShort"
        >["abi"],
        "openShort"
      > & { functionName?: "openShort" }
    : UseContractWriteConfig<TMode, typeof hyperdriveShortABI, "openShort"> & {
        abi?: never;
        functionName?: "openShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveShortABI, "openShort">({
    abi: hyperdriveShortABI,
    functionName: "openShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"permitForAll"`.
 */
export function useHyperdriveShortPermitForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveShortABI,
          "permitForAll"
        >["abi"],
        "permitForAll"
      > & { functionName?: "permitForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveShortABI,
        "permitForAll"
      > & {
        abi?: never;
        functionName?: "permitForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveShortABI, "permitForAll">({
    abi: hyperdriveShortABI,
    functionName: "permitForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"setApproval"`.
 */
export function useHyperdriveShortSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveShortABI,
          "setApproval"
        >["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveShortABI,
        "setApproval"
      > & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveShortABI, "setApproval">({
    abi: hyperdriveShortABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useHyperdriveShortSetApprovalBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveShortABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveShortABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof hyperdriveShortABI,
    "setApprovalBridge"
  >({
    abi: hyperdriveShortABI,
    functionName: "setApprovalBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useHyperdriveShortSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveShortABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveShortABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof hyperdriveShortABI,
    "setApprovalForAll"
  >({
    abi: hyperdriveShortABI,
    functionName: "setApprovalForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useHyperdriveShortTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveShortABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveShortABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveShortABI, "transferFrom">({
    abi: hyperdriveShortABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useHyperdriveShortTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof hyperdriveShortABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof hyperdriveShortABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof hyperdriveShortABI,
    "transferFromBridge"
  >({
    abi: hyperdriveShortABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__.
 */
export function usePrepareHyperdriveShortWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveShortABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function usePrepareHyperdriveShortBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveShortABI,
      "batchTransferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    functionName: "batchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "batchTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"checkpoint"`.
 */
export function usePrepareHyperdriveShortCheckpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "checkpoint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    functionName: "checkpoint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "checkpoint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"closeShort"`.
 */
export function usePrepareHyperdriveShortCloseShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "closeShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    functionName: "closeShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "closeShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"openShort"`.
 */
export function usePrepareHyperdriveShortOpenShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "openShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    functionName: "openShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "openShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"permitForAll"`.
 */
export function usePrepareHyperdriveShortPermitForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "permitForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    functionName: "permitForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "permitForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareHyperdriveShortSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareHyperdriveShortSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveShortABI,
      "setApprovalBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareHyperdriveShortSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveShortABI,
      "setApprovalForAll"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareHyperdriveShortTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveShortABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareHyperdriveShortTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof hyperdriveShortABI,
      "transferFromBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveShortABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveShortABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveShortABI}__.
 */
export function useHyperdriveShortEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveShortABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveShortABI,
    ...config,
  } as UseContractEventConfig<typeof hyperdriveShortABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveShortABI}__ and `eventName` set to `"Approval"`.
 */
export function useHyperdriveShortApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveShortABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveShortABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveShortABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveShortABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useHyperdriveShortApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveShortABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveShortABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveShortABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveShortABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useHyperdriveShortTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveShortABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveShortABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveShortABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link hyperdriveTestABI}__.
 */
export function useHyperdriveTest(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: hyperdriveTestABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveTestABI}__.
 */
export function useHyperdriveTestRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveTestABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveTestABI,
    ...config,
  } as UseContractReadConfig<typeof hyperdriveTestABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hyperdriveTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useHyperdriveTestIsTest(
  config: Omit<
    UseContractReadConfig<typeof hyperdriveTestABI, "IS_TEST">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hyperdriveTestABI,
    functionName: "IS_TEST",
    ...config,
  } as UseContractReadConfig<typeof hyperdriveTestABI, "IS_TEST">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveTestABI}__.
 */
export function useHyperdriveTestWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveTestABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof hyperdriveTestABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveTestABI, TFunctionName>({
    abi: hyperdriveTestABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveTestABI}__ and `functionName` set to `"failed"`.
 */
export function useHyperdriveTestFailed<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveTestABI, "failed">["abi"],
        "failed"
      > & { functionName?: "failed" }
    : UseContractWriteConfig<TMode, typeof hyperdriveTestABI, "failed"> & {
        abi?: never;
        functionName?: "failed";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveTestABI, "failed">({
    abi: hyperdriveTestABI,
    functionName: "failed",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hyperdriveTestABI}__ and `functionName` set to `"setUp"`.
 */
export function useHyperdriveTestSetUp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof hyperdriveTestABI, "setUp">["abi"],
        "setUp"
      > & { functionName?: "setUp" }
    : UseContractWriteConfig<TMode, typeof hyperdriveTestABI, "setUp"> & {
        abi?: never;
        functionName?: "setUp";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof hyperdriveTestABI, "setUp">({
    abi: hyperdriveTestABI,
    functionName: "setUp",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveTestABI}__.
 */
export function usePrepareHyperdriveTestWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveTestABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveTestABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveTestABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareHyperdriveTestFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveTestABI, "failed">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveTestABI,
    functionName: "failed",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveTestABI, "failed">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hyperdriveTestABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareHyperdriveTestSetUp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hyperdriveTestABI, "setUp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hyperdriveTestABI,
    functionName: "setUp",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hyperdriveTestABI, "setUp">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__.
 */
export function useHyperdriveTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log"`.
 */
export function useHyperdriveTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useHyperdriveTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_address">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_address",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_address">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_array"`.
 */
export function useHyperdriveTestLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_array">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_array",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_array">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useHyperdriveTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_bytes">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_bytes",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_bytes">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useHyperdriveTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_bytes32">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_bytes32",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_bytes32">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useHyperdriveTestLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_int">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_int",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_int">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useHyperdriveTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_named_address">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_named_address",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_named_address">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useHyperdriveTestLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_named_array">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_named_array",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_named_array">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useHyperdriveTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_named_bytes">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_named_bytes",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_named_bytes">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useHyperdriveTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_named_bytes32">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_named_bytes32",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_named_bytes32">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useHyperdriveTestLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_named_decimal_int">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_named_decimal_int",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_named_decimal_int">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useHyperdriveTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_named_decimal_uint">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_named_decimal_uint",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_named_decimal_uint">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useHyperdriveTestLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_named_int">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_named_int",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_named_int">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useHyperdriveTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_named_string">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_named_string",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_named_string">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useHyperdriveTestLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_named_uint">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_named_uint",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_named_uint">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useHyperdriveTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_string">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_string",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_string">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useHyperdriveTestLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "log_uint">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "log_uint",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "log_uint">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hyperdriveTestABI}__ and `eventName` set to `"logs"`.
 */
export function useHyperdriveTestLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof hyperdriveTestABI, "logs">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hyperdriveTestABI,
    eventName: "logs",
    ...config,
  } as UseContractEventConfig<typeof hyperdriveTestABI, "logs">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControl(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: iAccessControlABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlGetRoleAdmin(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, "getRoleAdmin">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, "getRoleAdmin">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, "hasRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, "hasRole">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, TFunctionName>({
    abi: iAccessControlABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          "grantRole"
        >["abi"],
        "grantRole"
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, "grantRole"> & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, "grantRole">({
    abi: iAccessControlABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          "renounceRole"
        >["abi"],
        "renounceRole"
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        "renounceRole"
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, "renounceRole">({
    abi: iAccessControlABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          "revokeRole"
        >["abi"],
        "revokeRole"
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, "revokeRole"> & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, "revokeRole">({
    abi: iAccessControlABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, "grantRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, "grantRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, "renounceRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, "renounceRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, "revokeRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, "revokeRole">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, "RoleAdminChanged">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, "RoleAdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerable(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: iAccessControlEnumerableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlEnumerableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as UseContractReadConfig<typeof iAccessControlEnumerableABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlEnumerableGetRoleAdmin(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlEnumerableABI, "getRoleAdmin">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<typeof iAccessControlEnumerableABI, "getRoleAdmin">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useIAccessControlEnumerableGetRoleMember(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlEnumerableABI, "getRoleMember">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: "getRoleMember",
    ...config,
  } as UseContractReadConfig<typeof iAccessControlEnumerableABI, "getRoleMember">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useIAccessControlEnumerableGetRoleMemberCount(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlEnumerableABI,
      "getRoleMemberCount"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: "getRoleMemberCount",
    ...config,
  } as UseContractReadConfig<typeof iAccessControlEnumerableABI, "getRoleMemberCount">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlEnumerableHasRole(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlEnumerableABI, "hasRole">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlEnumerableABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<typeof iAccessControlEnumerableABI, "hasRole">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          string
        >["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlEnumerableABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlEnumerableABI,
    TFunctionName
  >({ abi: iAccessControlEnumerableABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlEnumerableGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          "grantRole"
        >["abi"],
        "grantRole"
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlEnumerableABI,
        "grantRole"
      > & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlEnumerableABI,
    "grantRole"
  >({
    abi: iAccessControlEnumerableABI,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlEnumerableRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          "renounceRole"
        >["abi"],
        "renounceRole"
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlEnumerableABI,
        "renounceRole"
      > & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlEnumerableABI,
    "renounceRole"
  >({
    abi: iAccessControlEnumerableABI,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlEnumerableRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlEnumerableABI,
          "revokeRole"
        >["abi"],
        "revokeRole"
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlEnumerableABI,
        "revokeRole"
      > & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlEnumerableABI,
    "revokeRole"
  >({
    abi: iAccessControlEnumerableABI,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function usePrepareIAccessControlEnumerableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlEnumerableABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlEnumerableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      "grantRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlEnumerableABI, "grantRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlEnumerableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      "renounceRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlEnumerableABI, "renounceRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlEnumerableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlEnumerableABI,
      "revokeRole"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlEnumerableABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlEnumerableABI, "revokeRole">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__.
 */
export function useIAccessControlEnumerableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlEnumerableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlEnumerableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlEnumerableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAccessControlEnumerableABI,
      "RoleAdminChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlEnumerableABI, "RoleAdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlEnumerableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlEnumerableABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlEnumerableABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlEnumerableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlEnumerableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlEnumerableABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlEnumerableABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlEnumerableABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, "supportsInterface">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, "supportsInterface">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: ierc20MetadataABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({
    abi: ierc20MetadataABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, "approve">({
    abi: ierc20MetadataABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, "transfer">({
    abi: ierc20MetadataABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof ierc20MetadataABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, "transferFrom">({
    abi: ierc20MetadataABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MintABI}__.
 */
export function useIerc20Mint(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: ierc20MintABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MintABI}__.
 */
export function useIerc20MintRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MintABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MintABI,
    ...config,
  } as UseContractReadConfig<typeof ierc20MintABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MintAllowance(
  config: Omit<
    UseContractReadConfig<typeof ierc20MintABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MintABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof ierc20MintABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MintBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc20MintABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MintABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof ierc20MintABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MintDecimals(
  config: Omit<
    UseContractReadConfig<typeof ierc20MintABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MintABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof ierc20MintABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MintName(
  config: Omit<
    UseContractReadConfig<typeof ierc20MintABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MintABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof ierc20MintABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MintSymbol(
  config: Omit<
    UseContractReadConfig<typeof ierc20MintABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MintABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof ierc20MintABI, "symbol">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MintABI}__.
 */
export function useIerc20MintWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MintABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20MintABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MintABI, TFunctionName>({
    abi: ierc20MintABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MintApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MintABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof ierc20MintABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MintABI, "approve">({
    abi: ierc20MintABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"mint"`.
 */
export function useIerc20MintMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MintABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof ierc20MintABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MintABI, "mint">({
    abi: ierc20MintABI,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MintTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MintABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof ierc20MintABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MintABI, "transfer">({
    abi: ierc20MintABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MintTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MintABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof ierc20MintABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MintABI, "transferFrom">({
    abi: ierc20MintABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MintABI}__.
 */
export function usePrepareIerc20MintWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MintABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MintABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MintABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MintApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MintABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MintABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MintABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareIerc20MintMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MintABI, "mint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MintABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MintABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MintTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MintABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MintABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MintABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MintABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MintTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MintABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MintABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MintABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MintABI}__.
 */
export function useIerc20MintEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MintABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MintABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MintABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MintABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MintApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MintABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MintABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ierc20MintABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MintABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MintTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MintABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MintABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ierc20MintABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20Permit(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: ierc20PermitABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20PermitAllowance(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, "allowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, "allowance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20PermitBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20PermitDecimals(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, "decimals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, "decimals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20PermitName(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20PermitSymbol(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, "symbol">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, TFunctionName>({
    abi: ierc20PermitABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20PermitApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, "approve">({
    abi: ierc20PermitABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, "permit">({
    abi: ierc20PermitABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20PermitTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, "transfer">({
    abi: ierc20PermitABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20PermitTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, "transferFrom">({
    abi: ierc20PermitABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20PermitApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, "permit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20PermitTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20PermitTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20PermitABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20PermitABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20PermitABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20PermitABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20PermitApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20PermitABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20PermitABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ierc20PermitABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20PermitABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20PermitTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20PermitABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20PermitABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ierc20PermitABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iForwarderFactoryABI}__.
 */
export function useIForwarderFactory(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: iForwarderFactoryABI, ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iForwarderFactoryABI}__.
 */
export function useIForwarderFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iForwarderFactoryABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iForwarderFactoryABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iForwarderFactoryABI, TFunctionName>({
    abi: iForwarderFactoryABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iForwarderFactoryABI}__ and `functionName` set to `"getDeployDetails"`.
 */
export function useIForwarderFactoryGetDeployDetails<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iForwarderFactoryABI,
          "getDeployDetails"
        >["abi"],
        "getDeployDetails"
      > & { functionName?: "getDeployDetails" }
    : UseContractWriteConfig<
        TMode,
        typeof iForwarderFactoryABI,
        "getDeployDetails"
      > & {
        abi?: never;
        functionName?: "getDeployDetails";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iForwarderFactoryABI,
    "getDeployDetails"
  >({
    abi: iForwarderFactoryABI,
    functionName: "getDeployDetails",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iForwarderFactoryABI}__.
 */
export function usePrepareIForwarderFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iForwarderFactoryABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iForwarderFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iForwarderFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iForwarderFactoryABI}__ and `functionName` set to `"getDeployDetails"`.
 */
export function usePrepareIForwarderFactoryGetDeployDetails(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iForwarderFactoryABI,
      "getDeployDetails"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iForwarderFactoryABI,
    functionName: "getDeployDetails",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iForwarderFactoryABI, "getDeployDetails">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iHyperdriveABI}__.
 */
export function useIHyperdrive(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: iHyperdriveABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHyperdriveABI}__.
 */
export function useIHyperdriveRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iHyperdriveABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iHyperdriveABI,
    ...config,
  } as UseContractReadConfig<typeof iHyperdriveABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIHyperdriveBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof iHyperdriveABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iHyperdriveABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof iHyperdriveABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIHyperdriveIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof iHyperdriveABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iHyperdriveABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof iHyperdriveABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"name"`.
 */
export function useIHyperdriveName(
  config: Omit<
    UseContractReadConfig<typeof iHyperdriveABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iHyperdriveABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof iHyperdriveABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useIHyperdrivePerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof iHyperdriveABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iHyperdriveABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof iHyperdriveABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"symbol"`.
 */
export function useIHyperdriveSymbol(
  config: Omit<
    UseContractReadConfig<typeof iHyperdriveABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iHyperdriveABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof iHyperdriveABI, "symbol">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__.
 */
export function useIHyperdriveWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iHyperdriveABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iHyperdriveABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, TFunctionName>({
    abi: iHyperdriveABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function useIHyperdriveAddLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iHyperdriveABI,
          "addLiquidity"
        >["abi"],
        "addLiquidity"
      > & { functionName?: "addLiquidity" }
    : UseContractWriteConfig<TMode, typeof iHyperdriveABI, "addLiquidity"> & {
        abi?: never;
        functionName?: "addLiquidity";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "addLiquidity">({
    abi: iHyperdriveABI,
    functionName: "addLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"closeLong"`.
 */
export function useIHyperdriveCloseLong<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iHyperdriveABI, "closeLong">["abi"],
        "closeLong"
      > & { functionName?: "closeLong" }
    : UseContractWriteConfig<TMode, typeof iHyperdriveABI, "closeLong"> & {
        abi?: never;
        functionName?: "closeLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "closeLong">({
    abi: iHyperdriveABI,
    functionName: "closeLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"closeShort"`.
 */
export function useIHyperdriveCloseShort<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iHyperdriveABI, "closeShort">["abi"],
        "closeShort"
      > & { functionName?: "closeShort" }
    : UseContractWriteConfig<TMode, typeof iHyperdriveABI, "closeShort"> & {
        abi?: never;
        functionName?: "closeShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "closeShort">({
    abi: iHyperdriveABI,
    functionName: "closeShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"initialize"`.
 */
export function useIHyperdriveInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iHyperdriveABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof iHyperdriveABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "initialize">({
    abi: iHyperdriveABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"openLong"`.
 */
export function useIHyperdriveOpenLong<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iHyperdriveABI, "openLong">["abi"],
        "openLong"
      > & { functionName?: "openLong" }
    : UseContractWriteConfig<TMode, typeof iHyperdriveABI, "openLong"> & {
        abi?: never;
        functionName?: "openLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "openLong">({
    abi: iHyperdriveABI,
    functionName: "openLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"openShort"`.
 */
export function useIHyperdriveOpenShort<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iHyperdriveABI, "openShort">["abi"],
        "openShort"
      > & { functionName?: "openShort" }
    : UseContractWriteConfig<TMode, typeof iHyperdriveABI, "openShort"> & {
        abi?: never;
        functionName?: "openShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "openShort">({
    abi: iHyperdriveABI,
    functionName: "openShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function useIHyperdriveRemoveLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iHyperdriveABI,
          "removeLiquidity"
        >["abi"],
        "removeLiquidity"
      > & { functionName?: "removeLiquidity" }
    : UseContractWriteConfig<
        TMode,
        typeof iHyperdriveABI,
        "removeLiquidity"
      > & {
        abi?: never;
        functionName?: "removeLiquidity";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "removeLiquidity">({
    abi: iHyperdriveABI,
    functionName: "removeLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"setApproval"`.
 */
export function useIHyperdriveSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iHyperdriveABI, "setApproval">["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<TMode, typeof iHyperdriveABI, "setApproval"> & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "setApproval">({
    abi: iHyperdriveABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useIHyperdriveSetApprovalBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iHyperdriveABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof iHyperdriveABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "setApprovalBridge">({
    abi: iHyperdriveABI,
    functionName: "setApprovalBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIHyperdriveTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iHyperdriveABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof iHyperdriveABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "transferFrom">({
    abi: iHyperdriveABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useIHyperdriveTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iHyperdriveABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof iHyperdriveABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iHyperdriveABI, "transferFromBridge">({
    abi: iHyperdriveABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__.
 */
export function usePrepareIHyperdriveWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function usePrepareIHyperdriveAddLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "addLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "addLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "addLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"closeLong"`.
 */
export function usePrepareIHyperdriveCloseLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "closeLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "closeLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "closeLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"closeShort"`.
 */
export function usePrepareIHyperdriveCloseShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "closeShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "closeShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "closeShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIHyperdriveInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"openLong"`.
 */
export function usePrepareIHyperdriveOpenLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "openLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "openLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "openLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"openShort"`.
 */
export function usePrepareIHyperdriveOpenShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "openShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "openShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "openShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function usePrepareIHyperdriveRemoveLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "removeLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "removeLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "removeLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareIHyperdriveSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareIHyperdriveSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "setApprovalBridge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIHyperdriveTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperdriveABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareIHyperdriveTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iHyperdriveABI, "transferFromBridge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iHyperdriveABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperdriveABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iHyperdriveABI}__.
 */
export function useIHyperdriveEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iHyperdriveABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: iHyperdriveABI,
    ...config,
  } as UseContractEventConfig<typeof iHyperdriveABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iHyperdriveABI}__ and `eventName` set to `"Approval"`.
 */
export function useIHyperdriveApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iHyperdriveABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iHyperdriveABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof iHyperdriveABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iHyperdriveABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIHyperdriveApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof iHyperdriveABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iHyperdriveABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof iHyperdriveABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iHyperdriveABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIHyperdriveTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof iHyperdriveABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iHyperdriveABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof iHyperdriveABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMultiTokenABI}__.
 */
export function useIMultiToken(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: iMultiTokenABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMultiTokenABI}__.
 */
export function useIMultiTokenRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iMultiTokenABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iMultiTokenABI,
    ...config,
  } as UseContractReadConfig<typeof iMultiTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIMultiTokenBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof iMultiTokenABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMultiTokenABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof iMultiTokenABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIMultiTokenIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof iMultiTokenABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMultiTokenABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof iMultiTokenABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"name"`.
 */
export function useIMultiTokenName(
  config: Omit<
    UseContractReadConfig<typeof iMultiTokenABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMultiTokenABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof iMultiTokenABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useIMultiTokenPerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof iMultiTokenABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMultiTokenABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof iMultiTokenABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useIMultiTokenSymbol(
  config: Omit<
    UseContractReadConfig<typeof iMultiTokenABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMultiTokenABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof iMultiTokenABI, "symbol">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMultiTokenABI}__.
 */
export function useIMultiTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMultiTokenABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iMultiTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMultiTokenABI, TFunctionName>({
    abi: iMultiTokenABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"setApproval"`.
 */
export function useIMultiTokenSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMultiTokenABI, "setApproval">["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<TMode, typeof iMultiTokenABI, "setApproval"> & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMultiTokenABI, "setApproval">({
    abi: iMultiTokenABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useIMultiTokenSetApprovalBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMultiTokenABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof iMultiTokenABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMultiTokenABI, "setApprovalBridge">({
    abi: iMultiTokenABI,
    functionName: "setApprovalBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIMultiTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMultiTokenABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof iMultiTokenABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMultiTokenABI, "transferFrom">({
    abi: iMultiTokenABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useIMultiTokenTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMultiTokenABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof iMultiTokenABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMultiTokenABI, "transferFromBridge">({
    abi: iMultiTokenABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMultiTokenABI}__.
 */
export function usePrepareIMultiTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMultiTokenABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMultiTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMultiTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareIMultiTokenSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMultiTokenABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMultiTokenABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMultiTokenABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareIMultiTokenSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMultiTokenABI, "setApprovalBridge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMultiTokenABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMultiTokenABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIMultiTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMultiTokenABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMultiTokenABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMultiTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMultiTokenABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareIMultiTokenTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMultiTokenABI, "transferFromBridge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMultiTokenABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMultiTokenABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMultiTokenABI}__.
 */
export function useIMultiTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iMultiTokenABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: iMultiTokenABI,
    ...config,
  } as UseContractEventConfig<typeof iMultiTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMultiTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useIMultiTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iMultiTokenABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iMultiTokenABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof iMultiTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMultiTokenABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIMultiTokenApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof iMultiTokenABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iMultiTokenABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof iMultiTokenABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMultiTokenABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIMultiTokenTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof iMultiTokenABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iMultiTokenABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof iMultiTokenABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: iMulticall3ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getBasefee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getBasefee",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getBasefee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getBlockHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getBlockHash",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getBlockHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getBlockNumber">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getBlockNumber",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getBlockNumber">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getChainId">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getChainId",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getChainId">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockCoinbase">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockCoinbase",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockCoinbase">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockDifficulty">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockDifficulty",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockDifficulty">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockGasLimit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockGasLimit",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockGasLimit">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockTimestamp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockTimestamp",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockTimestamp">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getEthBalance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getEthBalance",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getEthBalance">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getLastBlockHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getLastBlockHash",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getLastBlockHash">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, TFunctionName>({
    abi: iMulticall3ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, "aggregate">["abi"],
        "aggregate"
      > & { functionName?: "aggregate" }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, "aggregate"> & {
        abi?: never;
        functionName?: "aggregate";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "aggregate">({
    abi: iMulticall3ABI,
    functionName: "aggregate",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, "aggregate3">["abi"],
        "aggregate3"
      > & { functionName?: "aggregate3" }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, "aggregate3"> & {
        abi?: never;
        functionName?: "aggregate3";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "aggregate3">({
    abi: iMulticall3ABI,
    functionName: "aggregate3",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "aggregate3Value"
        >["abi"],
        "aggregate3Value"
      > & { functionName?: "aggregate3Value" }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        "aggregate3Value"
      > & {
        abi?: never;
        functionName?: "aggregate3Value";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "aggregate3Value">({
    abi: iMulticall3ABI,
    functionName: "aggregate3Value",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "blockAndAggregate"
        >["abi"],
        "blockAndAggregate"
      > & { functionName?: "blockAndAggregate" }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        "blockAndAggregate"
      > & {
        abi?: never;
        functionName?: "blockAndAggregate";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "blockAndAggregate">({
    abi: iMulticall3ABI,
    functionName: "blockAndAggregate",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "tryAggregate"
        >["abi"],
        "tryAggregate"
      > & { functionName?: "tryAggregate" }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, "tryAggregate"> & {
        abi?: never;
        functionName?: "tryAggregate";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "tryAggregate">({
    abi: iMulticall3ABI,
    functionName: "tryAggregate",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "tryBlockAndAggregate"
        >["abi"],
        "tryBlockAndAggregate"
      > & { functionName?: "tryBlockAndAggregate" }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        "tryBlockAndAggregate"
      > & {
        abi?: never;
        functionName?: "tryBlockAndAggregate";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "tryBlockAndAggregate">(
    {
      abi: iMulticall3ABI,
      functionName: "tryBlockAndAggregate",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "aggregate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "aggregate3",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3Value">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "aggregate3Value",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3Value">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "blockAndAggregate">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "blockAndAggregate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "blockAndAggregate">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "tryAggregate">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "tryAggregate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "tryAggregate">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      "tryBlockAndAggregate"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "tryBlockAndAggregate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "tryBlockAndAggregate">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockFixedPointMathABI}__.
 */
export function useMockFixedPointMath(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: mockFixedPointMathABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__.
 */
export function useMockFixedPointMathRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"add"`.
 */
export function useMockFixedPointMathAdd(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "add">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "add",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "add">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"divDown"`.
 */
export function useMockFixedPointMathDivDown(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "divDown">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "divDown",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "divDown">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"divUp"`.
 */
export function useMockFixedPointMathDivUp(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "divUp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "divUp",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "divUp">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"exp"`.
 */
export function useMockFixedPointMathExp(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "exp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "exp",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "exp">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"ln"`.
 */
export function useMockFixedPointMathLn(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "ln">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "ln",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "ln">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"mulDivDown"`.
 */
export function useMockFixedPointMathMulDivDown(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "mulDivDown">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "mulDivDown",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "mulDivDown">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"mulDivUp"`.
 */
export function useMockFixedPointMathMulDivUp(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "mulDivUp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "mulDivUp",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "mulDivUp">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"mulDown"`.
 */
export function useMockFixedPointMathMulDown(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "mulDown">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "mulDown",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "mulDown">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"mulUp"`.
 */
export function useMockFixedPointMathMulUp(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "mulUp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "mulUp",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "mulUp">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"pow"`.
 */
export function useMockFixedPointMathPow(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "pow">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "pow",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "pow">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"sub"`.
 */
export function useMockFixedPointMathSub(
  config: Omit<
    UseContractReadConfig<typeof mockFixedPointMathABI, "sub">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "sub",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "sub">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockFixedPointMathABI}__ and `functionName` set to `"updateWeightedAverage"`.
 */
export function useMockFixedPointMathUpdateWeightedAverage(
  config: Omit<
    UseContractReadConfig<
      typeof mockFixedPointMathABI,
      "updateWeightedAverage"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockFixedPointMathABI,
    functionName: "updateWeightedAverage",
    ...config,
  } as UseContractReadConfig<typeof mockFixedPointMathABI, "updateWeightedAverage">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockHyperdriveABI}__.
 */
export function useMockHyperdrive(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: mockHyperdriveABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__.
 */
export function useMockHyperdriveRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMockHyperdriveDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useMockHyperdrivePermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockHyperdriveBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"baseToken"`.
 */
export function useMockHyperdriveBaseToken(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "baseToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "baseToken",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "baseToken">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"bondReserves"`.
 */
export function useMockHyperdriveBondReserves(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "bondReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "bondReserves",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "bondReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"checkpointDuration"`.
 */
export function useMockHyperdriveCheckpointDuration(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "checkpointDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "checkpointDuration",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "checkpointDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useMockHyperdriveCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "checkpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "checkpoints",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "checkpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"curveFee"`.
 */
export function useMockHyperdriveCurveFee(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "curveFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "curveFee",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "curveFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"factory"`.
 */
export function useMockHyperdriveFactory(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "factory">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "factory">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"flatFee"`.
 */
export function useMockHyperdriveFlatFee(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "flatFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "flatFee",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "flatFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"getPoolConfiguration"`.
 */
export function useMockHyperdriveGetPoolConfiguration(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "getPoolConfiguration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "getPoolConfiguration",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "getPoolConfiguration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"getPoolInfo"`.
 */
export function useMockHyperdriveGetPoolInfo(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "getPoolInfo">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "getPoolInfo",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "getPoolInfo">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"getSharePrice"`.
 */
export function useMockHyperdriveGetSharePrice(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "getSharePrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "getSharePrice",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "getSharePrice">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"initialSharePrice"`.
 */
export function useMockHyperdriveInitialSharePrice(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "initialSharePrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "initialSharePrice",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "initialSharePrice">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useMockHyperdriveIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"linkerCodeHash"`.
 */
export function useMockHyperdriveLinkerCodeHash(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "linkerCodeHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "linkerCodeHash",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "linkerCodeHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"longAverageMaturityTime"`.
 */
export function useMockHyperdriveLongAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "longAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "longAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "longAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"longBaseVolume"`.
 */
export function useMockHyperdriveLongBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "longBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "longBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "longBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"longBaseVolumeCheckpoints"`.
 */
export function useMockHyperdriveLongBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveABI,
      "longBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "longBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "longBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"longWithdrawalShareProceeds"`.
 */
export function useMockHyperdriveLongWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveABI,
      "longWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "longWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "longWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"longWithdrawalSharesOutstanding"`.
 */
export function useMockHyperdriveLongWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveABI,
      "longWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "longWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "longWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"longsOutstanding"`.
 */
export function useMockHyperdriveLongsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "longsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "longsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "longsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"name"`.
 */
export function useMockHyperdriveName(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"nonces"`.
 */
export function useMockHyperdriveNonces(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useMockHyperdrivePerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"positionDuration"`.
 */
export function useMockHyperdrivePositionDuration(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "positionDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "positionDuration",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "positionDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"shareReserves"`.
 */
export function useMockHyperdriveShareReserves(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "shareReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "shareReserves",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "shareReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"shortAverageMaturityTime"`.
 */
export function useMockHyperdriveShortAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "shortAverageMaturityTime">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "shortAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "shortAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"shortBaseVolume"`.
 */
export function useMockHyperdriveShortBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "shortBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "shortBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "shortBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"shortBaseVolumeCheckpoints"`.
 */
export function useMockHyperdriveShortBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveABI,
      "shortBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "shortBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "shortBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"shortWithdrawalShareProceeds"`.
 */
export function useMockHyperdriveShortWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveABI,
      "shortWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "shortWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "shortWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"shortWithdrawalSharesOutstanding"`.
 */
export function useMockHyperdriveShortWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveABI,
      "shortWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "shortWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "shortWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"shortsOutstanding"`.
 */
export function useMockHyperdriveShortsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "shortsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "shortsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "shortsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockHyperdriveSymbol(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"timeStretch"`.
 */
export function useMockHyperdriveTimeStretch(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "timeStretch">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "timeStretch",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "timeStretch">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockHyperdriveTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__.
 */
export function useMockHyperdriveWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockHyperdriveABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof mockHyperdriveABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, TFunctionName>({
    abi: mockHyperdriveABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function useMockHyperdriveAddLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "addLiquidity"
        >["abi"],
        "addLiquidity"
      > & { functionName?: "addLiquidity" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveABI,
        "addLiquidity"
      > & {
        abi?: never;
        functionName?: "addLiquidity";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "addLiquidity">({
    abi: mockHyperdriveABI,
    functionName: "addLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function useMockHyperdriveBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "batchTransferFrom"
        >["abi"],
        "batchTransferFrom"
      > & { functionName?: "batchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveABI,
        "batchTransferFrom"
      > & {
        abi?: never;
        functionName?: "batchTransferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "batchTransferFrom">(
    {
      abi: mockHyperdriveABI,
      functionName: "batchTransferFrom",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"checkpoint"`.
 */
export function useMockHyperdriveCheckpoint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "checkpoint"
        >["abi"],
        "checkpoint"
      > & { functionName?: "checkpoint" }
    : UseContractWriteConfig<TMode, typeof mockHyperdriveABI, "checkpoint"> & {
        abi?: never;
        functionName?: "checkpoint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "checkpoint">({
    abi: mockHyperdriveABI,
    functionName: "checkpoint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"closeLong"`.
 */
export function useMockHyperdriveCloseLong<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "closeLong"
        >["abi"],
        "closeLong"
      > & { functionName?: "closeLong" }
    : UseContractWriteConfig<TMode, typeof mockHyperdriveABI, "closeLong"> & {
        abi?: never;
        functionName?: "closeLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "closeLong">({
    abi: mockHyperdriveABI,
    functionName: "closeLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"closeShort"`.
 */
export function useMockHyperdriveCloseShort<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "closeShort"
        >["abi"],
        "closeShort"
      > & { functionName?: "closeShort" }
    : UseContractWriteConfig<TMode, typeof mockHyperdriveABI, "closeShort"> & {
        abi?: never;
        functionName?: "closeShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "closeShort">({
    abi: mockHyperdriveABI,
    functionName: "closeShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"initialize"`.
 */
export function useMockHyperdriveInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "initialize"
        >["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof mockHyperdriveABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "initialize">({
    abi: mockHyperdriveABI,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"openLong"`.
 */
export function useMockHyperdriveOpenLong<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockHyperdriveABI, "openLong">["abi"],
        "openLong"
      > & { functionName?: "openLong" }
    : UseContractWriteConfig<TMode, typeof mockHyperdriveABI, "openLong"> & {
        abi?: never;
        functionName?: "openLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "openLong">({
    abi: mockHyperdriveABI,
    functionName: "openLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"openShort"`.
 */
export function useMockHyperdriveOpenShort<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "openShort"
        >["abi"],
        "openShort"
      > & { functionName?: "openShort" }
    : UseContractWriteConfig<TMode, typeof mockHyperdriveABI, "openShort"> & {
        abi?: never;
        functionName?: "openShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "openShort">({
    abi: mockHyperdriveABI,
    functionName: "openShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"permitForAll"`.
 */
export function useMockHyperdrivePermitForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "permitForAll"
        >["abi"],
        "permitForAll"
      > & { functionName?: "permitForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveABI,
        "permitForAll"
      > & {
        abi?: never;
        functionName?: "permitForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "permitForAll">({
    abi: mockHyperdriveABI,
    functionName: "permitForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"redeemWithdrawalShares"`.
 */
export function useMockHyperdriveRedeemWithdrawalShares<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "redeemWithdrawalShares"
        >["abi"],
        "redeemWithdrawalShares"
      > & { functionName?: "redeemWithdrawalShares" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveABI,
        "redeemWithdrawalShares"
      > & {
        abi?: never;
        functionName?: "redeemWithdrawalShares";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveABI,
    "redeemWithdrawalShares"
  >({
    abi: mockHyperdriveABI,
    functionName: "redeemWithdrawalShares",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function useMockHyperdriveRemoveLiquidity<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "removeLiquidity"
        >["abi"],
        "removeLiquidity"
      > & { functionName?: "removeLiquidity" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveABI,
        "removeLiquidity"
      > & {
        abi?: never;
        functionName?: "removeLiquidity";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "removeLiquidity">({
    abi: mockHyperdriveABI,
    functionName: "removeLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"setApproval"`.
 */
export function useMockHyperdriveSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "setApproval"
        >["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<TMode, typeof mockHyperdriveABI, "setApproval"> & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "setApproval">({
    abi: mockHyperdriveABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useMockHyperdriveSetApprovalBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "setApprovalBridge">(
    {
      abi: mockHyperdriveABI,
      functionName: "setApprovalBridge",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMockHyperdriveSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "setApprovalForAll">(
    {
      abi: mockHyperdriveABI,
      functionName: "setApprovalForAll",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"setFees"`.
 */
export function useMockHyperdriveSetFees<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockHyperdriveABI, "setFees">["abi"],
        "setFees"
      > & { functionName?: "setFees" }
    : UseContractWriteConfig<TMode, typeof mockHyperdriveABI, "setFees"> & {
        abi?: never;
        functionName?: "setFees";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "setFees">({
    abi: mockHyperdriveABI,
    functionName: "setFees",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"setSharePrice"`.
 */
export function useMockHyperdriveSetSharePrice<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "setSharePrice"
        >["abi"],
        "setSharePrice"
      > & { functionName?: "setSharePrice" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveABI,
        "setSharePrice"
      > & {
        abi?: never;
        functionName?: "setSharePrice";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "setSharePrice">({
    abi: mockHyperdriveABI,
    functionName: "setSharePrice",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockHyperdriveTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveABI, "transferFrom">({
    abi: mockHyperdriveABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useMockHyperdriveTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveABI,
    "transferFromBridge"
  >({
    abi: mockHyperdriveABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__.
 */
export function usePrepareMockHyperdriveWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function usePrepareMockHyperdriveAddLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "addLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "addLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "addLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function usePrepareMockHyperdriveBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveABI,
      "batchTransferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "batchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "batchTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"checkpoint"`.
 */
export function usePrepareMockHyperdriveCheckpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "checkpoint">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "checkpoint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "checkpoint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"closeLong"`.
 */
export function usePrepareMockHyperdriveCloseLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "closeLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "closeLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "closeLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"closeShort"`.
 */
export function usePrepareMockHyperdriveCloseShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "closeShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "closeShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "closeShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMockHyperdriveInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"openLong"`.
 */
export function usePrepareMockHyperdriveOpenLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "openLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "openLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "openLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"openShort"`.
 */
export function usePrepareMockHyperdriveOpenShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "openShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "openShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "openShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"permitForAll"`.
 */
export function usePrepareMockHyperdrivePermitForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "permitForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "permitForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "permitForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"redeemWithdrawalShares"`.
 */
export function usePrepareMockHyperdriveRedeemWithdrawalShares(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveABI,
      "redeemWithdrawalShares"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "redeemWithdrawalShares",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "redeemWithdrawalShares">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function usePrepareMockHyperdriveRemoveLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "removeLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "removeLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "removeLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareMockHyperdriveSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareMockHyperdriveSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveABI,
      "setApprovalBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMockHyperdriveSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveABI,
      "setApprovalForAll"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"setFees"`.
 */
export function usePrepareMockHyperdriveSetFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "setFees">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "setFees",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "setFees">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"setSharePrice"`.
 */
export function usePrepareMockHyperdriveSetSharePrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "setSharePrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "setSharePrice",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "setSharePrice">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockHyperdriveTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareMockHyperdriveTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveABI,
      "transferFromBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockHyperdriveABI}__.
 */
export function useMockHyperdriveEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockHyperdriveABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockHyperdriveABI,
    ...config,
  } as UseContractEventConfig<typeof mockHyperdriveABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockHyperdriveABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockHyperdriveApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockHyperdriveABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockHyperdriveABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mockHyperdriveABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockHyperdriveABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMockHyperdriveApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof mockHyperdriveABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockHyperdriveABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof mockHyperdriveABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockHyperdriveABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useMockHyperdriveTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof mockHyperdriveABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockHyperdriveABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof mockHyperdriveABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockHyperdriveMathABI}__.
 */
export function useMockHyperdriveMath(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: mockHyperdriveMathABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__.
 */
export function useMockHyperdriveMathRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveMathABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateAPRFromReserves"`.
 */
export function useMockHyperdriveMathCalculateAprFromReserves(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveMathABI,
      "calculateAPRFromReserves"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateAPRFromReserves",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateAPRFromReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateBaseVolume"`.
 */
export function useMockHyperdriveMathCalculateBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateBondReserves"`.
 */
export function useMockHyperdriveMathCalculateBondReserves(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveMathABI,
      "calculateBondReserves"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateBondReserves",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateBondReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateCloseLong"`.
 */
export function useMockHyperdriveMathCalculateCloseLong(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateCloseLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateCloseLong",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateCloseLong">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateCloseShort"`.
 */
export function useMockHyperdriveMathCalculateCloseShort(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateCloseShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateCloseShort",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateCloseShort">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateFeesInGivenOut"`.
 */
export function useMockHyperdriveMathCalculateFeesInGivenOut(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveMathABI,
      "calculateFeesInGivenOut"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateFeesInGivenOut",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateFeesInGivenOut">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateFeesOutGivenIn"`.
 */
export function useMockHyperdriveMathCalculateFeesOutGivenIn(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveMathABI,
      "calculateFeesOutGivenIn"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateFeesOutGivenIn",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateFeesOutGivenIn">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateInitialBondReserves"`.
 */
export function useMockHyperdriveMathCalculateInitialBondReserves(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveMathABI,
      "calculateInitialBondReserves"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateInitialBondReserves",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateInitialBondReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateLpAllocationAdjustment"`.
 */
export function useMockHyperdriveMathCalculateLpAllocationAdjustment(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveMathABI,
      "calculateLpAllocationAdjustment"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateLpAllocationAdjustment",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateLpAllocationAdjustment">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateOpenLong"`.
 */
export function useMockHyperdriveMathCalculateOpenLong(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateOpenLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateOpenLong",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateOpenLong">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateOpenShort"`.
 */
export function useMockHyperdriveMathCalculateOpenShort(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateOpenShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateOpenShort",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateOpenShort">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateOutForLpSharesIn"`.
 */
export function useMockHyperdriveMathCalculateOutForLpSharesIn(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveMathABI,
      "calculateOutForLpSharesIn"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateOutForLpSharesIn",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateOutForLpSharesIn">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveMathABI}__ and `functionName` set to `"calculateSpotPrice"`.
 */
export function useMockHyperdriveMathCalculateSpotPrice(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateSpotPrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveMathABI,
    functionName: "calculateSpotPrice",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveMathABI, "calculateSpotPrice">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__.
 */
export function useMockHyperdriveTestnet(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: mockHyperdriveTestnetABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__.
 */
export function useMockHyperdriveTestnetRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMockHyperdriveTestnetDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useMockHyperdriveTestnetPermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockHyperdriveTestnetBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"baseToken"`.
 */
export function useMockHyperdriveTestnetBaseToken(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "baseToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "baseToken",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "baseToken">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"bondReserves"`.
 */
export function useMockHyperdriveTestnetBondReserves(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "bondReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "bondReserves",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "bondReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"checkpointDuration"`.
 */
export function useMockHyperdriveTestnetCheckpointDuration(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveTestnetABI,
      "checkpointDuration"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "checkpointDuration",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "checkpointDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useMockHyperdriveTestnetCheckpoints(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "checkpoints">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "checkpoints",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "checkpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"curveFee"`.
 */
export function useMockHyperdriveTestnetCurveFee(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "curveFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "curveFee",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "curveFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"factory"`.
 */
export function useMockHyperdriveTestnetFactory(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "factory">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "factory">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"flatFee"`.
 */
export function useMockHyperdriveTestnetFlatFee(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "flatFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "flatFee",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "flatFee">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"getPoolConfiguration"`.
 */
export function useMockHyperdriveTestnetGetPoolConfiguration(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveTestnetABI,
      "getPoolConfiguration"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "getPoolConfiguration",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "getPoolConfiguration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"getPoolInfo"`.
 */
export function useMockHyperdriveTestnetGetPoolInfo(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "getPoolInfo">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "getPoolInfo",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "getPoolInfo">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"initialSharePrice"`.
 */
export function useMockHyperdriveTestnetInitialSharePrice(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "initialSharePrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "initialSharePrice",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "initialSharePrice">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useMockHyperdriveTestnetIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"linkerCodeHash"`.
 */
export function useMockHyperdriveTestnetLinkerCodeHash(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "linkerCodeHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "linkerCodeHash",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "linkerCodeHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"longAverageMaturityTime"`.
 */
export function useMockHyperdriveTestnetLongAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveTestnetABI,
      "longAverageMaturityTime"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "longAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "longAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"longBaseVolume"`.
 */
export function useMockHyperdriveTestnetLongBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "longBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "longBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "longBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"longBaseVolumeCheckpoints"`.
 */
export function useMockHyperdriveTestnetLongBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveTestnetABI,
      "longBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "longBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "longBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"longWithdrawalShareProceeds"`.
 */
export function useMockHyperdriveTestnetLongWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveTestnetABI,
      "longWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "longWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "longWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"longWithdrawalSharesOutstanding"`.
 */
export function useMockHyperdriveTestnetLongWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveTestnetABI,
      "longWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "longWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "longWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"longsOutstanding"`.
 */
export function useMockHyperdriveTestnetLongsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "longsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "longsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "longsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"name"`.
 */
export function useMockHyperdriveTestnetName(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"nonces"`.
 */
export function useMockHyperdriveTestnetNonces(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useMockHyperdriveTestnetPerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"positionDuration"`.
 */
export function useMockHyperdriveTestnetPositionDuration(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "positionDuration">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "positionDuration",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "positionDuration">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"shareReserves"`.
 */
export function useMockHyperdriveTestnetShareReserves(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "shareReserves">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "shareReserves",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "shareReserves">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"shortAverageMaturityTime"`.
 */
export function useMockHyperdriveTestnetShortAverageMaturityTime(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveTestnetABI,
      "shortAverageMaturityTime"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "shortAverageMaturityTime",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "shortAverageMaturityTime">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"shortBaseVolume"`.
 */
export function useMockHyperdriveTestnetShortBaseVolume(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "shortBaseVolume">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "shortBaseVolume",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "shortBaseVolume">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"shortBaseVolumeCheckpoints"`.
 */
export function useMockHyperdriveTestnetShortBaseVolumeCheckpoints(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveTestnetABI,
      "shortBaseVolumeCheckpoints"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "shortBaseVolumeCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "shortBaseVolumeCheckpoints">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"shortWithdrawalShareProceeds"`.
 */
export function useMockHyperdriveTestnetShortWithdrawalShareProceeds(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveTestnetABI,
      "shortWithdrawalShareProceeds"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "shortWithdrawalShareProceeds",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "shortWithdrawalShareProceeds">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"shortWithdrawalSharesOutstanding"`.
 */
export function useMockHyperdriveTestnetShortWithdrawalSharesOutstanding(
  config: Omit<
    UseContractReadConfig<
      typeof mockHyperdriveTestnetABI,
      "shortWithdrawalSharesOutstanding"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "shortWithdrawalSharesOutstanding",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "shortWithdrawalSharesOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"shortsOutstanding"`.
 */
export function useMockHyperdriveTestnetShortsOutstanding(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "shortsOutstanding">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "shortsOutstanding",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "shortsOutstanding">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockHyperdriveTestnetSymbol(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"timeStretch"`.
 */
export function useMockHyperdriveTestnetTimeStretch(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "timeStretch">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "timeStretch",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "timeStretch">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockHyperdriveTestnetTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof mockHyperdriveTestnetABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockHyperdriveTestnetABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mockHyperdriveTestnetABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__.
 */
export function useMockHyperdriveTestnetWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          string
        >["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    TFunctionName
  >({ abi: mockHyperdriveTestnetABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function useMockHyperdriveTestnetAddLiquidity<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "addLiquidity"
        >["abi"],
        "addLiquidity"
      > & { functionName?: "addLiquidity" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "addLiquidity"
      > & {
        abi?: never;
        functionName?: "addLiquidity";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    "addLiquidity"
  >({
    abi: mockHyperdriveTestnetABI,
    functionName: "addLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function useMockHyperdriveTestnetBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "batchTransferFrom"
        >["abi"],
        "batchTransferFrom"
      > & { functionName?: "batchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "batchTransferFrom"
      > & {
        abi?: never;
        functionName?: "batchTransferFrom";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    "batchTransferFrom"
  >({
    abi: mockHyperdriveTestnetABI,
    functionName: "batchTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"checkpoint"`.
 */
export function useMockHyperdriveTestnetCheckpoint<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "checkpoint"
        >["abi"],
        "checkpoint"
      > & { functionName?: "checkpoint" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "checkpoint"
      > & {
        abi?: never;
        functionName?: "checkpoint";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveTestnetABI, "checkpoint">(
    {
      abi: mockHyperdriveTestnetABI,
      functionName: "checkpoint",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"closeLong"`.
 */
export function useMockHyperdriveTestnetCloseLong<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "closeLong"
        >["abi"],
        "closeLong"
      > & { functionName?: "closeLong" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "closeLong"
      > & {
        abi?: never;
        functionName?: "closeLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveTestnetABI, "closeLong">({
    abi: mockHyperdriveTestnetABI,
    functionName: "closeLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"closeShort"`.
 */
export function useMockHyperdriveTestnetCloseShort<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "closeShort"
        >["abi"],
        "closeShort"
      > & { functionName?: "closeShort" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "closeShort"
      > & {
        abi?: never;
        functionName?: "closeShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveTestnetABI, "closeShort">(
    {
      abi: mockHyperdriveTestnetABI,
      functionName: "closeShort",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"initialize"`.
 */
export function useMockHyperdriveTestnetInitialize<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "initialize"
        >["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "initialize"
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveTestnetABI, "initialize">(
    {
      abi: mockHyperdriveTestnetABI,
      functionName: "initialize",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"openLong"`.
 */
export function useMockHyperdriveTestnetOpenLong<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "openLong"
        >["abi"],
        "openLong"
      > & { functionName?: "openLong" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "openLong"
      > & {
        abi?: never;
        functionName?: "openLong";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveTestnetABI, "openLong">({
    abi: mockHyperdriveTestnetABI,
    functionName: "openLong",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"openShort"`.
 */
export function useMockHyperdriveTestnetOpenShort<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "openShort"
        >["abi"],
        "openShort"
      > & { functionName?: "openShort" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "openShort"
      > & {
        abi?: never;
        functionName?: "openShort";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveTestnetABI, "openShort">({
    abi: mockHyperdriveTestnetABI,
    functionName: "openShort",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"permitForAll"`.
 */
export function useMockHyperdriveTestnetPermitForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "permitForAll"
        >["abi"],
        "permitForAll"
      > & { functionName?: "permitForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "permitForAll"
      > & {
        abi?: never;
        functionName?: "permitForAll";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    "permitForAll"
  >({
    abi: mockHyperdriveTestnetABI,
    functionName: "permitForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"redeemWithdrawalShares"`.
 */
export function useMockHyperdriveTestnetRedeemWithdrawalShares<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "redeemWithdrawalShares"
        >["abi"],
        "redeemWithdrawalShares"
      > & { functionName?: "redeemWithdrawalShares" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "redeemWithdrawalShares"
      > & {
        abi?: never;
        functionName?: "redeemWithdrawalShares";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    "redeemWithdrawalShares"
  >({
    abi: mockHyperdriveTestnetABI,
    functionName: "redeemWithdrawalShares",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function useMockHyperdriveTestnetRemoveLiquidity<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "removeLiquidity"
        >["abi"],
        "removeLiquidity"
      > & { functionName?: "removeLiquidity" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "removeLiquidity"
      > & {
        abi?: never;
        functionName?: "removeLiquidity";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    "removeLiquidity"
  >({
    abi: mockHyperdriveTestnetABI,
    functionName: "removeLiquidity",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"setApproval"`.
 */
export function useMockHyperdriveTestnetSetApproval<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "setApproval"
        >["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "setApproval"
      > & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    "setApproval"
  >({
    abi: mockHyperdriveTestnetABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useMockHyperdriveTestnetSetApprovalBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    "setApprovalBridge"
  >({
    abi: mockHyperdriveTestnetABI,
    functionName: "setApprovalBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMockHyperdriveTestnetSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    "setApprovalForAll"
  >({
    abi: mockHyperdriveTestnetABI,
    functionName: "setApprovalForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"setRate"`.
 */
export function useMockHyperdriveTestnetSetRate<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "setRate"
        >["abi"],
        "setRate"
      > & { functionName?: "setRate" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "setRate"
      > & {
        abi?: never;
        functionName?: "setRate";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockHyperdriveTestnetABI, "setRate">({
    abi: mockHyperdriveTestnetABI,
    functionName: "setRate",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockHyperdriveTestnetTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    "transferFrom"
  >({
    abi: mockHyperdriveTestnetABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useMockHyperdriveTestnetTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockHyperdriveTestnetABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof mockHyperdriveTestnetABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockHyperdriveTestnetABI,
    "transferFromBridge"
  >({
    abi: mockHyperdriveTestnetABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__.
 */
export function usePrepareMockHyperdriveTestnetWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function usePrepareMockHyperdriveTestnetAddLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "addLiquidity"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "addLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "addLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function usePrepareMockHyperdriveTestnetBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "batchTransferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "batchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "batchTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"checkpoint"`.
 */
export function usePrepareMockHyperdriveTestnetCheckpoint(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "checkpoint"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "checkpoint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "checkpoint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"closeLong"`.
 */
export function usePrepareMockHyperdriveTestnetCloseLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "closeLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "closeLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "closeLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"closeShort"`.
 */
export function usePrepareMockHyperdriveTestnetCloseShort(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "closeShort"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "closeShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "closeShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMockHyperdriveTestnetInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "initialize"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"openLong"`.
 */
export function usePrepareMockHyperdriveTestnetOpenLong(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "openLong">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "openLong",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "openLong">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"openShort"`.
 */
export function usePrepareMockHyperdriveTestnetOpenShort(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "openShort">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "openShort",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "openShort">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"permitForAll"`.
 */
export function usePrepareMockHyperdriveTestnetPermitForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "permitForAll"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "permitForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "permitForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"redeemWithdrawalShares"`.
 */
export function usePrepareMockHyperdriveTestnetRedeemWithdrawalShares(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "redeemWithdrawalShares"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "redeemWithdrawalShares",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "redeemWithdrawalShares">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function usePrepareMockHyperdriveTestnetRemoveLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "removeLiquidity"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "removeLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "removeLiquidity">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareMockHyperdriveTestnetSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "setApproval"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareMockHyperdriveTestnetSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "setApprovalBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMockHyperdriveTestnetSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "setApprovalForAll"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"setRate"`.
 */
export function usePrepareMockHyperdriveTestnetSetRate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "setRate">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "setRate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "setRate">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockHyperdriveTestnetTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "transferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareMockHyperdriveTestnetTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockHyperdriveTestnetABI,
      "transferFromBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockHyperdriveTestnetABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockHyperdriveTestnetABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__.
 */
export function useMockHyperdriveTestnetEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockHyperdriveTestnetABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockHyperdriveTestnetABI,
    ...config,
  } as UseContractEventConfig<typeof mockHyperdriveTestnetABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockHyperdriveTestnetApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockHyperdriveTestnetABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockHyperdriveTestnetABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mockHyperdriveTestnetABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMockHyperdriveTestnetApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof mockHyperdriveTestnetABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockHyperdriveTestnetABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof mockHyperdriveTestnetABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockHyperdriveTestnetABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useMockHyperdriveTestnetTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof mockHyperdriveTestnetABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockHyperdriveTestnetABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof mockHyperdriveTestnetABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockMultiTokenABI}__.
 */
export function useMockMultiToken(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: mockMultiTokenABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__.
 */
export function useMockMultiTokenRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMockMultiTokenDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useMockMultiTokenPermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockMultiTokenBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"factory"`.
 */
export function useMockMultiTokenFactory(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "factory">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "factory">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useMockMultiTokenIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"linkerCodeHash"`.
 */
export function useMockMultiTokenLinkerCodeHash(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "linkerCodeHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "linkerCodeHash",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "linkerCodeHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"name"`.
 */
export function useMockMultiTokenName(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"nonces"`.
 */
export function useMockMultiTokenNonces(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useMockMultiTokenPerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockMultiTokenSymbol(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockMultiTokenTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof mockMultiTokenABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockMultiTokenABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mockMultiTokenABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__.
 */
export function useMockMultiTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockMultiTokenABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof mockMultiTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockMultiTokenABI, TFunctionName>({
    abi: mockMultiTokenABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"__external_transferFrom"`.
 */
export function useMockMultiTokenExternalTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockMultiTokenABI,
          "__external_transferFrom"
        >["abi"],
        "__external_transferFrom"
      > & { functionName?: "__external_transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof mockMultiTokenABI,
        "__external_transferFrom"
      > & {
        abi?: never;
        functionName?: "__external_transferFrom";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockMultiTokenABI,
    "__external_transferFrom"
  >({
    abi: mockMultiTokenABI,
    functionName: "__external_transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"__setBalanceOf"`.
 */
export function useMockMultiTokenSetBalanceOf<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockMultiTokenABI,
          "__setBalanceOf"
        >["abi"],
        "__setBalanceOf"
      > & { functionName?: "__setBalanceOf" }
    : UseContractWriteConfig<
        TMode,
        typeof mockMultiTokenABI,
        "__setBalanceOf"
      > & {
        abi?: never;
        functionName?: "__setBalanceOf";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockMultiTokenABI, "__setBalanceOf">({
    abi: mockMultiTokenABI,
    functionName: "__setBalanceOf",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"__setNameAndSymbol"`.
 */
export function useMockMultiTokenSetNameAndSymbol<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockMultiTokenABI,
          "__setNameAndSymbol"
        >["abi"],
        "__setNameAndSymbol"
      > & { functionName?: "__setNameAndSymbol" }
    : UseContractWriteConfig<
        TMode,
        typeof mockMultiTokenABI,
        "__setNameAndSymbol"
      > & {
        abi?: never;
        functionName?: "__setNameAndSymbol";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockMultiTokenABI,
    "__setNameAndSymbol"
  >({
    abi: mockMultiTokenABI,
    functionName: "__setNameAndSymbol",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function useMockMultiTokenBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockMultiTokenABI,
          "batchTransferFrom"
        >["abi"],
        "batchTransferFrom"
      > & { functionName?: "batchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof mockMultiTokenABI,
        "batchTransferFrom"
      > & {
        abi?: never;
        functionName?: "batchTransferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockMultiTokenABI, "batchTransferFrom">(
    {
      abi: mockMultiTokenABI,
      functionName: "batchTransferFrom",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"permitForAll"`.
 */
export function useMockMultiTokenPermitForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockMultiTokenABI,
          "permitForAll"
        >["abi"],
        "permitForAll"
      > & { functionName?: "permitForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof mockMultiTokenABI,
        "permitForAll"
      > & {
        abi?: never;
        functionName?: "permitForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockMultiTokenABI, "permitForAll">({
    abi: mockMultiTokenABI,
    functionName: "permitForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"setApproval"`.
 */
export function useMockMultiTokenSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockMultiTokenABI,
          "setApproval"
        >["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<TMode, typeof mockMultiTokenABI, "setApproval"> & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockMultiTokenABI, "setApproval">({
    abi: mockMultiTokenABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useMockMultiTokenSetApprovalBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockMultiTokenABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof mockMultiTokenABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockMultiTokenABI, "setApprovalBridge">(
    {
      abi: mockMultiTokenABI,
      functionName: "setApprovalBridge",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMockMultiTokenSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockMultiTokenABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof mockMultiTokenABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockMultiTokenABI, "setApprovalForAll">(
    {
      abi: mockMultiTokenABI,
      functionName: "setApprovalForAll",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockMultiTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockMultiTokenABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof mockMultiTokenABI,
        "transferFrom"
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockMultiTokenABI, "transferFrom">({
    abi: mockMultiTokenABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useMockMultiTokenTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof mockMultiTokenABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof mockMultiTokenABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof mockMultiTokenABI,
    "transferFromBridge"
  >({
    abi: mockMultiTokenABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__.
 */
export function usePrepareMockMultiTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockMultiTokenABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"__external_transferFrom"`.
 */
export function usePrepareMockMultiTokenExternalTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockMultiTokenABI,
      "__external_transferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    functionName: "__external_transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "__external_transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"__setBalanceOf"`.
 */
export function usePrepareMockMultiTokenSetBalanceOf(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "__setBalanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    functionName: "__setBalanceOf",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "__setBalanceOf">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"__setNameAndSymbol"`.
 */
export function usePrepareMockMultiTokenSetNameAndSymbol(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockMultiTokenABI,
      "__setNameAndSymbol"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    functionName: "__setNameAndSymbol",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "__setNameAndSymbol">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function usePrepareMockMultiTokenBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockMultiTokenABI,
      "batchTransferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    functionName: "batchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "batchTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"permitForAll"`.
 */
export function usePrepareMockMultiTokenPermitForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "permitForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    functionName: "permitForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "permitForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareMockMultiTokenSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareMockMultiTokenSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockMultiTokenABI,
      "setApprovalBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMockMultiTokenSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockMultiTokenABI,
      "setApprovalForAll"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockMultiTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockMultiTokenABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareMockMultiTokenTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockMultiTokenABI,
      "transferFromBridge"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockMultiTokenABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockMultiTokenABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockMultiTokenABI}__.
 */
export function useMockMultiTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockMultiTokenABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockMultiTokenABI,
    ...config,
  } as UseContractEventConfig<typeof mockMultiTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockMultiTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockMultiTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockMultiTokenABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockMultiTokenABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mockMultiTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockMultiTokenABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMockMultiTokenApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof mockMultiTokenABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockMultiTokenABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof mockMultiTokenABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockMultiTokenABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useMockMultiTokenTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof mockMultiTokenABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockMultiTokenABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof mockMultiTokenABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockYieldSpaceMathABI}__.
 */
export function useMockYieldSpaceMath(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: mockYieldSpaceMathABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockYieldSpaceMathABI}__.
 */
export function useMockYieldSpaceMathRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof mockYieldSpaceMathABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockYieldSpaceMathABI,
    ...config,
  } as UseContractReadConfig<typeof mockYieldSpaceMathABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockYieldSpaceMathABI}__ and `functionName` set to `"calculateBondsInGivenSharesOut"`.
 */
export function useMockYieldSpaceMathCalculateBondsInGivenSharesOut(
  config: Omit<
    UseContractReadConfig<
      typeof mockYieldSpaceMathABI,
      "calculateBondsInGivenSharesOut"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockYieldSpaceMathABI,
    functionName: "calculateBondsInGivenSharesOut",
    ...config,
  } as UseContractReadConfig<typeof mockYieldSpaceMathABI, "calculateBondsInGivenSharesOut">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockYieldSpaceMathABI}__ and `functionName` set to `"calculateBondsOutGivenSharesIn"`.
 */
export function useMockYieldSpaceMathCalculateBondsOutGivenSharesIn(
  config: Omit<
    UseContractReadConfig<
      typeof mockYieldSpaceMathABI,
      "calculateBondsOutGivenSharesIn"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockYieldSpaceMathABI,
    functionName: "calculateBondsOutGivenSharesIn",
    ...config,
  } as UseContractReadConfig<typeof mockYieldSpaceMathABI, "calculateBondsOutGivenSharesIn">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockYieldSpaceMathABI}__ and `functionName` set to `"calculateSharesInGivenBondsOut"`.
 */
export function useMockYieldSpaceMathCalculateSharesInGivenBondsOut(
  config: Omit<
    UseContractReadConfig<
      typeof mockYieldSpaceMathABI,
      "calculateSharesInGivenBondsOut"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockYieldSpaceMathABI,
    functionName: "calculateSharesInGivenBondsOut",
    ...config,
  } as UseContractReadConfig<typeof mockYieldSpaceMathABI, "calculateSharesInGivenBondsOut">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockYieldSpaceMathABI}__ and `functionName` set to `"calculateSharesOutGivenBondsIn"`.
 */
export function useMockYieldSpaceMathCalculateSharesOutGivenBondsIn(
  config: Omit<
    UseContractReadConfig<
      typeof mockYieldSpaceMathABI,
      "calculateSharesOutGivenBondsIn"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockYieldSpaceMathABI,
    functionName: "calculateSharesOutGivenBondsIn",
    ...config,
  } as UseContractReadConfig<typeof mockYieldSpaceMathABI, "calculateSharesOutGivenBondsIn">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link multiTokenABI}__.
 */
export function useMultiToken(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: multiTokenABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__.
 */
export function useMultiTokenRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMultiTokenDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "DOMAIN_SEPARATOR">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "DOMAIN_SEPARATOR">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useMultiTokenPermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "PERMIT_TYPEHASH">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "PERMIT_TYPEHASH",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "PERMIT_TYPEHASH">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMultiTokenBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "balanceOf">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "balanceOf">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"factory"`.
 */
export function useMultiTokenFactory(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "factory">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "factory",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "factory">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useMultiTokenIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "isApprovedForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "isApprovedForAll">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"linkerCodeHash"`.
 */
export function useMultiTokenLinkerCodeHash(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "linkerCodeHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "linkerCodeHash",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "linkerCodeHash">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"name"`.
 */
export function useMultiTokenName(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "name">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "name">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"nonces"`.
 */
export function useMultiTokenNonces(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "nonces">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "nonces">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"perTokenApprovals"`.
 */
export function useMultiTokenPerTokenApprovals(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "perTokenApprovals">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "perTokenApprovals",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "perTokenApprovals">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useMultiTokenSymbol(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "symbol">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "symbol">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMultiTokenTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof multiTokenABI, "totalSupply">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: multiTokenABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof multiTokenABI, "totalSupply">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiTokenABI}__.
 */
export function useMultiTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multiTokenABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof multiTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiTokenABI, TFunctionName>({
    abi: multiTokenABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function useMultiTokenBatchTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiTokenABI,
          "batchTransferFrom"
        >["abi"],
        "batchTransferFrom"
      > & { functionName?: "batchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof multiTokenABI,
        "batchTransferFrom"
      > & {
        abi?: never;
        functionName?: "batchTransferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiTokenABI, "batchTransferFrom">({
    abi: multiTokenABI,
    functionName: "batchTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"permitForAll"`.
 */
export function useMultiTokenPermitForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multiTokenABI, "permitForAll">["abi"],
        "permitForAll"
      > & { functionName?: "permitForAll" }
    : UseContractWriteConfig<TMode, typeof multiTokenABI, "permitForAll"> & {
        abi?: never;
        functionName?: "permitForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiTokenABI, "permitForAll">({
    abi: multiTokenABI,
    functionName: "permitForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"setApproval"`.
 */
export function useMultiTokenSetApproval<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multiTokenABI, "setApproval">["abi"],
        "setApproval"
      > & { functionName?: "setApproval" }
    : UseContractWriteConfig<TMode, typeof multiTokenABI, "setApproval"> & {
        abi?: never;
        functionName?: "setApproval";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiTokenABI, "setApproval">({
    abi: multiTokenABI,
    functionName: "setApproval",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function useMultiTokenSetApprovalBridge<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiTokenABI,
          "setApprovalBridge"
        >["abi"],
        "setApprovalBridge"
      > & { functionName?: "setApprovalBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof multiTokenABI,
        "setApprovalBridge"
      > & {
        abi?: never;
        functionName?: "setApprovalBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiTokenABI, "setApprovalBridge">({
    abi: multiTokenABI,
    functionName: "setApprovalBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMultiTokenSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiTokenABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof multiTokenABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiTokenABI, "setApprovalForAll">({
    abi: multiTokenABI,
    functionName: "setApprovalForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMultiTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multiTokenABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof multiTokenABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiTokenABI, "transferFrom">({
    abi: multiTokenABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function useMultiTokenTransferFromBridge<
  TMode extends WriteContractMode,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiTokenABI,
          "transferFromBridge"
        >["abi"],
        "transferFromBridge"
      > & { functionName?: "transferFromBridge" }
    : UseContractWriteConfig<
        TMode,
        typeof multiTokenABI,
        "transferFromBridge"
      > & {
        abi?: never;
        functionName?: "transferFromBridge";
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiTokenABI, "transferFromBridge">({
    abi: multiTokenABI,
    functionName: "transferFromBridge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiTokenABI}__.
 */
export function usePrepareMultiTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiTokenABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"batchTransferFrom"`.
 */
export function usePrepareMultiTokenBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiTokenABI, "batchTransferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiTokenABI,
    functionName: "batchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiTokenABI, "batchTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"permitForAll"`.
 */
export function usePrepareMultiTokenPermitForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiTokenABI, "permitForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiTokenABI,
    functionName: "permitForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiTokenABI, "permitForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"setApproval"`.
 */
export function usePrepareMultiTokenSetApproval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiTokenABI, "setApproval">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiTokenABI,
    functionName: "setApproval",
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiTokenABI, "setApproval">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"setApprovalBridge"`.
 */
export function usePrepareMultiTokenSetApprovalBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiTokenABI, "setApprovalBridge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiTokenABI,
    functionName: "setApprovalBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiTokenABI, "setApprovalBridge">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMultiTokenSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiTokenABI, "setApprovalForAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiTokenABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiTokenABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMultiTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiTokenABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiTokenABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiTokenABI}__ and `functionName` set to `"transferFromBridge"`.
 */
export function usePrepareMultiTokenTransferFromBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiTokenABI, "transferFromBridge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiTokenABI,
    functionName: "transferFromBridge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiTokenABI, "transferFromBridge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiTokenABI}__.
 */
export function useMultiTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof multiTokenABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: multiTokenABI,
    ...config,
  } as UseContractEventConfig<typeof multiTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useMultiTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof multiTokenABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: multiTokenABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof multiTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiTokenABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMultiTokenApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof multiTokenABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: multiTokenABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof multiTokenABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiTokenABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useMultiTokenTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof multiTokenABI, "TransferSingle">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: multiTokenABI,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof multiTokenABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausable(
  config: Omit<UseContractConfig, "abi"> = {} as any,
) {
  return useContract({ abi: pausableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: pausableABI,
    ...config,
  } as UseContractReadConfig<typeof pausableABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausablePaused(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, "paused">,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: pausableABI,
    functionName: "paused",
    ...config,
  } as UseContractReadConfig<typeof pausableABI, "paused">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    ...config,
  } as UseContractEventConfig<typeof pausableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausablePausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, "Paused">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: "Paused",
    ...config,
  } as UseContractEventConfig<typeof pausableABI, "Paused">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, "Unpaused">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: "Unpaused",
    ...config,
  } as UseContractEventConfig<typeof pausableABI, "Unpaused">);
}
