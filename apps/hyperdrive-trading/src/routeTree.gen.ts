/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./ui/routes/__root";
import { Route as RestrictedcountriesImport } from "./ui/routes/restricted_countries";
import { Route as PortfolioImport } from "./ui/routes/portfolio";
import { Route as PointsmarketsImport } from "./ui/routes/points_markets";
import { Route as MintImport } from "./ui/routes/mint";
import { Route as LeaderboardImport } from "./ui/routes/leaderboard";
import { Route as IneligibleImport } from "./ui/routes/ineligible";
import { Route as ErrorImport } from "./ui/routes/error";
import { Route as ChainlogImport } from "./ui/routes/chainlog";
import { Route as IndexImport } from "./ui/routes/index";
import { Route as MarketChainIdAddressImport } from "./ui/routes/market.$chainId.$address";

// Create/Update Routes

const RestrictedcountriesRoute = RestrictedcountriesImport.update({
  id: "/restricted_countries",
  path: "/restricted_countries",
  getParentRoute: () => rootRoute,
} as any);

const PortfolioRoute = PortfolioImport.update({
  id: "/portfolio",
  path: "/portfolio",
  getParentRoute: () => rootRoute,
} as any);

const PointsmarketsRoute = PointsmarketsImport.update({
  id: "/points_markets",
  path: "/points_markets",
  getParentRoute: () => rootRoute,
} as any);

const MintRoute = MintImport.update({
  id: "/mint",
  path: "/mint",
  getParentRoute: () => rootRoute,
} as any);

const LeaderboardRoute = LeaderboardImport.update({
  id: "/leaderboard",
  path: "/leaderboard",
  getParentRoute: () => rootRoute,
} as any);

const IneligibleRoute = IneligibleImport.update({
  id: "/ineligible",
  path: "/ineligible",
  getParentRoute: () => rootRoute,
} as any);

const ErrorRoute = ErrorImport.update({
  id: "/error",
  path: "/error",
  getParentRoute: () => rootRoute,
} as any);

const ChainlogRoute = ChainlogImport.update({
  id: "/chainlog",
  path: "/chainlog",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const MarketChainIdAddressRoute = MarketChainIdAddressImport.update({
  id: "/market/$chainId/$address",
  path: "/market/$chainId/$address",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/chainlog": {
      id: "/chainlog";
      path: "/chainlog";
      fullPath: "/chainlog";
      preLoaderRoute: typeof ChainlogImport;
      parentRoute: typeof rootRoute;
    };
    "/error": {
      id: "/error";
      path: "/error";
      fullPath: "/error";
      preLoaderRoute: typeof ErrorImport;
      parentRoute: typeof rootRoute;
    };
    "/ineligible": {
      id: "/ineligible";
      path: "/ineligible";
      fullPath: "/ineligible";
      preLoaderRoute: typeof IneligibleImport;
      parentRoute: typeof rootRoute;
    };
    "/leaderboard": {
      id: "/leaderboard";
      path: "/leaderboard";
      fullPath: "/leaderboard";
      preLoaderRoute: typeof LeaderboardImport;
      parentRoute: typeof rootRoute;
    };
    "/mint": {
      id: "/mint";
      path: "/mint";
      fullPath: "/mint";
      preLoaderRoute: typeof MintImport;
      parentRoute: typeof rootRoute;
    };
    "/points_markets": {
      id: "/points_markets";
      path: "/points_markets";
      fullPath: "/points_markets";
      preLoaderRoute: typeof PointsmarketsImport;
      parentRoute: typeof rootRoute;
    };
    "/portfolio": {
      id: "/portfolio";
      path: "/portfolio";
      fullPath: "/portfolio";
      preLoaderRoute: typeof PortfolioImport;
      parentRoute: typeof rootRoute;
    };
    "/restricted_countries": {
      id: "/restricted_countries";
      path: "/restricted_countries";
      fullPath: "/restricted_countries";
      preLoaderRoute: typeof RestrictedcountriesImport;
      parentRoute: typeof rootRoute;
    };
    "/market/$chainId/$address": {
      id: "/market/$chainId/$address";
      path: "/market/$chainId/$address";
      fullPath: "/market/$chainId/$address";
      preLoaderRoute: typeof MarketChainIdAddressImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/chainlog": typeof ChainlogRoute;
  "/error": typeof ErrorRoute;
  "/ineligible": typeof IneligibleRoute;
  "/leaderboard": typeof LeaderboardRoute;
  "/mint": typeof MintRoute;
  "/points_markets": typeof PointsmarketsRoute;
  "/portfolio": typeof PortfolioRoute;
  "/restricted_countries": typeof RestrictedcountriesRoute;
  "/market/$chainId/$address": typeof MarketChainIdAddressRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/chainlog": typeof ChainlogRoute;
  "/error": typeof ErrorRoute;
  "/ineligible": typeof IneligibleRoute;
  "/leaderboard": typeof LeaderboardRoute;
  "/mint": typeof MintRoute;
  "/points_markets": typeof PointsmarketsRoute;
  "/portfolio": typeof PortfolioRoute;
  "/restricted_countries": typeof RestrictedcountriesRoute;
  "/market/$chainId/$address": typeof MarketChainIdAddressRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/chainlog": typeof ChainlogRoute;
  "/error": typeof ErrorRoute;
  "/ineligible": typeof IneligibleRoute;
  "/leaderboard": typeof LeaderboardRoute;
  "/mint": typeof MintRoute;
  "/points_markets": typeof PointsmarketsRoute;
  "/portfolio": typeof PortfolioRoute;
  "/restricted_countries": typeof RestrictedcountriesRoute;
  "/market/$chainId/$address": typeof MarketChainIdAddressRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/chainlog"
    | "/error"
    | "/ineligible"
    | "/leaderboard"
    | "/mint"
    | "/points_markets"
    | "/portfolio"
    | "/restricted_countries"
    | "/market/$chainId/$address";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/chainlog"
    | "/error"
    | "/ineligible"
    | "/leaderboard"
    | "/mint"
    | "/points_markets"
    | "/portfolio"
    | "/restricted_countries"
    | "/market/$chainId/$address";
  id:
    | "__root__"
    | "/"
    | "/chainlog"
    | "/error"
    | "/ineligible"
    | "/leaderboard"
    | "/mint"
    | "/points_markets"
    | "/portfolio"
    | "/restricted_countries"
    | "/market/$chainId/$address";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ChainlogRoute: typeof ChainlogRoute;
  ErrorRoute: typeof ErrorRoute;
  IneligibleRoute: typeof IneligibleRoute;
  LeaderboardRoute: typeof LeaderboardRoute;
  MintRoute: typeof MintRoute;
  PointsmarketsRoute: typeof PointsmarketsRoute;
  PortfolioRoute: typeof PortfolioRoute;
  RestrictedcountriesRoute: typeof RestrictedcountriesRoute;
  MarketChainIdAddressRoute: typeof MarketChainIdAddressRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChainlogRoute: ChainlogRoute,
  ErrorRoute: ErrorRoute,
  IneligibleRoute: IneligibleRoute,
  LeaderboardRoute: LeaderboardRoute,
  MintRoute: MintRoute,
  PointsmarketsRoute: PointsmarketsRoute,
  PortfolioRoute: PortfolioRoute,
  RestrictedcountriesRoute: RestrictedcountriesRoute,
  MarketChainIdAddressRoute: MarketChainIdAddressRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chainlog",
        "/error",
        "/ineligible",
        "/leaderboard",
        "/mint",
        "/points_markets",
        "/portfolio",
        "/restricted_countries",
        "/market/$chainId/$address"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/chainlog": {
      "filePath": "chainlog.tsx"
    },
    "/error": {
      "filePath": "error.tsx"
    },
    "/ineligible": {
      "filePath": "ineligible.tsx"
    },
    "/leaderboard": {
      "filePath": "leaderboard.tsx"
    },
    "/mint": {
      "filePath": "mint.tsx"
    },
    "/points_markets": {
      "filePath": "points_markets.tsx"
    },
    "/portfolio": {
      "filePath": "portfolio.tsx"
    },
    "/restricted_countries": {
      "filePath": "restricted_countries.tsx"
    },
    "/market/$chainId/$address": {
      "filePath": "market.$chainId.$address.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
