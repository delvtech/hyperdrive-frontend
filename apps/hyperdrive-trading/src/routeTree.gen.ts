/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./ui/routes/__root";
import { Route as VpnImport } from "./ui/routes/vpn";
import { Route as RestrictedcountriesImport } from "./ui/routes/restricted_countries";
import { Route as MarketsImport } from "./ui/routes/markets";
import { Route as IneligibleImport } from "./ui/routes/ineligible";
import { Route as ErrorImport } from "./ui/routes/error";
import { Route as ChainlogImport } from "./ui/routes/chainlog";
import { Route as BridgeImport } from "./ui/routes/bridge";
import { Route as IndexImport } from "./ui/routes/index";
import { Route as MarketAddressImport } from "./ui/routes/market.$address";

// Create/Update Routes

const VpnRoute = VpnImport.update({
  path: "/vpn",
  getParentRoute: () => rootRoute,
} as any);

const RestrictedcountriesRoute = RestrictedcountriesImport.update({
  path: "/restricted_countries",
  getParentRoute: () => rootRoute,
} as any);

const MarketsRoute = MarketsImport.update({
  path: "/markets",
  getParentRoute: () => rootRoute,
} as any);

const IneligibleRoute = IneligibleImport.update({
  path: "/ineligible",
  getParentRoute: () => rootRoute,
} as any);

const ErrorRoute = ErrorImport.update({
  path: "/error",
  getParentRoute: () => rootRoute,
} as any);

const ChainlogRoute = ChainlogImport.update({
  path: "/chainlog",
  getParentRoute: () => rootRoute,
} as any);

const BridgeRoute = BridgeImport.update({
  path: "/bridge",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const MarketAddressRoute = MarketAddressImport.update({
  path: "/market/$address",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/bridge": {
      preLoaderRoute: typeof BridgeImport;
      parentRoute: typeof rootRoute;
    };
    "/chainlog": {
      preLoaderRoute: typeof ChainlogImport;
      parentRoute: typeof rootRoute;
    };
    "/error": {
      preLoaderRoute: typeof ErrorImport;
      parentRoute: typeof rootRoute;
    };
    "/ineligible": {
      preLoaderRoute: typeof IneligibleImport;
      parentRoute: typeof rootRoute;
    };
    "/markets": {
      preLoaderRoute: typeof MarketsImport;
      parentRoute: typeof rootRoute;
    };
    "/restricted_countries": {
      preLoaderRoute: typeof RestrictedcountriesImport;
      parentRoute: typeof rootRoute;
    };
    "/vpn": {
      preLoaderRoute: typeof VpnImport;
      parentRoute: typeof rootRoute;
    };
    "/market/$address": {
      preLoaderRoute: typeof MarketAddressImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  BridgeRoute,
  ChainlogRoute,
  ErrorRoute,
  IneligibleRoute,
  MarketsRoute,
  RestrictedcountriesRoute,
  VpnRoute,
  MarketAddressRoute,
]);

/* prettier-ignore-end */
